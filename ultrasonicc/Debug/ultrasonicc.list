
ultrasonicc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008698  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008820  08008820  00018820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800883c  0800883c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800883c  0800883c  0001883c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008844  08008844  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800884c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  080088dc  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  080088dc  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e20  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000391b  00000000  00000000  00039ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003eb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002401b  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012866  00000000  00000000  00063cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccb95  00000000  00000000  00076529  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001430be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ec  00000000  00000000  0014313c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008808 	.word	0x08008808

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008808 	.word	0x08008808

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <DWT_Delay+0x40>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <DWT_Delay+0x44>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <DWT_Delay+0x48>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9a      	lsrs	r2, r3, #18
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000cc6:	bf00      	nop
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <DWT_Delay+0x40>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8f8      	bhi.n	8000cc8 <DWT_Delay+0x24>
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e0001000 	.word	0xe0001000
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83

08000cf0 <us_read>:
	for(int k=0;k<i;k++){
		x = 0;
	}
}

uint32_t us_read(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint16_t localtime = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4813      	ldr	r0, [pc, #76]	; (8000d4c <us_read+0x5c>)
 8000d00:	f001 f842 	bl	8001d88 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f7ff ffcd 	bl	8000ca4 <DWT_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <us_read+0x5c>)
 8000d10:	f001 f83a 	bl	8001d88 <HAL_GPIO_WritePin>
//	HAL_UART_Transmit(&huart2, "s", sizeof("s"), HAL_MAX_DELAY);
	while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3));
 8000d14:	bf00      	nop
 8000d16:	2108      	movs	r1, #8
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <us_read+0x5c>)
 8000d1a:	f001 f81d 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <us_read+0x26>
//	HAL_UART_Transmit(&huart2, "e", sizeof("e"), HAL_MAX_DELAY);
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8000d24:	e005      	b.n	8000d32 <us_read+0x42>
		localtime++;
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	80fb      	strh	r3, [r7, #6]
		DWT_Delay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ffb9 	bl	8000ca4 <DWT_Delay>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8000d32:	2108      	movs	r1, #8
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <us_read+0x5c>)
 8000d36:	f001 f80f 	bl	8001d58 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f2      	bne.n	8000d26 <us_read+0x36>
	}
	return localtime*2;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	005b      	lsls	r3, r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fcbf 	bl	80016d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f86b 	bl	8000e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f9a9 	bl	80010b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d62:	f000 f8e9 	bl	8000f38 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d66:	f000 f915 	bl	8000f94 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d6a:	f000 f943 	bl	8000ff4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d6e:	f007 f947 	bl	8008000 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000d72:	f000 f975 	bl	8001060 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t sensortime;
   uint16_t distance;
   char buffer[7];

   const uint16_t threshold = 50;
 8000d76:	2332      	movs	r3, #50	; 0x32
 8000d78:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d7a:	f007 f967 	bl	800804c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    sensortime = us_read();
 8000d7e:	f7ff ffb7 	bl	8000cf0 <us_read>
 8000d82:	60b8      	str	r0, [r7, #8]
        distance = sensortime * 0.034/2;
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f7ff fb61 	bl	800044c <__aeabi_ui2d>
 8000d8a:	a327      	add	r3, pc, #156	; (adr r3, 8000e28 <main+0xd8>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fbd6 	bl	8000540 <__aeabi_dmul>
 8000d94:	4603      	mov	r3, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da4:	f7ff fcf6 	bl	8000794 <__aeabi_ddiv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	460c      	mov	r4, r1
 8000dac:	4618      	mov	r0, r3
 8000dae:	4621      	mov	r1, r4
 8000db0:	f7ff fdd8 	bl	8000964 <__aeabi_d2uiz>
 8000db4:	4603      	mov	r3, r0
 8000db6:	81fb      	strh	r3, [r7, #14]
//        sprintf(buffer, "%d", distance);
//              buffer[5] = (char)13;
//             buffer[6] = (char)10;
//              HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
        while ( distance < threshold ){
 8000db8:	e02a      	b.n	8000e10 <main+0xc0>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	481c      	ldr	r0, [pc, #112]	; (8000e30 <main+0xe0>)
 8000dc0:	f000 ffe2 	bl	8001d88 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	4819      	ldr	r0, [pc, #100]	; (8000e30 <main+0xe0>)
 8000dcc:	f000 ffdc 	bl	8001d88 <HAL_GPIO_WritePin>
        	HAL_Delay(100);
 8000dd0:	2064      	movs	r0, #100	; 0x64
 8000dd2:	f000 fcf3 	bl	80017bc <HAL_Delay>
        	sensortime = us_read();
 8000dd6:	f7ff ff8b 	bl	8000cf0 <us_read>
 8000dda:	60b8      	str	r0, [r7, #8]
        	distance = sensortime * 0.034/2;
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f7ff fb35 	bl	800044c <__aeabi_ui2d>
 8000de2:	a311      	add	r3, pc, #68	; (adr r3, 8000e28 <main+0xd8>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fbaa 	bl	8000540 <__aeabi_dmul>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4618      	mov	r0, r3
 8000df2:	4621      	mov	r1, r4
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfc:	f7ff fcca 	bl	8000794 <__aeabi_ddiv>
 8000e00:	4603      	mov	r3, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4618      	mov	r0, r3
 8000e06:	4621      	mov	r1, r4
 8000e08:	f7ff fdac 	bl	8000964 <__aeabi_d2uiz>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	81fb      	strh	r3, [r7, #14]
        while ( distance < threshold ){
 8000e10:	89fa      	ldrh	r2, [r7, #14]
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d3d0      	bcc.n	8000dba <main+0x6a>
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1e:	4804      	ldr	r0, [pc, #16]	; (8000e30 <main+0xe0>)
 8000e20:	f000 ffb2 	bl	8001d88 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000e24:	e7a9      	b.n	8000d7a <main+0x2a>
 8000e26:	bf00      	nop
 8000e28:	b020c49c 	.word	0xb020c49c
 8000e2c:	3fa16872 	.word	0x3fa16872
 8000e30:	40020c00 	.word	0x40020c00

08000e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b098      	sub	sp, #96	; 0x60
 8000e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3e:	2230      	movs	r2, #48	; 0x30
 8000e40:	2100      	movs	r1, #0
 8000e42:	4618      	mov	r0, r3
 8000e44:	f007 fc1e 	bl	8008684 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b31      	ldr	r3, [pc, #196]	; (8000f30 <SystemClock_Config+0xfc>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	4a30      	ldr	r2, [pc, #192]	; (8000f30 <SystemClock_Config+0xfc>)
 8000e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e74:	6413      	str	r3, [r2, #64]	; 0x40
 8000e76:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <SystemClock_Config+0xfc>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <SystemClock_Config+0x100>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a2a      	ldr	r2, [pc, #168]	; (8000f34 <SystemClock_Config+0x100>)
 8000e8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <SystemClock_Config+0x100>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ea2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eb2:	2308      	movs	r3, #8
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000eb6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000eba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f003 f9b5 	bl	8004238 <HAL_RCC_OscConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000ed4:	f000 f9ec 	bl	80012b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed8:	230f      	movs	r3, #15
 8000eda:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ee4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000eea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	2105      	movs	r1, #5
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 fc0e 	bl	8004718 <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f02:	f000 f9d5 	bl	80012b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f06:	2301      	movs	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f0a:	23c0      	movs	r3, #192	; 0xc0
 8000f0c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f12:	f107 030c 	add.w	r3, r7, #12
 8000f16:	4618      	mov	r0, r3
 8000f18:	f003 fdf0 	bl	8004afc <HAL_RCCEx_PeriphCLKConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f22:	f000 f9c5 	bl	80012b0 <Error_Handler>
  }
}
 8000f26:	bf00      	nop
 8000f28:	3760      	adds	r7, #96	; 0x60
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40007000 	.word	0x40007000

08000f38 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f3e:	4a13      	ldr	r2, [pc, #76]	; (8000f8c <MX_I2C1_Init+0x54>)
 8000f40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f42:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f44:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <MX_I2C1_Init+0x58>)
 8000f46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f48:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MX_I2C1_Init+0x50>)
 8000f76:	f002 fb87 	bl	8003688 <HAL_I2C_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f80:	f000 f996 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	200000c0 	.word	0x200000c0
 8000f8c:	40005400 	.word	0x40005400
 8000f90:	000186a0 	.word	0x000186a0

08000f94 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000f9a:	4a14      	ldr	r2, [pc, #80]	; (8000fec <MX_I2S3_Init+0x58>)
 8000f9c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f9e:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fa4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000fa6:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fbc:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <MX_I2S3_Init+0x5c>)
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fc6:	4b08      	ldr	r3, [pc, #32]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <MX_I2S3_Init+0x54>)
 8000fd4:	f002 fc90 	bl	80038f8 <HAL_I2S_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fde:	f000 f967 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	200001ac 	.word	0x200001ac
 8000fec:	40003c00 	.word	0x40003c00
 8000ff0:	00017700 	.word	0x00017700

08000ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_SPI1_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <MX_SPI1_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI1_Init+0x64>)
 8001028:	2200      	movs	r2, #0
 800102a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI1_Init+0x64>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_SPI1_Init+0x64>)
 8001046:	f003 fe97 	bl	8004d78 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 f92e 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000114 	.word	0x20000114
 800105c:	40013000 	.word	0x40013000

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f003 fed2 	bl	8004e40 <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f905 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	2000016c 	.word	0x2000016c
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08c      	sub	sp, #48	; 0x30
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 031c 	add.w	r3, r7, #28
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	61bb      	str	r3, [r7, #24]
 80010ce:	4b71      	ldr	r3, [pc, #452]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a70      	ldr	r2, [pc, #448]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010d4:	f043 0310 	orr.w	r3, r3, #16
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	4b6a      	ldr	r3, [pc, #424]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a69      	ldr	r2, [pc, #420]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b67      	ldr	r3, [pc, #412]	; (8001294 <MX_GPIO_Init+0x1e0>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b63      	ldr	r3, [pc, #396]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a62      	ldr	r2, [pc, #392]	; (8001294 <MX_GPIO_Init+0x1e0>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b60      	ldr	r3, [pc, #384]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b5c      	ldr	r3, [pc, #368]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a5b      	ldr	r2, [pc, #364]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b55      	ldr	r3, [pc, #340]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a54      	ldr	r2, [pc, #336]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b52      	ldr	r3, [pc, #328]	; (8001294 <MX_GPIO_Init+0x1e0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0302 	and.w	r3, r3, #2
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b4e      	ldr	r3, [pc, #312]	; (8001294 <MX_GPIO_Init+0x1e0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a4d      	ldr	r2, [pc, #308]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001160:	f043 0308 	orr.w	r3, r3, #8
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <MX_GPIO_Init+0x1e0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	607b      	str	r3, [r7, #4]
 8001170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2108      	movs	r1, #8
 8001176:	4848      	ldr	r0, [pc, #288]	; (8001298 <MX_GPIO_Init+0x1e4>)
 8001178:	f000 fe06 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2101      	movs	r1, #1
 8001180:	4846      	ldr	r0, [pc, #280]	; (800129c <MX_GPIO_Init+0x1e8>)
 8001182:	f000 fe01 	bl	8001d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8001186:	2200      	movs	r2, #0
 8001188:	f24f 0116 	movw	r1, #61462	; 0xf016
 800118c:	4844      	ldr	r0, [pc, #272]	; (80012a0 <MX_GPIO_Init+0x1ec>)
 800118e:	f000 fdfb 	bl	8001d88 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001192:	2308      	movs	r3, #8
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	483b      	ldr	r0, [pc, #236]	; (8001298 <MX_GPIO_Init+0x1e4>)
 80011aa:	f000 fc3b 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011ae:	2301      	movs	r3, #1
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b2:	2301      	movs	r3, #1
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 031c 	add.w	r3, r7, #28
 80011c2:	4619      	mov	r1, r3
 80011c4:	4835      	ldr	r0, [pc, #212]	; (800129c <MX_GPIO_Init+0x1e8>)
 80011c6:	f000 fc2d 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011ca:	2308      	movs	r3, #8
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ce:	2302      	movs	r3, #2
 80011d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011da:	2305      	movs	r3, #5
 80011dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	482d      	ldr	r0, [pc, #180]	; (800129c <MX_GPIO_Init+0x1e8>)
 80011e6:	f000 fc1d 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ea:	2301      	movs	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80011ee:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <MX_GPIO_Init+0x1f0>)
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 031c 	add.w	r3, r7, #28
 80011fa:	4619      	mov	r1, r3
 80011fc:	482a      	ldr	r0, [pc, #168]	; (80012a8 <MX_GPIO_Init+0x1f4>)
 80011fe:	f000 fc11 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001202:	2304      	movs	r3, #4
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4825      	ldr	r0, [pc, #148]	; (80012ac <MX_GPIO_Init+0x1f8>)
 8001216:	f000 fc05 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800121a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800121e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122c:	2305      	movs	r3, #5
 800122e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	4619      	mov	r1, r3
 8001236:	481d      	ldr	r0, [pc, #116]	; (80012ac <MX_GPIO_Init+0x1f8>)
 8001238:	f000 fbf4 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           PD1 PD2 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800123c:	f24f 0316 	movw	r3, #61462	; 0xf016
 8001240:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001242:	2301      	movs	r3, #1
 8001244:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124e:	f107 031c 	add.w	r3, r7, #28
 8001252:	4619      	mov	r1, r3
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <MX_GPIO_Init+0x1ec>)
 8001256:	f000 fbe5 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|OTG_FS_OverCurrent_Pin;
 800125a:	2328      	movs	r3, #40	; 0x28
 800125c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125e:	2300      	movs	r3, #0
 8001260:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	4619      	mov	r1, r3
 800126c:	480c      	ldr	r0, [pc, #48]	; (80012a0 <MX_GPIO_Init+0x1ec>)
 800126e:	f000 fbd9 	bl	8001a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001272:	2302      	movs	r3, #2
 8001274:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001276:	4b0b      	ldr	r3, [pc, #44]	; (80012a4 <MX_GPIO_Init+0x1f0>)
 8001278:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 031c 	add.w	r3, r7, #28
 8001282:	4619      	mov	r1, r3
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x1e4>)
 8001286:	f000 fbcd 	bl	8001a24 <HAL_GPIO_Init>

}
 800128a:	bf00      	nop
 800128c:	3730      	adds	r7, #48	; 0x30
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40023800 	.word	0x40023800
 8001298:	40021000 	.word	0x40021000
 800129c:	40020800 	.word	0x40020800
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	10120000 	.word	0x10120000
 80012a8:	40020000 	.word	0x40020000
 80012ac:	40020400 	.word	0x40020400

080012b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <HAL_MspInit+0x4c>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a0f      	ldr	r2, [pc, #60]	; (800130c <HAL_MspInit+0x4c>)
 80012d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_MspInit+0x4c>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	603b      	str	r3, [r7, #0]
 80012e6:	4b09      	ldr	r3, [pc, #36]	; (800130c <HAL_MspInit+0x4c>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <HAL_MspInit+0x4c>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_MspInit+0x4c>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	603b      	str	r3, [r7, #0]
 80012fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800

08001310 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_I2C_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12c      	bne.n	800138c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_I2C_MspInit+0x88>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800134e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_I2C_MspInit+0x8c>)
 800136c:	f000 fb5a 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_I2C_MspInit+0x88>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400

080013a0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	; 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a28      	ldr	r2, [pc, #160]	; (8001460 <HAL_I2S_MspInit+0xc0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d14a      	bne.n	8001458 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b24      	ldr	r3, [pc, #144]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_I2S_MspInit+0xc4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001416:	2310      	movs	r3, #16
 8001418:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141a:	2302      	movs	r3, #2
 800141c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001426:	2306      	movs	r3, #6
 8001428:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	4619      	mov	r1, r3
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <HAL_I2S_MspInit+0xc8>)
 8001432:	f000 faf7 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001436:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001448:	2306      	movs	r3, #6
 800144a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144c:	f107 0314 	add.w	r3, r7, #20
 8001450:	4619      	mov	r1, r3
 8001452:	4806      	ldr	r0, [pc, #24]	; (800146c <HAL_I2S_MspInit+0xcc>)
 8001454:	f000 fae6 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001458:	bf00      	nop
 800145a:	3728      	adds	r7, #40	; 0x28
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40003c00 	.word	0x40003c00
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800

08001470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a19      	ldr	r2, [pc, #100]	; (80014f4 <HAL_SPI_MspInit+0x84>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d12b      	bne.n	80014ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	613b      	str	r3, [r7, #16]
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800149a:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 800149c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014a0:	6453      	str	r3, [r2, #68]	; 0x44
 80014a2:	4b15      	ldr	r3, [pc, #84]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014aa:	613b      	str	r3, [r7, #16]
 80014ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a10      	ldr	r2, [pc, #64]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b0e      	ldr	r3, [pc, #56]	; (80014f8 <HAL_SPI_MspInit+0x88>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80014ca:	23e0      	movs	r3, #224	; 0xe0
 80014cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014da:	2305      	movs	r3, #5
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4805      	ldr	r0, [pc, #20]	; (80014fc <HAL_SPI_MspInit+0x8c>)
 80014e6:	f000 fa9d 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014ea:	bf00      	nop
 80014ec:	3728      	adds	r7, #40	; 0x28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40013000 	.word	0x40013000
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020000 	.word	0x40020000

08001500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b08a      	sub	sp, #40	; 0x28
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001508:	f107 0314 	add.w	r3, r7, #20
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0x84>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d12b      	bne.n	800157a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
 8001526:	4b18      	ldr	r3, [pc, #96]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_UART_MspInit+0x88>)
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	6413      	str	r3, [r2, #64]	; 0x40
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	4b11      	ldr	r3, [pc, #68]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	4a10      	ldr	r2, [pc, #64]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6313      	str	r3, [r2, #48]	; 0x30
 800154e:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <HAL_UART_MspInit+0x88>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800155a:	230c      	movs	r3, #12
 800155c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155e:	2302      	movs	r3, #2
 8001560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001562:	2301      	movs	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001566:	2303      	movs	r3, #3
 8001568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800156a:	2307      	movs	r3, #7
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4805      	ldr	r0, [pc, #20]	; (800158c <HAL_UART_MspInit+0x8c>)
 8001576:	f000 fa55 	bl	8001a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40004400 	.word	0x40004400
 8001588:	40023800 	.word	0x40023800
 800158c:	40020000 	.word	0x40020000

08001590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015e4:	f000 f8ca 	bl	800177c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}

080015ec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <OTG_FS_IRQHandler+0x10>)
 80015f2:	f000 fe67 	bl	80022c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200005c4 	.word	0x200005c4

08001600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <_sbrk+0x50>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d102      	bne.n	8001616 <_sbrk+0x16>
		heap_end = &end;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <_sbrk+0x50>)
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <_sbrk+0x54>)
 8001614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <_sbrk+0x50>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <_sbrk+0x50>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4413      	add	r3, r2
 8001624:	466a      	mov	r2, sp
 8001626:	4293      	cmp	r3, r2
 8001628:	d907      	bls.n	800163a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800162a:	f006 fff1 	bl	8008610 <__errno>
 800162e:	4602      	mov	r2, r0
 8001630:	230c      	movs	r3, #12
 8001632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
 8001638:	e006      	b.n	8001648 <_sbrk+0x48>
	}

	heap_end += incr;
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <_sbrk+0x50>)
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	4a03      	ldr	r2, [pc, #12]	; (8001650 <_sbrk+0x50>)
 8001644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001646:	68fb      	ldr	r3, [r7, #12]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	200000ac 	.word	0x200000ac
 8001654:	20000890 	.word	0x20000890

08001658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800165c:	4b08      	ldr	r3, [pc, #32]	; (8001680 <SystemInit+0x28>)
 800165e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001662:	4a07      	ldr	r2, [pc, #28]	; (8001680 <SystemInit+0x28>)
 8001664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SystemInit+0x28>)
 800166e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001672:	609a      	str	r2, [r3, #8]
#endif
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800168a:	e003      	b.n	8001694 <LoopCopyDataInit>

0800168c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800168e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001692:	3104      	adds	r1, #4

08001694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001694:	480b      	ldr	r0, [pc, #44]	; (80016c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800169a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800169c:	d3f6      	bcc.n	800168c <CopyDataInit>
  ldr  r2, =_sbss
 800169e:	4a0b      	ldr	r2, [pc, #44]	; (80016cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016a0:	e002      	b.n	80016a8 <LoopFillZerobss>

080016a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016a4:	f842 3b04 	str.w	r3, [r2], #4

080016a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016ac:	d3f9      	bcc.n	80016a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ae:	f7ff ffd3 	bl	8001658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b2:	f006 ffb3 	bl	800861c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016b6:	f7ff fb4b 	bl	8000d50 <main>
  bx  lr    
 80016ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80016bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80016c0:	0800884c 	.word	0x0800884c
  ldr  r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80016c8:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80016cc:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80016d0:	2000088c 	.word	0x2000088c

080016d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC_IRQHandler>
	...

080016d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016dc:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <HAL_Init+0x40>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a0d      	ldr	r2, [pc, #52]	; (8001718 <HAL_Init+0x40>)
 80016e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_Init+0x40>)
 80016ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_Init+0x40>)
 80016fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001700:	2003      	movs	r0, #3
 8001702:	f000 f94d 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001706:	2000      	movs	r0, #0
 8001708:	f000 f808 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170c:	f7ff fdd8 	bl	80012c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00

0800171c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x54>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <HAL_InitTick+0x58>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f965 	bl	8001a0a <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e00e      	b.n	8001768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2b0f      	cmp	r3, #15
 800174e:	d80a      	bhi.n	8001766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001750:	2200      	movs	r2, #0
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f000 f92d 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800175c:	4a06      	ldr	r2, [pc, #24]	; (8001778 <HAL_InitTick+0x5c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20000000 	.word	0x20000000
 8001774:	20000008 	.word	0x20000008
 8001778:	20000004 	.word	0x20000004

0800177c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001780:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x20>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	461a      	mov	r2, r3
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x24>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4413      	add	r3, r2
 800178c:	4a04      	ldr	r2, [pc, #16]	; (80017a0 <HAL_IncTick+0x24>)
 800178e:	6013      	str	r3, [r2, #0]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	20000008 	.word	0x20000008
 80017a0:	200001f4 	.word	0x200001f4

080017a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return uwTick;
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <HAL_GetTick+0x14>)
 80017aa:	681b      	ldr	r3, [r3, #0]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	200001f4 	.word	0x200001f4

080017bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b084      	sub	sp, #16
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff ffee 	bl	80017a4 <HAL_GetTick>
 80017c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d4:	d005      	beq.n	80017e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_Delay+0x40>)
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	461a      	mov	r2, r3
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	4413      	add	r3, r2
 80017e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017e2:	bf00      	nop
 80017e4:	f7ff ffde 	bl	80017a4 <HAL_GetTick>
 80017e8:	4602      	mov	r2, r0
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	68fa      	ldr	r2, [r7, #12]
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d8f7      	bhi.n	80017e4 <HAL_Delay+0x28>
  {
  }
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000008 	.word	0x20000008

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001832:	4a04      	ldr	r2, [pc, #16]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	60d3      	str	r3, [r2, #12]
}
 8001838:	bf00      	nop
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	e000ed00 	.word	0xe000ed00

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff3e 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff31 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b089      	sub	sp, #36	; 0x24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	e16b      	b.n	8001d18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	4013      	ands	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	f040 815a 	bne.w	8001d12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d00b      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d007      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a72:	2b11      	cmp	r3, #17
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b12      	cmp	r3, #18
 8001a7c:	d130      	bne.n	8001ae0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	2203      	movs	r2, #3
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43db      	mvns	r3, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4013      	ands	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	68da      	ldr	r2, [r3, #12]
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	091b      	lsrs	r3, r3, #4
 8001aca:	f003 0201 	and.w	r2, r3, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	2203      	movs	r2, #3
 8001aec:	fa02 f303 	lsl.w	r3, r2, r3
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d003      	beq.n	8001b20 <HAL_GPIO_Init+0xfc>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	2b12      	cmp	r3, #18
 8001b1e:	d123      	bne.n	8001b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	08da      	lsrs	r2, r3, #3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3208      	adds	r2, #8
 8001b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	220f      	movs	r2, #15
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	691a      	ldr	r2, [r3, #16]
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	08da      	lsrs	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	3208      	adds	r2, #8
 8001b62:	69b9      	ldr	r1, [r7, #24]
 8001b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	2203      	movs	r2, #3
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f003 0203 	and.w	r2, r3, #3
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f000 80b4 	beq.w	8001d12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_GPIO_Init+0x308>)
 8001bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb2:	4a5e      	ldr	r2, [pc, #376]	; (8001d2c <HAL_GPIO_Init+0x308>)
 8001bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_GPIO_Init+0x308>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bc6:	4a5a      	ldr	r2, [pc, #360]	; (8001d30 <HAL_GPIO_Init+0x30c>)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	089b      	lsrs	r3, r3, #2
 8001bcc:	3302      	adds	r3, #2
 8001bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4013      	ands	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x310>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d02b      	beq.n	8001c4a <HAL_GPIO_Init+0x226>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x314>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d025      	beq.n	8001c46 <HAL_GPIO_Init+0x222>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x318>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d01f      	beq.n	8001c42 <HAL_GPIO_Init+0x21e>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4e      	ldr	r2, [pc, #312]	; (8001d40 <HAL_GPIO_Init+0x31c>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d019      	beq.n	8001c3e <HAL_GPIO_Init+0x21a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4d      	ldr	r2, [pc, #308]	; (8001d44 <HAL_GPIO_Init+0x320>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d013      	beq.n	8001c3a <HAL_GPIO_Init+0x216>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4c      	ldr	r2, [pc, #304]	; (8001d48 <HAL_GPIO_Init+0x324>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00d      	beq.n	8001c36 <HAL_GPIO_Init+0x212>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4b      	ldr	r2, [pc, #300]	; (8001d4c <HAL_GPIO_Init+0x328>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d007      	beq.n	8001c32 <HAL_GPIO_Init+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4a      	ldr	r2, [pc, #296]	; (8001d50 <HAL_GPIO_Init+0x32c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d101      	bne.n	8001c2e <HAL_GPIO_Init+0x20a>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00e      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c2e:	2308      	movs	r3, #8
 8001c30:	e00c      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c32:	2306      	movs	r3, #6
 8001c34:	e00a      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c36:	2305      	movs	r3, #5
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x228>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	69fa      	ldr	r2, [r7, #28]
 8001c4e:	f002 0203 	and.w	r2, r2, #3
 8001c52:	0092      	lsls	r2, r2, #2
 8001c54:	4093      	lsls	r3, r2
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c5c:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_GPIO_Init+0x30c>)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3302      	adds	r3, #2
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c6a:	4b3a      	ldr	r3, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c8e:	4a31      	ldr	r2, [pc, #196]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c94:	4b2f      	ldr	r3, [pc, #188]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cb8:	4a26      	ldr	r2, [pc, #152]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b25      	ldr	r3, [pc, #148]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a1c      	ldr	r2, [pc, #112]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a11      	ldr	r2, [pc, #68]	; (8001d54 <HAL_GPIO_Init+0x330>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3301      	adds	r3, #1
 8001d16:	61fb      	str	r3, [r7, #28]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	2b0f      	cmp	r3, #15
 8001d1c:	f67f ae90 	bls.w	8001a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d20:	bf00      	nop
 8001d22:	3724      	adds	r7, #36	; 0x24
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40013800 	.word	0x40013800
 8001d34:	40020000 	.word	0x40020000
 8001d38:	40020400 	.word	0x40020400
 8001d3c:	40020800 	.word	0x40020800
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021000 	.word	0x40021000
 8001d48:	40021400 	.word	0x40021400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40021c00 	.word	0x40021c00
 8001d54:	40013c00 	.word	0x40013c00

08001d58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	887b      	ldrh	r3, [r7, #2]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d002      	beq.n	8001d76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	73fb      	strb	r3, [r7, #15]
 8001d74:	e001      	b.n	8001d7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	460b      	mov	r3, r1
 8001d92:	807b      	strh	r3, [r7, #2]
 8001d94:	4613      	mov	r3, r2
 8001d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d98:	787b      	ldrb	r3, [r7, #1]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d9e:	887a      	ldrh	r2, [r7, #2]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da4:	e003      	b.n	8001dae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001da6:	887b      	ldrh	r3, [r7, #2]
 8001da8:	041a      	lsls	r2, r3, #16
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	619a      	str	r2, [r3, #24]
}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001dba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dbc:	b08f      	sub	sp, #60	; 0x3c
 8001dbe:	af0a      	add	r7, sp, #40	; 0x28
 8001dc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e054      	b.n	8001e76 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f006 f968 	bl	80080bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2203      	movs	r2, #3
 8001df0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f003 fc54 	bl	80056b8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	603b      	str	r3, [r7, #0]
 8001e16:	687e      	ldr	r6, [r7, #4]
 8001e18:	466d      	mov	r5, sp
 8001e1a:	f106 0410 	add.w	r4, r6, #16
 8001e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e2e:	1d33      	adds	r3, r6, #4
 8001e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e32:	6838      	ldr	r0, [r7, #0]
 8001e34:	f003 fbce 	bl	80055d4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 fc4b 	bl	80056da <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	687e      	ldr	r6, [r7, #4]
 8001e4c:	466d      	mov	r5, sp
 8001e4e:	f106 0410 	add.w	r4, r6, #16
 8001e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e62:	1d33      	adds	r3, r6, #4
 8001e64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e66:	6838      	ldr	r0, [r7, #0]
 8001e68:	f003 fd5e 	bl	8005928 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001e7e:	b590      	push	{r4, r7, lr}
 8001e80:	b089      	sub	sp, #36	; 0x24
 8001e82:	af04      	add	r7, sp, #16
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	4608      	mov	r0, r1
 8001e88:	4611      	mov	r1, r2
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	70fb      	strb	r3, [r7, #3]
 8001e90:	460b      	mov	r3, r1
 8001e92:	70bb      	strb	r3, [r7, #2]
 8001e94:	4613      	mov	r3, r2
 8001e96:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d101      	bne.n	8001ea6 <HAL_HCD_HC_Init+0x28>
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e07f      	b.n	8001fa6 <HAL_HCD_HC_Init+0x128>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	6879      	ldr	r1, [r7, #4]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4413      	add	r3, r2
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	440b      	add	r3, r1
 8001ebc:	333d      	adds	r3, #61	; 0x3d
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001ec2:	78fa      	ldrb	r2, [r7, #3]
 8001ec4:	6879      	ldr	r1, [r7, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	440b      	add	r3, r1
 8001ed0:	3338      	adds	r3, #56	; 0x38
 8001ed2:	787a      	ldrb	r2, [r7, #1]
 8001ed4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001ed6:	78fa      	ldrb	r2, [r7, #3]
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	4613      	mov	r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	440b      	add	r3, r1
 8001ee4:	3340      	adds	r3, #64	; 0x40
 8001ee6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001ee8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3339      	adds	r3, #57	; 0x39
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	333f      	adds	r3, #63	; 0x3f
 8001f0e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	78bb      	ldrb	r3, [r7, #2]
 8001f18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f1c:	b2d8      	uxtb	r0, r3
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	4413      	add	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	440b      	add	r3, r1
 8001f2a:	333a      	adds	r3, #58	; 0x3a
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f30:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	da0a      	bge.n	8001f4e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	440b      	add	r3, r1
 8001f46:	333b      	adds	r3, #59	; 0x3b
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
 8001f4c:	e009      	b.n	8001f62 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	333b      	adds	r3, #59	; 0x3b
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001f62:	78fa      	ldrb	r2, [r7, #3]
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	4613      	mov	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4413      	add	r3, r2
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	440b      	add	r3, r1
 8001f70:	333c      	adds	r3, #60	; 0x3c
 8001f72:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001f76:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	787c      	ldrb	r4, [r7, #1]
 8001f7e:	78ba      	ldrb	r2, [r7, #2]
 8001f80:	78f9      	ldrb	r1, [r7, #3]
 8001f82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f84:	9302      	str	r3, [sp, #8]
 8001f86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	f003 fe4a 	bl	8005c2c <USB_HC_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}

08001fae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b084      	sub	sp, #16
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_HCD_HC_Halt+0x1e>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e00f      	b.n	8001fec <HAL_HCD_HC_Halt+0x3e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f004 f884 	bl	80060ea <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	70fb      	strb	r3, [r7, #3]
 8002006:	460b      	mov	r3, r1
 8002008:	70bb      	strb	r3, [r7, #2]
 800200a:	4613      	mov	r3, r2
 800200c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800200e:	78fa      	ldrb	r2, [r7, #3]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	440b      	add	r3, r1
 800201c:	333b      	adds	r3, #59	; 0x3b
 800201e:	78ba      	ldrb	r2, [r7, #2]
 8002020:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	440b      	add	r3, r1
 8002030:	333f      	adds	r3, #63	; 0x3f
 8002032:	787a      	ldrb	r2, [r7, #1]
 8002034:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002036:	7c3b      	ldrb	r3, [r7, #16]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10a      	bne.n	8002052 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800203c:	78fa      	ldrb	r2, [r7, #3]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	440b      	add	r3, r1
 800204a:	3342      	adds	r3, #66	; 0x42
 800204c:	2203      	movs	r2, #3
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	e009      	b.n	8002066 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	440b      	add	r3, r1
 8002060:	3342      	adds	r3, #66	; 0x42
 8002062:	2202      	movs	r2, #2
 8002064:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002066:	787b      	ldrb	r3, [r7, #1]
 8002068:	2b03      	cmp	r3, #3
 800206a:	f200 80d6 	bhi.w	800221a <HAL_HCD_HC_SubmitRequest+0x226>
 800206e:	a201      	add	r2, pc, #4	; (adr r2, 8002074 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002074:	08002085 	.word	0x08002085
 8002078:	08002205 	.word	0x08002205
 800207c:	080020f1 	.word	0x080020f1
 8002080:	0800217b 	.word	0x0800217b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002084:	7c3b      	ldrb	r3, [r7, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	f040 80c9 	bne.w	800221e <HAL_HCD_HC_SubmitRequest+0x22a>
 800208c:	78bb      	ldrb	r3, [r7, #2]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 80c5 	bne.w	800221e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002094:	8b3b      	ldrh	r3, [r7, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800209a:	78fa      	ldrb	r2, [r7, #3]
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	440b      	add	r3, r1
 80020a8:	3351      	adds	r3, #81	; 0x51
 80020aa:	2201      	movs	r2, #1
 80020ac:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020ae:	78fa      	ldrb	r2, [r7, #3]
 80020b0:	6879      	ldr	r1, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	440b      	add	r3, r1
 80020bc:	3351      	adds	r3, #81	; 0x51
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d10a      	bne.n	80020da <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	440b      	add	r3, r1
 80020d2:	3342      	adds	r3, #66	; 0x42
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020d8:	e0a1      	b.n	800221e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	440b      	add	r3, r1
 80020e8:	3342      	adds	r3, #66	; 0x42
 80020ea:	2202      	movs	r2, #2
 80020ec:	701a      	strb	r2, [r3, #0]
      break;
 80020ee:	e096      	b.n	800221e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80020f0:	78bb      	ldrb	r3, [r7, #2]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d120      	bne.n	8002138 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020f6:	78fa      	ldrb	r2, [r7, #3]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	440b      	add	r3, r1
 8002104:	3351      	adds	r3, #81	; 0x51
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	440b      	add	r3, r1
 800211a:	3342      	adds	r3, #66	; 0x42
 800211c:	2200      	movs	r2, #0
 800211e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002120:	e07e      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	00db      	lsls	r3, r3, #3
 800212e:	440b      	add	r3, r1
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e073      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	440b      	add	r3, r1
 8002146:	3350      	adds	r3, #80	; 0x50
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800214e:	78fa      	ldrb	r2, [r7, #3]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	440b      	add	r3, r1
 800215c:	3342      	adds	r3, #66	; 0x42
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]
      break;
 8002162:	e05d      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	2202      	movs	r2, #2
 8002176:	701a      	strb	r2, [r3, #0]
      break;
 8002178:	e052      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800217a:	78bb      	ldrb	r3, [r7, #2]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d120      	bne.n	80021c2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	440b      	add	r3, r1
 800218e:	3351      	adds	r3, #81	; 0x51
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10a      	bne.n	80021ac <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002196:	78fa      	ldrb	r2, [r7, #3]
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	440b      	add	r3, r1
 80021a4:	3342      	adds	r3, #66	; 0x42
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021aa:	e039      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	3342      	adds	r3, #66	; 0x42
 80021bc:	2202      	movs	r2, #2
 80021be:	701a      	strb	r2, [r3, #0]
      break;
 80021c0:	e02e      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c2:	78fa      	ldrb	r2, [r7, #3]
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	440b      	add	r3, r1
 80021d0:	3350      	adds	r3, #80	; 0x50
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10a      	bne.n	80021ee <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d8:	78fa      	ldrb	r2, [r7, #3]
 80021da:	6879      	ldr	r1, [r7, #4]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	440b      	add	r3, r1
 80021e6:	3342      	adds	r3, #66	; 0x42
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
      break;
 80021ec:	e018      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ee:	78fa      	ldrb	r2, [r7, #3]
 80021f0:	6879      	ldr	r1, [r7, #4]
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	00db      	lsls	r3, r3, #3
 80021fa:	440b      	add	r3, r1
 80021fc:	3342      	adds	r3, #66	; 0x42
 80021fe:	2202      	movs	r2, #2
 8002200:	701a      	strb	r2, [r3, #0]
      break;
 8002202:	e00d      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002204:	78fa      	ldrb	r2, [r7, #3]
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	4613      	mov	r3, r2
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	4413      	add	r3, r2
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	440b      	add	r3, r1
 8002212:	3342      	adds	r3, #66	; 0x42
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
      break;
 8002218:	e002      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800221a:	bf00      	nop
 800221c:	e000      	b.n	8002220 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800221e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002220:	78fa      	ldrb	r2, [r7, #3]
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	440b      	add	r3, r1
 800222e:	3344      	adds	r3, #68	; 0x44
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	8b39      	ldrh	r1, [r7, #24]
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4403      	add	r3, r0
 8002244:	3348      	adds	r3, #72	; 0x48
 8002246:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002248:	78fa      	ldrb	r2, [r7, #3]
 800224a:	6879      	ldr	r1, [r7, #4]
 800224c:	4613      	mov	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	4413      	add	r3, r2
 8002252:	00db      	lsls	r3, r3, #3
 8002254:	440b      	add	r3, r1
 8002256:	335c      	adds	r3, #92	; 0x5c
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	6879      	ldr	r1, [r7, #4]
 8002260:	4613      	mov	r3, r2
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	440b      	add	r3, r1
 800226a:	334c      	adds	r3, #76	; 0x4c
 800226c:	2200      	movs	r2, #0
 800226e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3339      	adds	r3, #57	; 0x39
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	335d      	adds	r3, #93	; 0x5d
 8002294:	2200      	movs	r2, #0
 8002296:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6818      	ldr	r0, [r3, #0]
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	3338      	adds	r3, #56	; 0x38
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	18d1      	adds	r1, r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	461a      	mov	r2, r3
 80022b4:	f003 fdc4 	bl	8005e40 <USB_HC_StartXfer>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop

080022c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fae1 	bl	80058a2 <USB_GetMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	f040 80f1 	bne.w	80024ca <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 fac5 	bl	800587c <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 80e7 	beq.w	80024c8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f003 fabc 	bl	800587c <USB_ReadInterrupts>
 8002304:	4603      	mov	r3, r0
 8002306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800230e:	d104      	bne.n	800231a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002318:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 faac 	bl	800587c <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800232a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800232e:	d104      	bne.n	800233a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002338:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 fa9c 	bl	800587c <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800234a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800234e:	d104      	bne.n	800235a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 fa8c 	bl	800587c <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2202      	movs	r2, #2
 8002374:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f003 fa7e 	bl	800587c <USB_ReadInterrupts>
 8002380:	4603      	mov	r3, r0
 8002382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800238a:	d117      	bne.n	80023bc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800239a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800239e:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f005 ff09 	bl	80081b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2101      	movs	r1, #1
 80023ac:	4618      	mov	r0, r3
 80023ae:	f003 fb77 	bl	8005aa0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f003 fa5b 	bl	800587c <USB_ReadInterrupts>
 80023c6:	4603      	mov	r3, r0
 80023c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023d0:	d102      	bne.n	80023d8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f001 f8c8 	bl	8003568 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4618      	mov	r0, r3
 80023de:	f003 fa4d 	bl	800587c <USB_ReadInterrupts>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	2b08      	cmp	r3, #8
 80023ea:	d106      	bne.n	80023fa <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f005 fec7 	bl	8008180 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	2208      	movs	r2, #8
 80023f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f003 fa3c 	bl	800587c <USB_ReadInterrupts>
 8002404:	4603      	mov	r3, r0
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800240e:	d138      	bne.n	8002482 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f003 fe57 	bl	80060c8 <USB_HC_ReadInterrupt>
 800241a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e025      	b.n	800246e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	fa22 f303 	lsr.w	r3, r2, r3
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d018      	beq.n	8002468 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	015a      	lsls	r2, r3, #5
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4413      	add	r3, r2
 800243e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002448:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800244c:	d106      	bne.n	800245c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	b2db      	uxtb	r3, r3
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f8cf 	bl	80025f8 <HCD_HC_IN_IRQHandler>
 800245a:	e005      	b.n	8002468 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	b2db      	uxtb	r3, r3
 8002460:	4619      	mov	r1, r3
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fc5f 	bl	8002d26 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3301      	adds	r3, #1
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	429a      	cmp	r2, r3
 8002476:	d3d4      	bcc.n	8002422 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f003 f9f8 	bl	800587c <USB_ReadInterrupts>
 800248c:	4603      	mov	r3, r0
 800248e:	f003 0310 	and.w	r3, r3, #16
 8002492:	2b10      	cmp	r3, #16
 8002494:	d101      	bne.n	800249a <HAL_HCD_IRQHandler+0x1d6>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <HAL_HCD_IRQHandler+0x1d8>
 800249a:	2300      	movs	r3, #0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d014      	beq.n	80024ca <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	699a      	ldr	r2, [r3, #24]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f022 0210 	bic.w	r2, r2, #16
 80024ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 ffad 	bl	8003410 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699a      	ldr	r2, [r3, #24]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f042 0210 	orr.w	r2, r2, #16
 80024c4:	619a      	str	r2, [r3, #24]
 80024c6:	e000      	b.n	80024ca <HAL_HCD_IRQHandler+0x206>
      return;
 80024c8:	bf00      	nop
    }
  }
}
 80024ca:	3718      	adds	r7, #24
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_HCD_Start+0x16>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e013      	b.n	800250e <HAL_HCD_Start+0x3e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 f8cf 	bl	8005696 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f003 fb32 	bl	8005b68 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_HCD_Stop+0x16>
 8002528:	2302      	movs	r3, #2
 800252a:	e00d      	b.n	8002548 <HAL_HCD_Stop+0x32>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4618      	mov	r0, r3
 800253a:	f003 ff11 	bl	8006360 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002546:	2300      	movs	r3, #0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f003 fad9 	bl	8005b14 <USB_ResetPort>
 8002562:	4603      	mov	r3, r0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	440b      	add	r3, r1
 8002586:	335c      	adds	r3, #92	; 0x5c
 8002588:	781b      	ldrb	r3, [r3, #0]
}
 800258a:	4618      	mov	r0, r3
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	00db      	lsls	r3, r3, #3
 80025ae:	440b      	add	r3, r1
 80025b0:	334c      	adds	r3, #76	; 0x4c
 80025b2:	681b      	ldr	r3, [r3, #0]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fb1b 	bl	8005c08 <USB_GetCurrentFrame>
 80025d2:	4603      	mov	r3, r0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	3708      	adds	r7, #8
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd80      	pop	{r7, pc}

080025dc <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 faf6 	bl	8005bda <USB_GetHostSpeed>
 80025ee:	4603      	mov	r3, r0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b086      	sub	sp, #24
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800260e:	78fb      	ldrb	r3, [r7, #3]
 8002610:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	015a      	lsls	r2, r3, #5
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4413      	add	r3, r2
 800261a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b04      	cmp	r3, #4
 8002626:	d119      	bne.n	800265c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	461a      	mov	r2, r3
 8002636:	2304      	movs	r3, #4
 8002638:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4413      	add	r3, r2
 8002642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	68fa      	ldr	r2, [r7, #12]
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	440a      	add	r2, r1
 8002650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002654:	f043 0302 	orr.w	r3, r3, #2
 8002658:	60d3      	str	r3, [r2, #12]
 800265a:	e095      	b.n	8002788 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	4413      	add	r3, r2
 8002664:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b20      	cmp	r3, #32
 8002670:	d109      	bne.n	8002686 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	4413      	add	r3, r2
 800267a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800267e:	461a      	mov	r2, r3
 8002680:	2320      	movs	r3, #32
 8002682:	6093      	str	r3, [r2, #8]
 8002684:	e080      	b.n	8002788 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0308 	and.w	r3, r3, #8
 8002698:	2b08      	cmp	r3, #8
 800269a:	d134      	bne.n	8002706 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	0151      	lsls	r1, r2, #5
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	440a      	add	r2, r1
 80026b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026b6:	f043 0302 	orr.w	r3, r3, #2
 80026ba:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80026bc:	6879      	ldr	r1, [r7, #4]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	335d      	adds	r3, #93	; 0x5d
 80026cc:	2205      	movs	r2, #5
 80026ce:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	461a      	mov	r2, r3
 80026de:	2310      	movs	r3, #16
 80026e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ee:	461a      	mov	r2, r3
 80026f0:	2308      	movs	r3, #8
 80026f2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fcf3 	bl	80060ea <USB_HC_Halt>
 8002704:	e040      	b.n	8002788 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4413      	add	r3, r2
 800270e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271c:	d134      	bne.n	8002788 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	015a      	lsls	r2, r3, #5
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4413      	add	r3, r2
 8002726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	0151      	lsls	r1, r2, #5
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	440a      	add	r2, r1
 8002734:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f003 fcce 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	015a      	lsls	r2, r3, #5
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4413      	add	r3, r2
 8002756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800275a:	461a      	mov	r2, r3
 800275c:	2310      	movs	r3, #16
 800275e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4613      	mov	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4413      	add	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	440b      	add	r3, r1
 800276e:	335d      	adds	r3, #93	; 0x5d
 8002770:	2208      	movs	r2, #8
 8002772:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	4413      	add	r3, r2
 800277c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002780:	461a      	mov	r2, r3
 8002782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002786:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	015a      	lsls	r2, r3, #5
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	4413      	add	r3, r2
 8002790:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279e:	d122      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	0151      	lsls	r1, r2, #5
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	440a      	add	r2, r1
 80027b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027ba:	f043 0302 	orr.w	r3, r3, #2
 80027be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 fc8d 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	461a      	mov	r2, r3
 80027de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80027e4:	e29b      	b.n	8002d1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	f040 80c1 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d01b      	beq.n	800283e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	440b      	add	r3, r1
 8002814:	3348      	adds	r3, #72	; 0x48
 8002816:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	0159      	lsls	r1, r3, #5
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	440b      	add	r3, r1
 8002820:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800282a:	1ad1      	subs	r1, r2, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	4613      	mov	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	4413      	add	r3, r2
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4403      	add	r3, r0
 800283a:	334c      	adds	r3, #76	; 0x4c
 800283c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800283e:	6879      	ldr	r1, [r7, #4]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	440b      	add	r3, r1
 800284c:	335d      	adds	r3, #93	; 0x5d
 800284e:	2201      	movs	r2, #1
 8002850:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	440b      	add	r3, r1
 8002860:	3358      	adds	r3, #88	; 0x58
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	015a      	lsls	r2, r3, #5
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4413      	add	r3, r2
 800286e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002872:	461a      	mov	r2, r3
 8002874:	2301      	movs	r3, #1
 8002876:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	68fa      	ldr	r2, [r7, #12]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	440b      	add	r3, r1
 8002886:	333f      	adds	r3, #63	; 0x3f
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	333f      	adds	r3, #63	; 0x3f
 800289e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d121      	bne.n	80028e8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	015a      	lsls	r2, r3, #5
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4413      	add	r3, r2
 80028ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	0151      	lsls	r1, r2, #5
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	440a      	add	r2, r1
 80028ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028be:	f043 0302 	orr.w	r3, r3, #2
 80028c2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f003 fc0b 	bl	80060ea <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	461a      	mov	r2, r3
 80028e2:	2310      	movs	r3, #16
 80028e4:	6093      	str	r3, [r2, #8]
 80028e6:	e034      	b.n	8002952 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80028e8:	6879      	ldr	r1, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4613      	mov	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	440b      	add	r3, r1
 80028f6:	333f      	adds	r3, #63	; 0x3f
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b03      	cmp	r3, #3
 80028fc:	d129      	bne.n	8002952 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	015a      	lsls	r2, r3, #5
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4413      	add	r3, r2
 8002906:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	0151      	lsls	r1, r2, #5
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	440a      	add	r2, r1
 8002914:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002918:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800291c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800291e:	6879      	ldr	r1, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4613      	mov	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	4413      	add	r3, r2
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	440b      	add	r3, r1
 800292c:	335c      	adds	r3, #92	; 0x5c
 800292e:	2201      	movs	r2, #1
 8002930:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	b2d8      	uxtb	r0, r3
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	440b      	add	r3, r1
 8002944:	335c      	adds	r3, #92	; 0x5c
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	4601      	mov	r1, r0
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f005 fc41 	bl	80081d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	440b      	add	r3, r1
 8002960:	3350      	adds	r3, #80	; 0x50
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3350      	adds	r3, #80	; 0x50
 800297a:	4602      	mov	r2, r0
 800297c:	701a      	strb	r2, [r3, #0]
}
 800297e:	e1ce      	b.n	8002d1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	f040 80f1 	bne.w	8002b7a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	015a      	lsls	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4413      	add	r3, r2
 80029a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	0151      	lsls	r1, r2, #5
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	440a      	add	r2, r1
 80029ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029b2:	f023 0302 	bic.w	r3, r3, #2
 80029b6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80029b8:	6879      	ldr	r1, [r7, #4]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	335d      	adds	r3, #93	; 0x5d
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d10a      	bne.n	80029e4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	440b      	add	r3, r1
 80029dc:	335c      	adds	r3, #92	; 0x5c
 80029de:	2201      	movs	r2, #1
 80029e0:	701a      	strb	r2, [r3, #0]
 80029e2:	e0b0      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80029e4:	6879      	ldr	r1, [r7, #4]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	440b      	add	r3, r1
 80029f2:	335d      	adds	r3, #93	; 0x5d
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	2b05      	cmp	r3, #5
 80029f8:	d10a      	bne.n	8002a10 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	440b      	add	r3, r1
 8002a08:	335c      	adds	r3, #92	; 0x5c
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
 8002a0e:	e09a      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	00db      	lsls	r3, r3, #3
 8002a1c:	440b      	add	r3, r1
 8002a1e:	335d      	adds	r3, #93	; 0x5d
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b06      	cmp	r3, #6
 8002a24:	d00a      	beq.n	8002a3c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a26:	6879      	ldr	r1, [r7, #4]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4413      	add	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	440b      	add	r3, r1
 8002a34:	335d      	adds	r3, #93	; 0x5d
 8002a36:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d156      	bne.n	8002aea <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	3358      	adds	r3, #88	; 0x58
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3358      	adds	r3, #88	; 0x58
 8002a60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	00db      	lsls	r3, r3, #3
 8002a6e:	440b      	add	r3, r1
 8002a70:	3358      	adds	r3, #88	; 0x58
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d914      	bls.n	8002aa2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	3358      	adds	r3, #88	; 0x58
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	335c      	adds	r3, #92	; 0x5c
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	701a      	strb	r2, [r3, #0]
 8002aa0:	e009      	b.n	8002ab6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aa2:	6879      	ldr	r1, [r7, #4]
 8002aa4:	68fa      	ldr	r2, [r7, #12]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	4413      	add	r3, r2
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	440b      	add	r3, r1
 8002ab0:	335c      	adds	r3, #92	; 0x5c
 8002ab2:	2202      	movs	r2, #2
 8002ab4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002acc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ad4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	e02d      	b.n	8002b46 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4613      	mov	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4413      	add	r3, r2
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	440b      	add	r3, r1
 8002af8:	335d      	adds	r3, #93	; 0x5d
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	d122      	bne.n	8002b46 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4613      	mov	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4413      	add	r3, r2
 8002b0a:	00db      	lsls	r3, r3, #3
 8002b0c:	440b      	add	r3, r1
 8002b0e:	335c      	adds	r3, #92	; 0x5c
 8002b10:	2202      	movs	r2, #2
 8002b12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	015a      	lsls	r2, r3, #5
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b52:	461a      	mov	r2, r3
 8002b54:	2302      	movs	r3, #2
 8002b56:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	b2d8      	uxtb	r0, r3
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	440b      	add	r3, r1
 8002b6a:	335c      	adds	r3, #92	; 0x5c
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	4601      	mov	r1, r0
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f005 fb2e 	bl	80081d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b78:	e0d1      	b.n	8002d1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b80      	cmp	r3, #128	; 0x80
 8002b8e:	d13e      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	015a      	lsls	r2, r3, #5
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	4413      	add	r3, r2
 8002b98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	0151      	lsls	r1, r2, #5
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	440a      	add	r2, r1
 8002ba6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002baa:	f043 0302 	orr.w	r3, r3, #2
 8002bae:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3358      	adds	r3, #88	; 0x58
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	1c59      	adds	r1, r3, #1
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	68fa      	ldr	r2, [r7, #12]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4403      	add	r3, r0
 8002bd2:	3358      	adds	r3, #88	; 0x58
 8002bd4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	440b      	add	r3, r1
 8002be4:	335d      	adds	r3, #93	; 0x5d
 8002be6:	2206      	movs	r2, #6
 8002be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f003 fa78 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	015a      	lsls	r2, r3, #5
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4413      	add	r3, r2
 8002c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c06:	461a      	mov	r2, r3
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	6093      	str	r3, [r2, #8]
}
 8002c0c:	e087      	b.n	8002d1e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d17c      	bne.n	8002d1e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4413      	add	r3, r2
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	440b      	add	r3, r1
 8002c32:	333f      	adds	r3, #63	; 0x3f
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d122      	bne.n	8002c80 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c3a:	6879      	ldr	r1, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	440b      	add	r3, r1
 8002c48:	3358      	adds	r3, #88	; 0x58
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	015a      	lsls	r2, r3, #5
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	4413      	add	r3, r2
 8002c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	0151      	lsls	r1, r2, #5
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	440a      	add	r2, r1
 8002c64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002c68:	f043 0302 	orr.w	r3, r3, #2
 8002c6c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	b2d2      	uxtb	r2, r2
 8002c76:	4611      	mov	r1, r2
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f003 fa36 	bl	80060ea <USB_HC_Halt>
 8002c7e:	e045      	b.n	8002d0c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	440b      	add	r3, r1
 8002c8e:	333f      	adds	r3, #63	; 0x3f
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	4413      	add	r3, r2
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	440b      	add	r3, r1
 8002ca4:	333f      	adds	r3, #63	; 0x3f
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d12f      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4413      	add	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	440b      	add	r3, r1
 8002cba:	3358      	adds	r3, #88	; 0x58
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d121      	bne.n	8002d0c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	4413      	add	r3, r2
 8002cd2:	00db      	lsls	r3, r3, #3
 8002cd4:	440b      	add	r3, r1
 8002cd6:	335d      	adds	r3, #93	; 0x5d
 8002cd8:	2203      	movs	r2, #3
 8002cda:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	68fa      	ldr	r2, [r7, #12]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68fa      	ldr	r2, [r7, #12]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f003 f9ef 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2310      	movs	r3, #16
 8002d1c:	6093      	str	r3, [r2, #8]
}
 8002d1e:	bf00      	nop
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
 8002d2e:	460b      	mov	r3, r1
 8002d30:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d3c:	78fb      	ldrb	r3, [r7, #3]
 8002d3e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d119      	bne.n	8002d8a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	015a      	lsls	r2, r3, #5
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4413      	add	r3, r2
 8002d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d62:	461a      	mov	r2, r3
 8002d64:	2304      	movs	r3, #4
 8002d66:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	68fa      	ldr	r2, [r7, #12]
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002d88:	e33e      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b20      	cmp	r3, #32
 8002d9e:	d141      	bne.n	8002e24 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2320      	movs	r3, #32
 8002db0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002db2:	6879      	ldr	r1, [r7, #4]
 8002db4:	68fa      	ldr	r2, [r7, #12]
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	440b      	add	r3, r1
 8002dc0:	333d      	adds	r3, #61	; 0x3d
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	f040 831f 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4413      	add	r3, r2
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	440b      	add	r3, r1
 8002dd8:	333d      	adds	r3, #61	; 0x3d
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	4613      	mov	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	00db      	lsls	r3, r3, #3
 8002dea:	440b      	add	r3, r1
 8002dec:	335c      	adds	r3, #92	; 0x5c
 8002dee:	2202      	movs	r2, #2
 8002df0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	0151      	lsls	r1, r2, #5
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	440a      	add	r2, r1
 8002e08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e0c:	f043 0302 	orr.w	r3, r3, #2
 8002e10:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68fa      	ldr	r2, [r7, #12]
 8002e18:	b2d2      	uxtb	r2, r2
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 f964 	bl	80060ea <USB_HC_Halt>
}
 8002e22:	e2f1      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d13f      	bne.n	8002eba <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	4413      	add	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	440b      	add	r3, r1
 8002e48:	335d      	adds	r3, #93	; 0x5d
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	4613      	mov	r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	4413      	add	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	440b      	add	r3, r1
 8002e5c:	333d      	adds	r3, #61	; 0x3d
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	440b      	add	r3, r1
 8002e70:	3358      	adds	r3, #88	; 0x58
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	015a      	lsls	r2, r3, #5
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	0151      	lsls	r1, r2, #5
 8002e88:	693a      	ldr	r2, [r7, #16]
 8002e8a:	440a      	add	r2, r1
 8002e8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e90:	f043 0302 	orr.w	r3, r3, #2
 8002e94:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f003 f922 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	015a      	lsls	r2, r3, #5
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	4413      	add	r3, r2
 8002eae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2340      	movs	r3, #64	; 0x40
 8002eb6:	6093      	str	r3, [r2, #8]
}
 8002eb8:	e2a6      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ecc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ed0:	d122      	bne.n	8002f18 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	015a      	lsls	r2, r3, #5
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	4413      	add	r3, r2
 8002eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	0151      	lsls	r1, r2, #5
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	440a      	add	r2, r1
 8002ee8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002eec:	f043 0302 	orr.w	r3, r3, #2
 8002ef0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 f8f4 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f14:	6093      	str	r3, [r2, #8]
}
 8002f16:	e277      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 0301 	and.w	r3, r3, #1
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d135      	bne.n	8002f9a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f2e:	6879      	ldr	r1, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4613      	mov	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4413      	add	r3, r2
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3358      	adds	r3, #88	; 0x58
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	0151      	lsls	r1, r2, #5
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	440a      	add	r2, r1
 8002f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f5c:	f043 0302 	orr.w	r3, r3, #2
 8002f60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	b2d2      	uxtb	r2, r2
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 f8bc 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	015a      	lsls	r2, r3, #5
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2301      	movs	r3, #1
 8002f82:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	335d      	adds	r3, #93	; 0x5d
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
}
 8002f98:	e236      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	015a      	lsls	r2, r3, #5
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
 8002fac:	2b08      	cmp	r3, #8
 8002fae:	d12b      	bne.n	8003008 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2308      	movs	r3, #8
 8002fc0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	68fa      	ldr	r2, [r7, #12]
 8002fd2:	0151      	lsls	r1, r2, #5
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	440a      	add	r2, r1
 8002fd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fdc:	f043 0302 	orr.w	r3, r3, #2
 8002fe0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	4611      	mov	r1, r2
 8002fec:	4618      	mov	r0, r3
 8002fee:	f003 f87c 	bl	80060ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	68fa      	ldr	r2, [r7, #12]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	440b      	add	r3, r1
 8003000:	335d      	adds	r3, #93	; 0x5d
 8003002:	2205      	movs	r2, #5
 8003004:	701a      	strb	r2, [r3, #0]
}
 8003006:	e1ff      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	015a      	lsls	r2, r3, #5
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	4413      	add	r3, r2
 8003010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	2b10      	cmp	r3, #16
 800301c:	d155      	bne.n	80030ca <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4613      	mov	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	00db      	lsls	r3, r3, #3
 800302a:	440b      	add	r3, r1
 800302c:	3358      	adds	r3, #88	; 0x58
 800302e:	2200      	movs	r2, #0
 8003030:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	4613      	mov	r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	440b      	add	r3, r1
 8003040:	335d      	adds	r3, #93	; 0x5d
 8003042:	2203      	movs	r2, #3
 8003044:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	440b      	add	r3, r1
 8003054:	333d      	adds	r3, #61	; 0x3d
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d114      	bne.n	8003086 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800305c:	6879      	ldr	r1, [r7, #4]
 800305e:	68fa      	ldr	r2, [r7, #12]
 8003060:	4613      	mov	r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	440b      	add	r3, r1
 800306a:	333c      	adds	r3, #60	; 0x3c
 800306c:	781b      	ldrb	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d109      	bne.n	8003086 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	440b      	add	r3, r1
 8003080:	333d      	adds	r3, #61	; 0x3d
 8003082:	2201      	movs	r2, #1
 8003084:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	4413      	add	r3, r2
 800308e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	440a      	add	r2, r1
 800309c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030a0:	f043 0302 	orr.w	r3, r3, #2
 80030a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f003 f81a 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	015a      	lsls	r2, r3, #5
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4413      	add	r3, r2
 80030be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c2:	461a      	mov	r2, r3
 80030c4:	2310      	movs	r3, #16
 80030c6:	6093      	str	r3, [r2, #8]
}
 80030c8:	e19e      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d12b      	bne.n	8003138 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	015a      	lsls	r2, r3, #5
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4413      	add	r3, r2
 80030e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	0151      	lsls	r1, r2, #5
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	440a      	add	r2, r1
 80030f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030fa:	f043 0302 	orr.w	r3, r3, #2
 80030fe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f002 ffed 	bl	80060ea <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	00db      	lsls	r3, r3, #3
 800311c:	440b      	add	r3, r1
 800311e:	335d      	adds	r3, #93	; 0x5d
 8003120:	2206      	movs	r2, #6
 8003122:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003130:	461a      	mov	r2, r3
 8003132:	2380      	movs	r3, #128	; 0x80
 8003134:	6093      	str	r3, [r2, #8]
}
 8003136:	e167      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	015a      	lsls	r2, r3, #5
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4413      	add	r3, r2
 8003140:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314e:	d135      	bne.n	80031bc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	015a      	lsls	r2, r3, #5
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	4413      	add	r3, r2
 8003158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	0151      	lsls	r1, r2, #5
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	440a      	add	r2, r1
 8003166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800316a:	f043 0302 	orr.w	r3, r3, #2
 800316e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f002 ffb5 	bl	80060ea <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2310      	movs	r3, #16
 8003190:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4413      	add	r3, r2
 800319a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319e:	461a      	mov	r2, r3
 80031a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	440b      	add	r3, r1
 80031b4:	335d      	adds	r3, #93	; 0x5d
 80031b6:	2208      	movs	r2, #8
 80031b8:	701a      	strb	r2, [r3, #0]
}
 80031ba:	e125      	b.n	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	f040 811a 	bne.w	8003408 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ee:	f023 0302 	bic.w	r3, r3, #2
 80031f2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4613      	mov	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4413      	add	r3, r2
 80031fe:	00db      	lsls	r3, r3, #3
 8003200:	440b      	add	r3, r1
 8003202:	335d      	adds	r3, #93	; 0x5d
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d137      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800320a:	6879      	ldr	r1, [r7, #4]
 800320c:	68fa      	ldr	r2, [r7, #12]
 800320e:	4613      	mov	r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	440b      	add	r3, r1
 8003218:	335c      	adds	r3, #92	; 0x5c
 800321a:	2201      	movs	r2, #1
 800321c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	440b      	add	r3, r1
 800322c:	333f      	adds	r3, #63	; 0x3f
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b02      	cmp	r3, #2
 8003232:	d00b      	beq.n	800324c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	440b      	add	r3, r1
 8003242:	333f      	adds	r3, #63	; 0x3f
 8003244:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	f040 80c5 	bne.w	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	440b      	add	r3, r1
 800325a:	3351      	adds	r3, #81	; 0x51
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	f083 0301 	eor.w	r3, r3, #1
 8003262:	b2d8      	uxtb	r0, r3
 8003264:	6879      	ldr	r1, [r7, #4]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	00db      	lsls	r3, r3, #3
 8003270:	440b      	add	r3, r1
 8003272:	3351      	adds	r3, #81	; 0x51
 8003274:	4602      	mov	r2, r0
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	e0ad      	b.n	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	68fa      	ldr	r2, [r7, #12]
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	440b      	add	r3, r1
 8003288:	335d      	adds	r3, #93	; 0x5d
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b03      	cmp	r3, #3
 800328e:	d10a      	bne.n	80032a6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	440b      	add	r3, r1
 800329e:	335c      	adds	r3, #92	; 0x5c
 80032a0:	2202      	movs	r2, #2
 80032a2:	701a      	strb	r2, [r3, #0]
 80032a4:	e097      	b.n	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	335d      	adds	r3, #93	; 0x5d
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d10a      	bne.n	80032d2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80032bc:	6879      	ldr	r1, [r7, #4]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	440b      	add	r3, r1
 80032ca:	335c      	adds	r3, #92	; 0x5c
 80032cc:	2202      	movs	r2, #2
 80032ce:	701a      	strb	r2, [r3, #0]
 80032d0:	e081      	b.n	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80032d2:	6879      	ldr	r1, [r7, #4]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	335d      	adds	r3, #93	; 0x5d
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d10a      	bne.n	80032fe <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4613      	mov	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	440b      	add	r3, r1
 80032f6:	335c      	adds	r3, #92	; 0x5c
 80032f8:	2205      	movs	r2, #5
 80032fa:	701a      	strb	r2, [r3, #0]
 80032fc:	e06b      	b.n	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	335d      	adds	r3, #93	; 0x5d
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b06      	cmp	r3, #6
 8003312:	d00a      	beq.n	800332a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	440b      	add	r3, r1
 8003322:	335d      	adds	r3, #93	; 0x5d
 8003324:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003326:	2b08      	cmp	r3, #8
 8003328:	d155      	bne.n	80033d6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	440b      	add	r3, r1
 8003338:	3358      	adds	r3, #88	; 0x58
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4403      	add	r3, r0
 800334c:	3358      	adds	r3, #88	; 0x58
 800334e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	440b      	add	r3, r1
 800335e:	3358      	adds	r3, #88	; 0x58
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b03      	cmp	r3, #3
 8003364:	d914      	bls.n	8003390 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	440b      	add	r3, r1
 8003374:	3358      	adds	r3, #88	; 0x58
 8003376:	2200      	movs	r2, #0
 8003378:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	335c      	adds	r3, #92	; 0x5c
 800338a:	2204      	movs	r2, #4
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e009      	b.n	80033a4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003390:	6879      	ldr	r1, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4613      	mov	r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	4413      	add	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	440b      	add	r3, r1
 800339e:	335c      	adds	r3, #92	; 0x5c
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80033ba:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80033c2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	015a      	lsls	r2, r3, #5
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	4413      	add	r3, r2
 80033cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033d0:	461a      	mov	r2, r3
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	015a      	lsls	r2, r3, #5
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4413      	add	r3, r2
 80033de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e2:	461a      	mov	r2, r3
 80033e4:	2302      	movs	r3, #2
 80033e6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	b2d8      	uxtb	r0, r3
 80033ec:	6879      	ldr	r1, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4613      	mov	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	440b      	add	r3, r1
 80033fa:	335c      	adds	r3, #92	; 0x5c
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	4601      	mov	r1, r0
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f004 fee6 	bl	80081d4 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003408:	bf00      	nop
 800340a:	3718      	adds	r7, #24
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b08a      	sub	sp, #40	; 0x28
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	0c5b      	lsrs	r3, r3, #17
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003444:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d003      	beq.n	8003454 <HCD_RXQLVL_IRQHandler+0x44>
 800344c:	2b05      	cmp	r3, #5
 800344e:	f000 8082 	beq.w	8003556 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003452:	e083      	b.n	800355c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d07f      	beq.n	800355a <HCD_RXQLVL_IRQHandler+0x14a>
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	00db      	lsls	r3, r3, #3
 8003466:	440b      	add	r3, r1
 8003468:	3344      	adds	r3, #68	; 0x44
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d074      	beq.n	800355a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	6879      	ldr	r1, [r7, #4]
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	440b      	add	r3, r1
 8003482:	3344      	adds	r3, #68	; 0x44
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	b292      	uxth	r2, r2
 800348a:	4619      	mov	r1, r3
 800348c:	f002 f9cd 	bl	800582a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	440b      	add	r3, r1
 800349e:	3344      	adds	r3, #68	; 0x44
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	18d1      	adds	r1, r2, r3
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4613      	mov	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	4413      	add	r3, r2
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4403      	add	r3, r0
 80034b4:	3344      	adds	r3, #68	; 0x44
 80034b6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	440b      	add	r3, r1
 80034c6:	334c      	adds	r3, #76	; 0x4c
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	18d1      	adds	r1, r2, r3
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4613      	mov	r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	4413      	add	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4403      	add	r3, r0
 80034dc:	334c      	adds	r3, #76	; 0x4c
 80034de:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	4b1d      	ldr	r3, [pc, #116]	; (8003564 <HCD_RXQLVL_IRQHandler+0x154>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d031      	beq.n	800355a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800350c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003514:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	015a      	lsls	r2, r3, #5
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	4413      	add	r3, r2
 800351e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003522:	461a      	mov	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4613      	mov	r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	4413      	add	r3, r2
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	440b      	add	r3, r1
 8003536:	3350      	adds	r3, #80	; 0x50
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	f083 0301 	eor.w	r3, r3, #1
 800353e:	b2d8      	uxtb	r0, r3
 8003540:	6879      	ldr	r1, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	440b      	add	r3, r1
 800354e:	3350      	adds	r3, #80	; 0x50
 8003550:	4602      	mov	r2, r0
 8003552:	701a      	strb	r2, [r3, #0]
      break;
 8003554:	e001      	b.n	800355a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800355a:	bf00      	nop
  }
}
 800355c:	bf00      	nop
 800355e:	3728      	adds	r7, #40	; 0x28
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	1ff80000 	.word	0x1ff80000

08003568 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003594:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b02      	cmp	r3, #2
 800359e:	d113      	bne.n	80035c8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10a      	bne.n	80035c0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699a      	ldr	r2, [r3, #24]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80035b8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035ba:	6878      	ldr	r0, [r7, #4]
 80035bc:	f004 fdee 	bl	800819c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	f043 0302 	orr.w	r3, r3, #2
 80035c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d147      	bne.n	8003662 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f043 0308 	orr.w	r3, r3, #8
 80035d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d129      	bne.n	8003638 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	699b      	ldr	r3, [r3, #24]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d113      	bne.n	8003614 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035f6:	d106      	bne.n	8003606 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2102      	movs	r1, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fa4e 	bl	8005aa0 <USB_InitFSLSPClkSel>
 8003604:	e011      	b.n	800362a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f002 fa47 	bl	8005aa0 <USB_InitFSLSPClkSel>
 8003612:	e00a      	b.n	800362a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003622:	461a      	mov	r2, r3
 8003624:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003628:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f004 fde0 	bl	80081f0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f004 fdb3 	bl	800819c <HAL_HCD_Connect_Callback>
 8003636:	e014      	b.n	8003662 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f004 fde7 	bl	800820c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800364c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003650:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699a      	ldr	r2, [r3, #24]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003660:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b20      	cmp	r3, #32
 800366a:	d103      	bne.n	8003674 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	f043 0320 	orr.w	r3, r3, #32
 8003672:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800367a:	461a      	mov	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	6013      	str	r3, [r2, #0]
}
 8003680:	bf00      	nop
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e11f      	b.n	80038da <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d106      	bne.n	80036b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd fe2e 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2224      	movs	r2, #36	; 0x24
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036ec:	f001 f9de 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 80036f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	4a7b      	ldr	r2, [pc, #492]	; (80038e4 <HAL_I2C_Init+0x25c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d807      	bhi.n	800370c <HAL_I2C_Init+0x84>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4a7a      	ldr	r2, [pc, #488]	; (80038e8 <HAL_I2C_Init+0x260>)
 8003700:	4293      	cmp	r3, r2
 8003702:	bf94      	ite	ls
 8003704:	2301      	movls	r3, #1
 8003706:	2300      	movhi	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	e006      	b.n	800371a <HAL_I2C_Init+0x92>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4a77      	ldr	r2, [pc, #476]	; (80038ec <HAL_I2C_Init+0x264>)
 8003710:	4293      	cmp	r3, r2
 8003712:	bf94      	ite	ls
 8003714:	2301      	movls	r3, #1
 8003716:	2300      	movhi	r3, #0
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e0db      	b.n	80038da <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	4a72      	ldr	r2, [pc, #456]	; (80038f0 <HAL_I2C_Init+0x268>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0c9b      	lsrs	r3, r3, #18
 800372c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	430a      	orrs	r2, r1
 8003740:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	6a1b      	ldr	r3, [r3, #32]
 8003748:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	4a64      	ldr	r2, [pc, #400]	; (80038e4 <HAL_I2C_Init+0x25c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d802      	bhi.n	800375c <HAL_I2C_Init+0xd4>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	3301      	adds	r3, #1
 800375a:	e009      	b.n	8003770 <HAL_I2C_Init+0xe8>
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003762:	fb02 f303 	mul.w	r3, r2, r3
 8003766:	4a63      	ldr	r2, [pc, #396]	; (80038f4 <HAL_I2C_Init+0x26c>)
 8003768:	fba2 2303 	umull	r2, r3, r2, r3
 800376c:	099b      	lsrs	r3, r3, #6
 800376e:	3301      	adds	r3, #1
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	430b      	orrs	r3, r1
 8003776:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003782:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4956      	ldr	r1, [pc, #344]	; (80038e4 <HAL_I2C_Init+0x25c>)
 800378c:	428b      	cmp	r3, r1
 800378e:	d80d      	bhi.n	80037ac <HAL_I2C_Init+0x124>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	1e59      	subs	r1, r3, #1
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	fbb1 f3f3 	udiv	r3, r1, r3
 800379e:	3301      	adds	r3, #1
 80037a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a4:	2b04      	cmp	r3, #4
 80037a6:	bf38      	it	cc
 80037a8:	2304      	movcc	r3, #4
 80037aa:	e04f      	b.n	800384c <HAL_I2C_Init+0x1c4>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HAL_I2C_Init+0x150>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	1e58      	subs	r0, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6859      	ldr	r1, [r3, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	440b      	add	r3, r1
 80037c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037c6:	3301      	adds	r3, #1
 80037c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf0c      	ite	eq
 80037d0:	2301      	moveq	r3, #1
 80037d2:	2300      	movne	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e012      	b.n	80037fe <HAL_I2C_Init+0x176>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	1e58      	subs	r0, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	0099      	lsls	r1, r3, #2
 80037e8:	440b      	add	r3, r1
 80037ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	bf0c      	ite	eq
 80037f8:	2301      	moveq	r3, #1
 80037fa:	2300      	movne	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x17e>
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_I2C_Init+0x1c4>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_I2C_Init+0x1a4>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	1e58      	subs	r0, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6859      	ldr	r1, [r3, #4]
 8003816:	460b      	mov	r3, r1
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	440b      	add	r3, r1
 800381c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003820:	3301      	adds	r3, #1
 8003822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003826:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800382a:	e00f      	b.n	800384c <HAL_I2C_Init+0x1c4>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	0099      	lsls	r1, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003842:	3301      	adds	r3, #1
 8003844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003848:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	6809      	ldr	r1, [r1, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69da      	ldr	r2, [r3, #28]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800387a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6911      	ldr	r1, [r2, #16]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	68d2      	ldr	r2, [r2, #12]
 8003886:	4311      	orrs	r1, r2
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	6812      	ldr	r2, [r2, #0]
 800388c:	430b      	orrs	r3, r1
 800388e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	430a      	orrs	r2, r1
 80038aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2220      	movs	r2, #32
 80038c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	000186a0 	.word	0x000186a0
 80038e8:	001e847f 	.word	0x001e847f
 80038ec:	003d08ff 	.word	0x003d08ff
 80038f0:	431bde83 	.word	0x431bde83
 80038f4:	10624dd3 	.word	0x10624dd3

080038f8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e128      	b.n	8003b5c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a90      	ldr	r2, [pc, #576]	; (8003b64 <HAL_I2S_Init+0x26c>)
 8003922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f7fd fd3b 	bl	80013a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2202      	movs	r2, #2
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69db      	ldr	r3, [r3, #28]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003940:	f023 030f 	bic.w	r3, r3, #15
 8003944:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2202      	movs	r2, #2
 800394c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	2b02      	cmp	r3, #2
 8003954:	d060      	beq.n	8003a18 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800395e:	2310      	movs	r3, #16
 8003960:	617b      	str	r3, [r7, #20]
 8003962:	e001      	b.n	8003968 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003964:	2320      	movs	r3, #32
 8003966:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b20      	cmp	r3, #32
 800396e:	d802      	bhi.n	8003976 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003976:	2001      	movs	r0, #1
 8003978:	f001 f9a2 	bl	8004cc0 <HAL_RCCEx_GetPeriphCLKFreq>
 800397c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003986:	d125      	bne.n	80039d4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d010      	beq.n	80039b2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	fbb2 f2f3 	udiv	r2, r2, r3
 800399a:	4613      	mov	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	4413      	add	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	461a      	mov	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ac:	3305      	adds	r3, #5
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	e01f      	b.n	80039f2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	461a      	mov	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	3305      	adds	r3, #5
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	e00e      	b.n	80039f2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	005b      	lsls	r3, r3, #1
 80039e4:	461a      	mov	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ee:	3305      	adds	r3, #5
 80039f0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4a5c      	ldr	r2, [pc, #368]	; (8003b68 <HAL_I2S_Init+0x270>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e003      	b.n	8003a20 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d902      	bls.n	8003a2c <HAL_I2S_Init+0x134>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	2bff      	cmp	r3, #255	; 0xff
 8003a2a:	d907      	bls.n	8003a3c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a30:	f043 0210 	orr.w	r2, r3, #16
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e08f      	b.n	8003b5c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	691a      	ldr	r2, [r3, #16]
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	ea42 0103 	orr.w	r1, r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	69fa      	ldr	r2, [r7, #28]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a5a:	f023 030f 	bic.w	r3, r3, #15
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6851      	ldr	r1, [r2, #4]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6892      	ldr	r2, [r2, #8]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68d2      	ldr	r2, [r2, #12]
 8003a6c:	4311      	orrs	r1, r2
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6992      	ldr	r2, [r2, #24]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d161      	bne.n	8003b4c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a38      	ldr	r2, [pc, #224]	; (8003b6c <HAL_I2S_Init+0x274>)
 8003a8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <HAL_I2S_Init+0x278>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d101      	bne.n	8003a9c <HAL_I2S_Init+0x1a4>
 8003a98:	4b36      	ldr	r3, [pc, #216]	; (8003b74 <HAL_I2S_Init+0x27c>)
 8003a9a:	e001      	b.n	8003aa0 <HAL_I2S_Init+0x1a8>
 8003a9c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	4932      	ldr	r1, [pc, #200]	; (8003b70 <HAL_I2S_Init+0x278>)
 8003aa8:	428a      	cmp	r2, r1
 8003aaa:	d101      	bne.n	8003ab0 <HAL_I2S_Init+0x1b8>
 8003aac:	4a31      	ldr	r2, [pc, #196]	; (8003b74 <HAL_I2S_Init+0x27c>)
 8003aae:	e001      	b.n	8003ab4 <HAL_I2S_Init+0x1bc>
 8003ab0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003ab4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ab8:	f023 030f 	bic.w	r3, r3, #15
 8003abc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <HAL_I2S_Init+0x278>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d101      	bne.n	8003acc <HAL_I2S_Init+0x1d4>
 8003ac8:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <HAL_I2S_Init+0x27c>)
 8003aca:	e001      	b.n	8003ad0 <HAL_I2S_Init+0x1d8>
 8003acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a25      	ldr	r2, [pc, #148]	; (8003b70 <HAL_I2S_Init+0x278>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d101      	bne.n	8003ae2 <HAL_I2S_Init+0x1ea>
 8003ade:	4b25      	ldr	r3, [pc, #148]	; (8003b74 <HAL_I2S_Init+0x27c>)
 8003ae0:	e001      	b.n	8003ae6 <HAL_I2S_Init+0x1ee>
 8003ae2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af2:	d003      	beq.n	8003afc <HAL_I2S_Init+0x204>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	e001      	b.n	8003b08 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	b299      	uxth	r1, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b1e:	4303      	orrs	r3, r0
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	430b      	orrs	r3, r1
 8003b24:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b26:	4313      	orrs	r3, r2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b34:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	; (8003b70 <HAL_I2S_Init+0x278>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d101      	bne.n	8003b44 <HAL_I2S_Init+0x24c>
 8003b40:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <HAL_I2S_Init+0x27c>)
 8003b42:	e001      	b.n	8003b48 <HAL_I2S_Init+0x250>
 8003b44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b48:	897a      	ldrh	r2, [r7, #10]
 8003b4a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3720      	adds	r7, #32
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	08003c6f 	.word	0x08003c6f
 8003b68:	cccccccd 	.word	0xcccccccd
 8003b6c:	08003d85 	.word	0x08003d85
 8003b70:	40003800 	.word	0x40003800
 8003b74:	40003400 	.word	0x40003400

08003b78 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	1c9a      	adds	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bf8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ffb8 	bl	8003b78 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c08:	bf00      	nop
 8003c0a:	3708      	adds	r7, #8
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c22:	b292      	uxth	r2, r2
 8003c24:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	1c9a      	adds	r2, r3, #2
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10e      	bne.n	8003c66 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c56:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff93 	bl	8003b8c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d13a      	bne.n	8003d00 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d109      	bne.n	8003ca8 <I2S_IRQHandler+0x3a>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	d102      	bne.n	8003ca8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7ff ffb4 	bl	8003c10 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b40      	cmp	r3, #64	; 0x40
 8003cb0:	d126      	bne.n	8003d00 <I2S_IRQHandler+0x92>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 0320 	and.w	r3, r3, #32
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d11f      	bne.n	8003d00 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cce:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cf2:	f043 0202 	orr.w	r2, r3, #2
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7ff ff50 	bl	8003ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b03      	cmp	r3, #3
 8003d0a:	d136      	bne.n	8003d7a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d109      	bne.n	8003d2a <I2S_IRQHandler+0xbc>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d20:	2b80      	cmp	r3, #128	; 0x80
 8003d22:	d102      	bne.n	8003d2a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff ff45 	bl	8003bb4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f003 0308 	and.w	r3, r3, #8
 8003d30:	2b08      	cmp	r3, #8
 8003d32:	d122      	bne.n	8003d7a <I2S_IRQHandler+0x10c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	2b20      	cmp	r3, #32
 8003d40:	d11b      	bne.n	8003d7a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685a      	ldr	r2, [r3, #4]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d50:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d52:	2300      	movs	r3, #0
 8003d54:	60fb      	str	r3, [r7, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6c:	f043 0204 	orr.w	r2, r3, #4
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff13 	bl	8003ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
	...

08003d84 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4aa2      	ldr	r2, [pc, #648]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d101      	bne.n	8003da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d9e:	4ba2      	ldr	r3, [pc, #648]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003da0:	e001      	b.n	8003da6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003da2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a9b      	ldr	r2, [pc, #620]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dbc:	4b9a      	ldr	r3, [pc, #616]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003dbe:	e001      	b.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dd0:	d004      	beq.n	8003ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	f040 8099 	bne.w	8003f0e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d107      	bne.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f925 	bl	8004040 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f000 f9c8 	bl	80041a0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b40      	cmp	r3, #64	; 0x40
 8003e18:	d13a      	bne.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0320 	and.w	r3, r3, #32
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d035      	beq.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a7e      	ldr	r2, [pc, #504]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e2e:	4b7e      	ldr	r3, [pc, #504]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e30:	e001      	b.n	8003e36 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4979      	ldr	r1, [pc, #484]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e3e:	428b      	cmp	r3, r1
 8003e40:	d101      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e42:	4b79      	ldr	r3, [pc, #484]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e44:	e001      	b.n	8003e4a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e4a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e4e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e5e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e60:	2300      	movs	r3, #0
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e82:	f043 0202 	orr.w	r2, r3, #2
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff fe88 	bl	8003ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b08      	cmp	r3, #8
 8003e98:	f040 80be 	bne.w	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80b8 	beq.w	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	685a      	ldr	r2, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eb6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a59      	ldr	r2, [pc, #356]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ec2:	4b59      	ldr	r3, [pc, #356]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ec4:	e001      	b.n	8003eca <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ec6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4954      	ldr	r1, [pc, #336]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ed2:	428b      	cmp	r3, r1
 8003ed4:	d101      	bne.n	8003eda <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ed6:	4b54      	ldr	r3, [pc, #336]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ed8:	e001      	b.n	8003ede <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003eda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ede:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ee2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	60bb      	str	r3, [r7, #8]
 8003ef0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	f043 0204 	orr.w	r2, r3, #4
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7ff fe4a 	bl	8003ba0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f0c:	e084      	b.n	8004018 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d107      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f8be 	bl	80040a4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d107      	bne.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 f8fd 	bl	800413c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d12f      	bne.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f003 0320 	and.w	r3, r3, #32
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d02a      	beq.n	8003fac <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f64:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a2e      	ldr	r2, [pc, #184]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f70:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f72:	e001      	b.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4929      	ldr	r1, [pc, #164]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f80:	428b      	cmp	r3, r1
 8003f82:	d101      	bne.n	8003f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f84:	4b28      	ldr	r3, [pc, #160]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f86:	e001      	b.n	8003f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	f043 0202 	orr.w	r2, r3, #2
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fdfa 	bl	8003ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d131      	bne.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f003 0320 	and.w	r3, r3, #32
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d02c      	beq.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d101      	bne.n	8003fce <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fcc:	e001      	b.n	8003fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fd2:	685a      	ldr	r2, [r3, #4]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4912      	ldr	r1, [pc, #72]	; (8004024 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fda:	428b      	cmp	r3, r1
 8003fdc:	d101      	bne.n	8003fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003fde:	4b12      	ldr	r3, [pc, #72]	; (8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fe0:	e001      	b.n	8003fe6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003fe2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fe6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fea:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ffa:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f7ff fdc5 	bl	8003ba0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004016:	e000      	b.n	800401a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004018:	bf00      	nop
}
 800401a:	bf00      	nop
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40003800 	.word	0x40003800
 8004028:	40003400 	.word	0x40003400

0800402c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b082      	sub	sp, #8
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	1c99      	adds	r1, r3, #2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6251      	str	r1, [r2, #36]	; 0x24
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d113      	bne.n	800409a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004080:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d106      	bne.n	800409a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff ffc9 	bl	800402c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	1c99      	adds	r1, r3, #2
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	6251      	str	r1, [r2, #36]	; 0x24
 80040b6:	8819      	ldrh	r1, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <I2SEx_TxISR_I2SExt+0x90>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <I2SEx_TxISR_I2SExt+0x22>
 80040c2:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <I2SEx_TxISR_I2SExt+0x94>)
 80040c4:	e001      	b.n	80040ca <I2SEx_TxISR_I2SExt+0x26>
 80040c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ca:	460a      	mov	r2, r1
 80040cc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d121      	bne.n	800412a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a12      	ldr	r2, [pc, #72]	; (8004134 <I2SEx_TxISR_I2SExt+0x90>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d101      	bne.n	80040f4 <I2SEx_TxISR_I2SExt+0x50>
 80040f0:	4b11      	ldr	r3, [pc, #68]	; (8004138 <I2SEx_TxISR_I2SExt+0x94>)
 80040f2:	e001      	b.n	80040f8 <I2SEx_TxISR_I2SExt+0x54>
 80040f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	490d      	ldr	r1, [pc, #52]	; (8004134 <I2SEx_TxISR_I2SExt+0x90>)
 8004100:	428b      	cmp	r3, r1
 8004102:	d101      	bne.n	8004108 <I2SEx_TxISR_I2SExt+0x64>
 8004104:	4b0c      	ldr	r3, [pc, #48]	; (8004138 <I2SEx_TxISR_I2SExt+0x94>)
 8004106:	e001      	b.n	800410c <I2SEx_TxISR_I2SExt+0x68>
 8004108:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800410c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004110:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b00      	cmp	r3, #0
 800411a:	d106      	bne.n	800412a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f7ff ff81 	bl	800402c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800412a:	bf00      	nop
 800412c:	3708      	adds	r7, #8
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	40003800 	.word	0x40003800
 8004138:	40003400 	.word	0x40003400

0800413c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68d8      	ldr	r0, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	1c99      	adds	r1, r3, #2
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004154:	b282      	uxth	r2, r0
 8004156:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800415c:	b29b      	uxth	r3, r3
 800415e:	3b01      	subs	r3, #1
 8004160:	b29a      	uxth	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800416a:	b29b      	uxth	r3, r3
 800416c:	2b00      	cmp	r3, #0
 800416e:	d113      	bne.n	8004198 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800417e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d106      	bne.n	8004198 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f7ff ff4a 	bl	800402c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004198:	bf00      	nop
 800419a:	3708      	adds	r7, #8
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a20      	ldr	r2, [pc, #128]	; (8004230 <I2SEx_RxISR_I2SExt+0x90>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d101      	bne.n	80041b6 <I2SEx_RxISR_I2SExt+0x16>
 80041b2:	4b20      	ldr	r3, [pc, #128]	; (8004234 <I2SEx_RxISR_I2SExt+0x94>)
 80041b4:	e001      	b.n	80041ba <I2SEx_RxISR_I2SExt+0x1a>
 80041b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041ba:	68d8      	ldr	r0, [r3, #12]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	1c99      	adds	r1, r3, #2
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041c6:	b282      	uxth	r2, r0
 80041c8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	3b01      	subs	r3, #1
 80041d2:	b29a      	uxth	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d121      	bne.n	8004226 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a12      	ldr	r2, [pc, #72]	; (8004230 <I2SEx_RxISR_I2SExt+0x90>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d101      	bne.n	80041f0 <I2SEx_RxISR_I2SExt+0x50>
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <I2SEx_RxISR_I2SExt+0x94>)
 80041ee:	e001      	b.n	80041f4 <I2SEx_RxISR_I2SExt+0x54>
 80041f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041f4:	685a      	ldr	r2, [r3, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	490d      	ldr	r1, [pc, #52]	; (8004230 <I2SEx_RxISR_I2SExt+0x90>)
 80041fc:	428b      	cmp	r3, r1
 80041fe:	d101      	bne.n	8004204 <I2SEx_RxISR_I2SExt+0x64>
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <I2SEx_RxISR_I2SExt+0x94>)
 8004202:	e001      	b.n	8004208 <I2SEx_RxISR_I2SExt+0x68>
 8004204:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004208:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800420c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d106      	bne.n	8004226 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f7ff ff03 	bl	800402c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004226:	bf00      	nop
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	40003800 	.word	0x40003800
 8004234:	40003400 	.word	0x40003400

08004238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b086      	sub	sp, #24
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e25b      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d075      	beq.n	8004342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004256:	4ba3      	ldr	r3, [pc, #652]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 030c 	and.w	r3, r3, #12
 800425e:	2b04      	cmp	r3, #4
 8004260:	d00c      	beq.n	800427c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004262:	4ba0      	ldr	r3, [pc, #640]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800426a:	2b08      	cmp	r3, #8
 800426c:	d112      	bne.n	8004294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426e:	4b9d      	ldr	r3, [pc, #628]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800427a:	d10b      	bne.n	8004294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800427c:	4b99      	ldr	r3, [pc, #612]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d05b      	beq.n	8004340 <HAL_RCC_OscConfig+0x108>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d157      	bne.n	8004340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e236      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800429c:	d106      	bne.n	80042ac <HAL_RCC_OscConfig+0x74>
 800429e:	4b91      	ldr	r3, [pc, #580]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a90      	ldr	r2, [pc, #576]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0x98>
 80042b6:	4b8b      	ldr	r3, [pc, #556]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a8a      	ldr	r2, [pc, #552]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b88      	ldr	r3, [pc, #544]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xb0>
 80042d0:	4b84      	ldr	r3, [pc, #528]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a83      	ldr	r2, [pc, #524]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a80      	ldr	r2, [pc, #512]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7fd fa58 	bl	80017a4 <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f8:	f7fd fa54 	bl	80017a4 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	; 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e1fb      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b76      	ldr	r3, [pc, #472]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xc0>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7fd fa44 	bl	80017a4 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004320:	f7fd fa40 	bl	80017a4 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	; 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1e7      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b6c      	ldr	r3, [pc, #432]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0xe8>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800434e:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435a:	4b62      	ldr	r3, [pc, #392]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b5f      	ldr	r3, [pc, #380]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b5c      	ldr	r3, [pc, #368]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x152>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1bb      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4952      	ldr	r1, [pc, #328]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b4f      	ldr	r3, [pc, #316]	; (80044e8 <HAL_RCC_OscConfig+0x2b0>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ae:	f7fd f9f9 	bl	80017a4 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fd f9f5 	bl	80017a4 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e19c      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b46      	ldr	r3, [pc, #280]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b43      	ldr	r3, [pc, #268]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4940      	ldr	r1, [pc, #256]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <HAL_RCC_OscConfig+0x2b0>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd f9d8 	bl	80017a4 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fd f9d4 	bl	80017a4 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e17b      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d030      	beq.n	8004484 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d016      	beq.n	8004458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_RCC_OscConfig+0x2b4>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004430:	f7fd f9b8 	bl	80017a4 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004438:	f7fd f9b4 	bl	80017a4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e15b      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b26      	ldr	r3, [pc, #152]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x200>
 8004456:	e015      	b.n	8004484 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004458:	4b24      	ldr	r3, [pc, #144]	; (80044ec <HAL_RCC_OscConfig+0x2b4>)
 800445a:	2200      	movs	r2, #0
 800445c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800445e:	f7fd f9a1 	bl	80017a4 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004466:	f7fd f99d 	bl	80017a4 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e144      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 800447a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800447c:	f003 0302 	and.w	r3, r3, #2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a0 	beq.w	80045d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004492:	2300      	movs	r3, #0
 8004494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004496:	4b13      	ldr	r3, [pc, #76]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10f      	bne.n	80044c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	4b0f      	ldr	r3, [pc, #60]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	4a0e      	ldr	r2, [pc, #56]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b0:	6413      	str	r3, [r2, #64]	; 0x40
 80044b2:	4b0c      	ldr	r3, [pc, #48]	; (80044e4 <HAL_RCC_OscConfig+0x2ac>)
 80044b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044be:	2301      	movs	r3, #1
 80044c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_OscConfig+0x2b8>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d121      	bne.n	8004512 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <HAL_RCC_OscConfig+0x2b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a07      	ldr	r2, [pc, #28]	; (80044f0 <HAL_RCC_OscConfig+0x2b8>)
 80044d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044da:	f7fd f963 	bl	80017a4 <HAL_GetTick>
 80044de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e0:	e011      	b.n	8004506 <HAL_RCC_OscConfig+0x2ce>
 80044e2:	bf00      	nop
 80044e4:	40023800 	.word	0x40023800
 80044e8:	42470000 	.word	0x42470000
 80044ec:	42470e80 	.word	0x42470e80
 80044f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f4:	f7fd f956 	bl	80017a4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0fd      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004506:	4b81      	ldr	r3, [pc, #516]	; (800470c <HAL_RCC_OscConfig+0x4d4>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800450e:	2b00      	cmp	r3, #0
 8004510:	d0f0      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x2f0>
 800451a:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 800451c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800451e:	4a7c      	ldr	r2, [pc, #496]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6713      	str	r3, [r2, #112]	; 0x70
 8004526:	e01c      	b.n	8004562 <HAL_RCC_OscConfig+0x32a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b05      	cmp	r3, #5
 800452e:	d10c      	bne.n	800454a <HAL_RCC_OscConfig+0x312>
 8004530:	4b77      	ldr	r3, [pc, #476]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	4a76      	ldr	r2, [pc, #472]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004536:	f043 0304 	orr.w	r3, r3, #4
 800453a:	6713      	str	r3, [r2, #112]	; 0x70
 800453c:	4b74      	ldr	r3, [pc, #464]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 800453e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004540:	4a73      	ldr	r2, [pc, #460]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004542:	f043 0301 	orr.w	r3, r3, #1
 8004546:	6713      	str	r3, [r2, #112]	; 0x70
 8004548:	e00b      	b.n	8004562 <HAL_RCC_OscConfig+0x32a>
 800454a:	4b71      	ldr	r3, [pc, #452]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	4a70      	ldr	r2, [pc, #448]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6713      	str	r3, [r2, #112]	; 0x70
 8004556:	4b6e      	ldr	r3, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	4a6d      	ldr	r2, [pc, #436]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 800455c:	f023 0304 	bic.w	r3, r3, #4
 8004560:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d015      	beq.n	8004596 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456a:	f7fd f91b 	bl	80017a4 <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004570:	e00a      	b.n	8004588 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004572:	f7fd f917 	bl	80017a4 <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004580:	4293      	cmp	r3, r2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0bc      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004588:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 800458a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458c:	f003 0302 	and.w	r3, r3, #2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d0ee      	beq.n	8004572 <HAL_RCC_OscConfig+0x33a>
 8004594:	e014      	b.n	80045c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004596:	f7fd f905 	bl	80017a4 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800459c:	e00a      	b.n	80045b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800459e:	f7fd f901 	bl	80017a4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e0a6      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045b4:	4b56      	ldr	r3, [pc, #344]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 80045b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ee      	bne.n	800459e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045c0:	7dfb      	ldrb	r3, [r7, #23]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d105      	bne.n	80045d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c6:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	4a51      	ldr	r2, [pc, #324]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 80045cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 8092 	beq.w	8004700 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045dc:	4b4c      	ldr	r3, [pc, #304]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f003 030c 	and.w	r3, r3, #12
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d05c      	beq.n	80046a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	699b      	ldr	r3, [r3, #24]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d141      	bne.n	8004674 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f0:	4b48      	ldr	r3, [pc, #288]	; (8004714 <HAL_RCC_OscConfig+0x4dc>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f6:	f7fd f8d5 	bl	80017a4 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fd f8d1 	bl	80017a4 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e078      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004610:	4b3f      	ldr	r3, [pc, #252]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1f0      	bne.n	80045fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69da      	ldr	r2, [r3, #28]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	019b      	lsls	r3, r3, #6
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	3b01      	subs	r3, #1
 8004636:	041b      	lsls	r3, r3, #16
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	061b      	lsls	r3, r3, #24
 8004640:	4933      	ldr	r1, [pc, #204]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004642:	4313      	orrs	r3, r2
 8004644:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004646:	4b33      	ldr	r3, [pc, #204]	; (8004714 <HAL_RCC_OscConfig+0x4dc>)
 8004648:	2201      	movs	r2, #1
 800464a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464c:	f7fd f8aa 	bl	80017a4 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004654:	f7fd f8a6 	bl	80017a4 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e04d      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	4b2a      	ldr	r3, [pc, #168]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x41c>
 8004672:	e045      	b.n	8004700 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x4dc>)
 8004676:	2200      	movs	r2, #0
 8004678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467a:	f7fd f893 	bl	80017a4 <HAL_GetTick>
 800467e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004682:	f7fd f88f 	bl	80017a4 <HAL_GetTick>
 8004686:	4602      	mov	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e036      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d1f0      	bne.n	8004682 <HAL_RCC_OscConfig+0x44a>
 80046a0:	e02e      	b.n	8004700 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e029      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046ae:	4b18      	ldr	r3, [pc, #96]	; (8004710 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d11c      	bne.n	80046fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d115      	bne.n	80046fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10d      	bne.n	80046fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d106      	bne.n	80046fc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}
 800470a:	bf00      	nop
 800470c:	40007000 	.word	0x40007000
 8004710:	40023800 	.word	0x40023800
 8004714:	42470060 	.word	0x42470060

08004718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0cc      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b68      	ldr	r3, [pc, #416]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 030f 	and.w	r3, r3, #15
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d90c      	bls.n	8004754 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b65      	ldr	r3, [pc, #404]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	b2d2      	uxtb	r2, r2
 8004740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004742:	4b63      	ldr	r3, [pc, #396]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	683a      	ldr	r2, [r7, #0]
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e0b8      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800476c:	4b59      	ldr	r3, [pc, #356]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a58      	ldr	r2, [pc, #352]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004776:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b00      	cmp	r3, #0
 8004782:	d005      	beq.n	8004790 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004784:	4b53      	ldr	r3, [pc, #332]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	4a52      	ldr	r2, [pc, #328]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800478e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004790:	4b50      	ldr	r3, [pc, #320]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	494d      	ldr	r1, [pc, #308]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d044      	beq.n	8004838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d107      	bne.n	80047c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b6:	4b47      	ldr	r3, [pc, #284]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d119      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e07f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d003      	beq.n	80047d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e06f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e067      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b37      	ldr	r3, [pc, #220]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4934      	ldr	r1, [pc, #208]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	4313      	orrs	r3, r2
 8004806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fc ffcc 	bl	80017a4 <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fc ffc8 	bl	80017a4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	; 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e04f      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2b      	ldr	r3, [pc, #172]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b25      	ldr	r3, [pc, #148]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d20c      	bcs.n	8004860 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b20      	ldr	r3, [pc, #128]	; (80048d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e032      	b.n	80048c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	4916      	ldr	r1, [pc, #88]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	4313      	orrs	r3, r2
 800487c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0308 	and.w	r3, r3, #8
 8004886:	2b00      	cmp	r3, #0
 8004888:	d009      	beq.n	800489e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800488a:	4b12      	ldr	r3, [pc, #72]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	490e      	ldr	r1, [pc, #56]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800489e:	f000 f821 	bl	80048e4 <HAL_RCC_GetSysClockFreq>
 80048a2:	4601      	mov	r1, r0
 80048a4:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <HAL_RCC_ClockConfig+0x1bc>)
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	4a0a      	ldr	r2, [pc, #40]	; (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	5cd3      	ldrb	r3, [r2, r3]
 80048b2:	fa21 f303 	lsr.w	r3, r1, r3
 80048b6:	4a09      	ldr	r2, [pc, #36]	; (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048ba:	4b09      	ldr	r3, [pc, #36]	; (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7fc ff2c 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40023c00 	.word	0x40023c00
 80048d4:	40023800 	.word	0x40023800
 80048d8:	08008824 	.word	0x08008824
 80048dc:	20000000 	.word	0x20000000
 80048e0:	20000004 	.word	0x20000004

080048e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	2300      	movs	r3, #0
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	2300      	movs	r3, #0
 80048f4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048fa:	4b63      	ldr	r3, [pc, #396]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b04      	cmp	r3, #4
 8004904:	d007      	beq.n	8004916 <HAL_RCC_GetSysClockFreq+0x32>
 8004906:	2b08      	cmp	r3, #8
 8004908:	d008      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x38>
 800490a:	2b00      	cmp	r3, #0
 800490c:	f040 80b4 	bne.w	8004a78 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004910:	4b5e      	ldr	r3, [pc, #376]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004912:	60bb      	str	r3, [r7, #8]
       break;
 8004914:	e0b3      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004916:	4b5e      	ldr	r3, [pc, #376]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004918:	60bb      	str	r3, [r7, #8]
      break;
 800491a:	e0b0      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800491c:	4b5a      	ldr	r3, [pc, #360]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004924:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004926:	4b58      	ldr	r3, [pc, #352]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d04a      	beq.n	80049c8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004932:	4b55      	ldr	r3, [pc, #340]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	f04f 0400 	mov.w	r4, #0
 800493c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	ea03 0501 	and.w	r5, r3, r1
 8004948:	ea04 0602 	and.w	r6, r4, r2
 800494c:	4629      	mov	r1, r5
 800494e:	4632      	mov	r2, r6
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	f04f 0400 	mov.w	r4, #0
 8004958:	0154      	lsls	r4, r2, #5
 800495a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800495e:	014b      	lsls	r3, r1, #5
 8004960:	4619      	mov	r1, r3
 8004962:	4622      	mov	r2, r4
 8004964:	1b49      	subs	r1, r1, r5
 8004966:	eb62 0206 	sbc.w	r2, r2, r6
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	f04f 0400 	mov.w	r4, #0
 8004972:	0194      	lsls	r4, r2, #6
 8004974:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004978:	018b      	lsls	r3, r1, #6
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	eb64 0402 	sbc.w	r4, r4, r2
 8004980:	f04f 0100 	mov.w	r1, #0
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	00e2      	lsls	r2, r4, #3
 800498a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800498e:	00d9      	lsls	r1, r3, #3
 8004990:	460b      	mov	r3, r1
 8004992:	4614      	mov	r4, r2
 8004994:	195b      	adds	r3, r3, r5
 8004996:	eb44 0406 	adc.w	r4, r4, r6
 800499a:	f04f 0100 	mov.w	r1, #0
 800499e:	f04f 0200 	mov.w	r2, #0
 80049a2:	0262      	lsls	r2, r4, #9
 80049a4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049a8:	0259      	lsls	r1, r3, #9
 80049aa:	460b      	mov	r3, r1
 80049ac:	4614      	mov	r4, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	4621      	mov	r1, r4
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f04f 0400 	mov.w	r4, #0
 80049b8:	461a      	mov	r2, r3
 80049ba:	4623      	mov	r3, r4
 80049bc:	f7fb fff2 	bl	80009a4 <__aeabi_uldivmod>
 80049c0:	4603      	mov	r3, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e049      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c8:	4b2f      	ldr	r3, [pc, #188]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	f04f 0400 	mov.w	r4, #0
 80049d2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80049d6:	f04f 0200 	mov.w	r2, #0
 80049da:	ea03 0501 	and.w	r5, r3, r1
 80049de:	ea04 0602 	and.w	r6, r4, r2
 80049e2:	4629      	mov	r1, r5
 80049e4:	4632      	mov	r2, r6
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f04f 0400 	mov.w	r4, #0
 80049ee:	0154      	lsls	r4, r2, #5
 80049f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049f4:	014b      	lsls	r3, r1, #5
 80049f6:	4619      	mov	r1, r3
 80049f8:	4622      	mov	r2, r4
 80049fa:	1b49      	subs	r1, r1, r5
 80049fc:	eb62 0206 	sbc.w	r2, r2, r6
 8004a00:	f04f 0300 	mov.w	r3, #0
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	0194      	lsls	r4, r2, #6
 8004a0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a0e:	018b      	lsls	r3, r1, #6
 8004a10:	1a5b      	subs	r3, r3, r1
 8004a12:	eb64 0402 	sbc.w	r4, r4, r2
 8004a16:	f04f 0100 	mov.w	r1, #0
 8004a1a:	f04f 0200 	mov.w	r2, #0
 8004a1e:	00e2      	lsls	r2, r4, #3
 8004a20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a24:	00d9      	lsls	r1, r3, #3
 8004a26:	460b      	mov	r3, r1
 8004a28:	4614      	mov	r4, r2
 8004a2a:	195b      	adds	r3, r3, r5
 8004a2c:	eb44 0406 	adc.w	r4, r4, r6
 8004a30:	f04f 0100 	mov.w	r1, #0
 8004a34:	f04f 0200 	mov.w	r2, #0
 8004a38:	02a2      	lsls	r2, r4, #10
 8004a3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a3e:	0299      	lsls	r1, r3, #10
 8004a40:	460b      	mov	r3, r1
 8004a42:	4614      	mov	r4, r2
 8004a44:	4618      	mov	r0, r3
 8004a46:	4621      	mov	r1, r4
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f04f 0400 	mov.w	r4, #0
 8004a4e:	461a      	mov	r2, r3
 8004a50:	4623      	mov	r3, r4
 8004a52:	f7fb ffa7 	bl	80009a4 <__aeabi_uldivmod>
 8004a56:	4603      	mov	r3, r0
 8004a58:	460c      	mov	r4, r1
 8004a5a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5c:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	60bb      	str	r3, [r7, #8]
      break;
 8004a76:	e002      	b.n	8004a7e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a78:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a7a:	60bb      	str	r3, [r7, #8]
      break;
 8004a7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a7e:	68bb      	ldr	r3, [r7, #8]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	00f42400 	.word	0x00f42400
 8004a90:	007a1200 	.word	0x007a1200

08004a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a94:	b480      	push	{r7}
 8004a96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a98:	4b03      	ldr	r3, [pc, #12]	; (8004aa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20000000 	.word	0x20000000

08004aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ab0:	f7ff fff0 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004ab4:	4601      	mov	r1, r0
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	0a9b      	lsrs	r3, r3, #10
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	4a03      	ldr	r2, [pc, #12]	; (8004ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ac2:	5cd3      	ldrb	r3, [r2, r3]
 8004ac4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	08008834 	.word	0x08008834

08004ad4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ad8:	f7ff ffdc 	bl	8004a94 <HAL_RCC_GetHCLKFreq>
 8004adc:	4601      	mov	r1, r0
 8004ade:	4b05      	ldr	r3, [pc, #20]	; (8004af4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	0b5b      	lsrs	r3, r3, #13
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4a03      	ldr	r2, [pc, #12]	; (8004af8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	08008834 	.word	0x08008834

08004afc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b04:	2300      	movs	r3, #0
 8004b06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d035      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b24:	4b62      	ldr	r3, [pc, #392]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b2a:	f7fc fe3b 	bl	80017a4 <HAL_GetTick>
 8004b2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b32:	f7fc fe37 	bl	80017a4 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0b0      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b44:	4b5b      	ldr	r3, [pc, #364]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	019a      	lsls	r2, r3, #6
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	071b      	lsls	r3, r3, #28
 8004b5c:	4955      	ldr	r1, [pc, #340]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b64:	4b52      	ldr	r3, [pc, #328]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b66:	2201      	movs	r2, #1
 8004b68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fe1b 	bl	80017a4 <HAL_GetTick>
 8004b6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b70:	e008      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b72:	f7fc fe17 	bl	80017a4 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e090      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b84:	4b4b      	ldr	r3, [pc, #300]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0f0      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8083 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
 8004ba2:	4b44      	ldr	r3, [pc, #272]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	4a43      	ldr	r2, [pc, #268]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bac:	6413      	str	r3, [r2, #64]	; 0x40
 8004bae:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bba:	4b3f      	ldr	r3, [pc, #252]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a3e      	ldr	r2, [pc, #248]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fded 	bl	80017a4 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bce:	f7fc fde9 	bl	80017a4 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e062      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004be0:	4b35      	ldr	r3, [pc, #212]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0f0      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bec:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d028      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b29      	ldr	r3, [pc, #164]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c1a:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c20:	4a24      	ldr	r2, [pc, #144]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c26:	4b23      	ldr	r3, [pc, #140]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d114      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c32:	f7fc fdb7 	bl	80017a4 <HAL_GetTick>
 8004c36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	e00a      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c3a:	f7fc fdb3 	bl	80017a4 <HAL_GetTick>
 8004c3e:	4602      	mov	r2, r0
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e02a      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c50:	4b18      	ldr	r3, [pc, #96]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d0ee      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c68:	d10d      	bne.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7e:	490d      	ldr	r1, [pc, #52]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]
 8004c84:	e005      	b.n	8004c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c86:	4b0b      	ldr	r3, [pc, #44]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4a0a      	ldr	r2, [pc, #40]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c90:	6093      	str	r3, [r2, #8]
 8004c92:	4b08      	ldr	r3, [pc, #32]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c9e:	4905      	ldr	r1, [pc, #20]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	42470068 	.word	0x42470068
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	40007000 	.word	0x40007000
 8004cbc:	42470e40 	.word	0x42470e40

08004cc0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b087      	sub	sp, #28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d13d      	bne.n	8004d5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cde:	4b22      	ldr	r3, [pc, #136]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d004      	beq.n	8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d12f      	bne.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cf4:	617b      	str	r3, [r7, #20]
          break;
 8004cf6:	e02f      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d04:	d108      	bne.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d0e:	4a18      	ldr	r2, [pc, #96]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	e007      	b.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d20:	4a14      	ldr	r2, [pc, #80]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d26:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d28:	4b0f      	ldr	r3, [pc, #60]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d2e:	099b      	lsrs	r3, r3, #6
 8004d30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d42:	0f1b      	lsrs	r3, r3, #28
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	617b      	str	r3, [r7, #20]
          break;
 8004d50:	e002      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
          break;
 8004d56:	bf00      	nop
        }
      }
      break;
 8004d58:	bf00      	nop
    }
  }
  return frequency;
 8004d5a:	697b      	ldr	r3, [r7, #20]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	371c      	adds	r7, #28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	00bb8000 	.word	0x00bb8000
 8004d70:	007a1200 	.word	0x007a1200
 8004d74:	00f42400 	.word	0x00f42400

08004d78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e056      	b.n	8004e38 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7fc fb63 	bl	8001470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2202      	movs	r2, #2
 8004dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	431a      	orrs	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	431a      	orrs	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	ea42 0103 	orr.w	r1, r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	0c1b      	lsrs	r3, r3, #16
 8004e08:	f003 0104 	and.w	r1, r3, #4
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69da      	ldr	r2, [r3, #28]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e26:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3708      	adds	r7, #8
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e03f      	b.n	8004ed2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fb4a 	bl	8001500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2224      	movs	r2, #36	; 0x24
 8004e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f829 	bl	8004edc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689a      	ldr	r2, [r3, #8]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	431a      	orrs	r2, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f1e:	f023 030c 	bic.w	r3, r3, #12
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6812      	ldr	r2, [r2, #0]
 8004f26:	68f9      	ldr	r1, [r7, #12]
 8004f28:	430b      	orrs	r3, r1
 8004f2a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f4a:	f040 818b 	bne.w	8005264 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4ac1      	ldr	r2, [pc, #772]	; (8005258 <UART_SetConfig+0x37c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d005      	beq.n	8004f64 <UART_SetConfig+0x88>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4abf      	ldr	r2, [pc, #764]	; (800525c <UART_SetConfig+0x380>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	f040 80bd 	bne.w	80050de <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f64:	f7ff fdb6 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 8004f68:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	461d      	mov	r5, r3
 8004f6e:	f04f 0600 	mov.w	r6, #0
 8004f72:	46a8      	mov	r8, r5
 8004f74:	46b1      	mov	r9, r6
 8004f76:	eb18 0308 	adds.w	r3, r8, r8
 8004f7a:	eb49 0409 	adc.w	r4, r9, r9
 8004f7e:	4698      	mov	r8, r3
 8004f80:	46a1      	mov	r9, r4
 8004f82:	eb18 0805 	adds.w	r8, r8, r5
 8004f86:	eb49 0906 	adc.w	r9, r9, r6
 8004f8a:	f04f 0100 	mov.w	r1, #0
 8004f8e:	f04f 0200 	mov.w	r2, #0
 8004f92:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f96:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f9a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f9e:	4688      	mov	r8, r1
 8004fa0:	4691      	mov	r9, r2
 8004fa2:	eb18 0005 	adds.w	r0, r8, r5
 8004fa6:	eb49 0106 	adc.w	r1, r9, r6
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	461d      	mov	r5, r3
 8004fb0:	f04f 0600 	mov.w	r6, #0
 8004fb4:	196b      	adds	r3, r5, r5
 8004fb6:	eb46 0406 	adc.w	r4, r6, r6
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4623      	mov	r3, r4
 8004fbe:	f7fb fcf1 	bl	80009a4 <__aeabi_uldivmod>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	4ba5      	ldr	r3, [pc, #660]	; (8005260 <UART_SetConfig+0x384>)
 8004fca:	fba3 2302 	umull	r2, r3, r3, r2
 8004fce:	095b      	lsrs	r3, r3, #5
 8004fd0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	f04f 0600 	mov.w	r6, #0
 8004fdc:	46a9      	mov	r9, r5
 8004fde:	46b2      	mov	sl, r6
 8004fe0:	eb19 0309 	adds.w	r3, r9, r9
 8004fe4:	eb4a 040a 	adc.w	r4, sl, sl
 8004fe8:	4699      	mov	r9, r3
 8004fea:	46a2      	mov	sl, r4
 8004fec:	eb19 0905 	adds.w	r9, r9, r5
 8004ff0:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005000:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005004:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005008:	4689      	mov	r9, r1
 800500a:	4692      	mov	sl, r2
 800500c:	eb19 0005 	adds.w	r0, r9, r5
 8005010:	eb4a 0106 	adc.w	r1, sl, r6
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	461d      	mov	r5, r3
 800501a:	f04f 0600 	mov.w	r6, #0
 800501e:	196b      	adds	r3, r5, r5
 8005020:	eb46 0406 	adc.w	r4, r6, r6
 8005024:	461a      	mov	r2, r3
 8005026:	4623      	mov	r3, r4
 8005028:	f7fb fcbc 	bl	80009a4 <__aeabi_uldivmod>
 800502c:	4603      	mov	r3, r0
 800502e:	460c      	mov	r4, r1
 8005030:	461a      	mov	r2, r3
 8005032:	4b8b      	ldr	r3, [pc, #556]	; (8005260 <UART_SetConfig+0x384>)
 8005034:	fba3 1302 	umull	r1, r3, r3, r2
 8005038:	095b      	lsrs	r3, r3, #5
 800503a:	2164      	movs	r1, #100	; 0x64
 800503c:	fb01 f303 	mul.w	r3, r1, r3
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	3332      	adds	r3, #50	; 0x32
 8005046:	4a86      	ldr	r2, [pc, #536]	; (8005260 <UART_SetConfig+0x384>)
 8005048:	fba2 2303 	umull	r2, r3, r2, r3
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005054:	4498      	add	r8, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	461d      	mov	r5, r3
 800505a:	f04f 0600 	mov.w	r6, #0
 800505e:	46a9      	mov	r9, r5
 8005060:	46b2      	mov	sl, r6
 8005062:	eb19 0309 	adds.w	r3, r9, r9
 8005066:	eb4a 040a 	adc.w	r4, sl, sl
 800506a:	4699      	mov	r9, r3
 800506c:	46a2      	mov	sl, r4
 800506e:	eb19 0905 	adds.w	r9, r9, r5
 8005072:	eb4a 0a06 	adc.w	sl, sl, r6
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005082:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005086:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800508a:	4689      	mov	r9, r1
 800508c:	4692      	mov	sl, r2
 800508e:	eb19 0005 	adds.w	r0, r9, r5
 8005092:	eb4a 0106 	adc.w	r1, sl, r6
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	461d      	mov	r5, r3
 800509c:	f04f 0600 	mov.w	r6, #0
 80050a0:	196b      	adds	r3, r5, r5
 80050a2:	eb46 0406 	adc.w	r4, r6, r6
 80050a6:	461a      	mov	r2, r3
 80050a8:	4623      	mov	r3, r4
 80050aa:	f7fb fc7b 	bl	80009a4 <__aeabi_uldivmod>
 80050ae:	4603      	mov	r3, r0
 80050b0:	460c      	mov	r4, r1
 80050b2:	461a      	mov	r2, r3
 80050b4:	4b6a      	ldr	r3, [pc, #424]	; (8005260 <UART_SetConfig+0x384>)
 80050b6:	fba3 1302 	umull	r1, r3, r3, r2
 80050ba:	095b      	lsrs	r3, r3, #5
 80050bc:	2164      	movs	r1, #100	; 0x64
 80050be:	fb01 f303 	mul.w	r3, r1, r3
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	3332      	adds	r3, #50	; 0x32
 80050c8:	4a65      	ldr	r2, [pc, #404]	; (8005260 <UART_SetConfig+0x384>)
 80050ca:	fba2 2303 	umull	r2, r3, r2, r3
 80050ce:	095b      	lsrs	r3, r3, #5
 80050d0:	f003 0207 	and.w	r2, r3, #7
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4442      	add	r2, r8
 80050da:	609a      	str	r2, [r3, #8]
 80050dc:	e26f      	b.n	80055be <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050de:	f7ff fce5 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 80050e2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	461d      	mov	r5, r3
 80050e8:	f04f 0600 	mov.w	r6, #0
 80050ec:	46a8      	mov	r8, r5
 80050ee:	46b1      	mov	r9, r6
 80050f0:	eb18 0308 	adds.w	r3, r8, r8
 80050f4:	eb49 0409 	adc.w	r4, r9, r9
 80050f8:	4698      	mov	r8, r3
 80050fa:	46a1      	mov	r9, r4
 80050fc:	eb18 0805 	adds.w	r8, r8, r5
 8005100:	eb49 0906 	adc.w	r9, r9, r6
 8005104:	f04f 0100 	mov.w	r1, #0
 8005108:	f04f 0200 	mov.w	r2, #0
 800510c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005110:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005114:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005118:	4688      	mov	r8, r1
 800511a:	4691      	mov	r9, r2
 800511c:	eb18 0005 	adds.w	r0, r8, r5
 8005120:	eb49 0106 	adc.w	r1, r9, r6
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	461d      	mov	r5, r3
 800512a:	f04f 0600 	mov.w	r6, #0
 800512e:	196b      	adds	r3, r5, r5
 8005130:	eb46 0406 	adc.w	r4, r6, r6
 8005134:	461a      	mov	r2, r3
 8005136:	4623      	mov	r3, r4
 8005138:	f7fb fc34 	bl	80009a4 <__aeabi_uldivmod>
 800513c:	4603      	mov	r3, r0
 800513e:	460c      	mov	r4, r1
 8005140:	461a      	mov	r2, r3
 8005142:	4b47      	ldr	r3, [pc, #284]	; (8005260 <UART_SetConfig+0x384>)
 8005144:	fba3 2302 	umull	r2, r3, r3, r2
 8005148:	095b      	lsrs	r3, r3, #5
 800514a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	461d      	mov	r5, r3
 8005152:	f04f 0600 	mov.w	r6, #0
 8005156:	46a9      	mov	r9, r5
 8005158:	46b2      	mov	sl, r6
 800515a:	eb19 0309 	adds.w	r3, r9, r9
 800515e:	eb4a 040a 	adc.w	r4, sl, sl
 8005162:	4699      	mov	r9, r3
 8005164:	46a2      	mov	sl, r4
 8005166:	eb19 0905 	adds.w	r9, r9, r5
 800516a:	eb4a 0a06 	adc.w	sl, sl, r6
 800516e:	f04f 0100 	mov.w	r1, #0
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800517a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800517e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005182:	4689      	mov	r9, r1
 8005184:	4692      	mov	sl, r2
 8005186:	eb19 0005 	adds.w	r0, r9, r5
 800518a:	eb4a 0106 	adc.w	r1, sl, r6
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	461d      	mov	r5, r3
 8005194:	f04f 0600 	mov.w	r6, #0
 8005198:	196b      	adds	r3, r5, r5
 800519a:	eb46 0406 	adc.w	r4, r6, r6
 800519e:	461a      	mov	r2, r3
 80051a0:	4623      	mov	r3, r4
 80051a2:	f7fb fbff 	bl	80009a4 <__aeabi_uldivmod>
 80051a6:	4603      	mov	r3, r0
 80051a8:	460c      	mov	r4, r1
 80051aa:	461a      	mov	r2, r3
 80051ac:	4b2c      	ldr	r3, [pc, #176]	; (8005260 <UART_SetConfig+0x384>)
 80051ae:	fba3 1302 	umull	r1, r3, r3, r2
 80051b2:	095b      	lsrs	r3, r3, #5
 80051b4:	2164      	movs	r1, #100	; 0x64
 80051b6:	fb01 f303 	mul.w	r3, r1, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	3332      	adds	r3, #50	; 0x32
 80051c0:	4a27      	ldr	r2, [pc, #156]	; (8005260 <UART_SetConfig+0x384>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051ce:	4498      	add	r8, r3
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	461d      	mov	r5, r3
 80051d4:	f04f 0600 	mov.w	r6, #0
 80051d8:	46a9      	mov	r9, r5
 80051da:	46b2      	mov	sl, r6
 80051dc:	eb19 0309 	adds.w	r3, r9, r9
 80051e0:	eb4a 040a 	adc.w	r4, sl, sl
 80051e4:	4699      	mov	r9, r3
 80051e6:	46a2      	mov	sl, r4
 80051e8:	eb19 0905 	adds.w	r9, r9, r5
 80051ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80051f0:	f04f 0100 	mov.w	r1, #0
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005200:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005204:	4689      	mov	r9, r1
 8005206:	4692      	mov	sl, r2
 8005208:	eb19 0005 	adds.w	r0, r9, r5
 800520c:	eb4a 0106 	adc.w	r1, sl, r6
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	461d      	mov	r5, r3
 8005216:	f04f 0600 	mov.w	r6, #0
 800521a:	196b      	adds	r3, r5, r5
 800521c:	eb46 0406 	adc.w	r4, r6, r6
 8005220:	461a      	mov	r2, r3
 8005222:	4623      	mov	r3, r4
 8005224:	f7fb fbbe 	bl	80009a4 <__aeabi_uldivmod>
 8005228:	4603      	mov	r3, r0
 800522a:	460c      	mov	r4, r1
 800522c:	461a      	mov	r2, r3
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <UART_SetConfig+0x384>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	; 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a07      	ldr	r2, [pc, #28]	; (8005260 <UART_SetConfig+0x384>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 0207 	and.w	r2, r3, #7
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4442      	add	r2, r8
 8005254:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005256:	e1b2      	b.n	80055be <UART_SetConfig+0x6e2>
 8005258:	40011000 	.word	0x40011000
 800525c:	40011400 	.word	0x40011400
 8005260:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4ad7      	ldr	r2, [pc, #860]	; (80055c8 <UART_SetConfig+0x6ec>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d005      	beq.n	800527a <UART_SetConfig+0x39e>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4ad6      	ldr	r2, [pc, #856]	; (80055cc <UART_SetConfig+0x6f0>)
 8005274:	4293      	cmp	r3, r2
 8005276:	f040 80d1 	bne.w	800541c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800527a:	f7ff fc2b 	bl	8004ad4 <HAL_RCC_GetPCLK2Freq>
 800527e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	469a      	mov	sl, r3
 8005284:	f04f 0b00 	mov.w	fp, #0
 8005288:	46d0      	mov	r8, sl
 800528a:	46d9      	mov	r9, fp
 800528c:	eb18 0308 	adds.w	r3, r8, r8
 8005290:	eb49 0409 	adc.w	r4, r9, r9
 8005294:	4698      	mov	r8, r3
 8005296:	46a1      	mov	r9, r4
 8005298:	eb18 080a 	adds.w	r8, r8, sl
 800529c:	eb49 090b 	adc.w	r9, r9, fp
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052ac:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052b0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052b4:	4688      	mov	r8, r1
 80052b6:	4691      	mov	r9, r2
 80052b8:	eb1a 0508 	adds.w	r5, sl, r8
 80052bc:	eb4b 0609 	adc.w	r6, fp, r9
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	f04f 0400 	mov.w	r4, #0
 80052d2:	0094      	lsls	r4, r2, #2
 80052d4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052d8:	008b      	lsls	r3, r1, #2
 80052da:	461a      	mov	r2, r3
 80052dc:	4623      	mov	r3, r4
 80052de:	4628      	mov	r0, r5
 80052e0:	4631      	mov	r1, r6
 80052e2:	f7fb fb5f 	bl	80009a4 <__aeabi_uldivmod>
 80052e6:	4603      	mov	r3, r0
 80052e8:	460c      	mov	r4, r1
 80052ea:	461a      	mov	r2, r3
 80052ec:	4bb8      	ldr	r3, [pc, #736]	; (80055d0 <UART_SetConfig+0x6f4>)
 80052ee:	fba3 2302 	umull	r2, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	469b      	mov	fp, r3
 80052fc:	f04f 0c00 	mov.w	ip, #0
 8005300:	46d9      	mov	r9, fp
 8005302:	46e2      	mov	sl, ip
 8005304:	eb19 0309 	adds.w	r3, r9, r9
 8005308:	eb4a 040a 	adc.w	r4, sl, sl
 800530c:	4699      	mov	r9, r3
 800530e:	46a2      	mov	sl, r4
 8005310:	eb19 090b 	adds.w	r9, r9, fp
 8005314:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005318:	f04f 0100 	mov.w	r1, #0
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005324:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005328:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800532c:	4689      	mov	r9, r1
 800532e:	4692      	mov	sl, r2
 8005330:	eb1b 0509 	adds.w	r5, fp, r9
 8005334:	eb4c 060a 	adc.w	r6, ip, sl
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	4619      	mov	r1, r3
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	0094      	lsls	r4, r2, #2
 800534c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005350:	008b      	lsls	r3, r1, #2
 8005352:	461a      	mov	r2, r3
 8005354:	4623      	mov	r3, r4
 8005356:	4628      	mov	r0, r5
 8005358:	4631      	mov	r1, r6
 800535a:	f7fb fb23 	bl	80009a4 <__aeabi_uldivmod>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	461a      	mov	r2, r3
 8005364:	4b9a      	ldr	r3, [pc, #616]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005366:	fba3 1302 	umull	r1, r3, r3, r2
 800536a:	095b      	lsrs	r3, r3, #5
 800536c:	2164      	movs	r1, #100	; 0x64
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	3332      	adds	r3, #50	; 0x32
 8005378:	4a95      	ldr	r2, [pc, #596]	; (80055d0 <UART_SetConfig+0x6f4>)
 800537a:	fba2 2303 	umull	r2, r3, r2, r3
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005384:	4498      	add	r8, r3
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	469b      	mov	fp, r3
 800538a:	f04f 0c00 	mov.w	ip, #0
 800538e:	46d9      	mov	r9, fp
 8005390:	46e2      	mov	sl, ip
 8005392:	eb19 0309 	adds.w	r3, r9, r9
 8005396:	eb4a 040a 	adc.w	r4, sl, sl
 800539a:	4699      	mov	r9, r3
 800539c:	46a2      	mov	sl, r4
 800539e:	eb19 090b 	adds.w	r9, r9, fp
 80053a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053a6:	f04f 0100 	mov.w	r1, #0
 80053aa:	f04f 0200 	mov.w	r2, #0
 80053ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ba:	4689      	mov	r9, r1
 80053bc:	4692      	mov	sl, r2
 80053be:	eb1b 0509 	adds.w	r5, fp, r9
 80053c2:	eb4c 060a 	adc.w	r6, ip, sl
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4619      	mov	r1, r3
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	0094      	lsls	r4, r2, #2
 80053da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053de:	008b      	lsls	r3, r1, #2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4623      	mov	r3, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	4631      	mov	r1, r6
 80053e8:	f7fb fadc 	bl	80009a4 <__aeabi_uldivmod>
 80053ec:	4603      	mov	r3, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	461a      	mov	r2, r3
 80053f2:	4b77      	ldr	r3, [pc, #476]	; (80055d0 <UART_SetConfig+0x6f4>)
 80053f4:	fba3 1302 	umull	r1, r3, r3, r2
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	2164      	movs	r1, #100	; 0x64
 80053fc:	fb01 f303 	mul.w	r3, r1, r3
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	011b      	lsls	r3, r3, #4
 8005404:	3332      	adds	r3, #50	; 0x32
 8005406:	4a72      	ldr	r2, [pc, #456]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005408:	fba2 2303 	umull	r2, r3, r2, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	f003 020f 	and.w	r2, r3, #15
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4442      	add	r2, r8
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	e0d0      	b.n	80055be <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800541c:	f7ff fb46 	bl	8004aac <HAL_RCC_GetPCLK1Freq>
 8005420:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	469a      	mov	sl, r3
 8005426:	f04f 0b00 	mov.w	fp, #0
 800542a:	46d0      	mov	r8, sl
 800542c:	46d9      	mov	r9, fp
 800542e:	eb18 0308 	adds.w	r3, r8, r8
 8005432:	eb49 0409 	adc.w	r4, r9, r9
 8005436:	4698      	mov	r8, r3
 8005438:	46a1      	mov	r9, r4
 800543a:	eb18 080a 	adds.w	r8, r8, sl
 800543e:	eb49 090b 	adc.w	r9, r9, fp
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	f04f 0200 	mov.w	r2, #0
 800544a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800544e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005452:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005456:	4688      	mov	r8, r1
 8005458:	4691      	mov	r9, r2
 800545a:	eb1a 0508 	adds.w	r5, sl, r8
 800545e:	eb4b 0609 	adc.w	r6, fp, r9
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	4619      	mov	r1, r3
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	f04f 0400 	mov.w	r4, #0
 8005474:	0094      	lsls	r4, r2, #2
 8005476:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800547a:	008b      	lsls	r3, r1, #2
 800547c:	461a      	mov	r2, r3
 800547e:	4623      	mov	r3, r4
 8005480:	4628      	mov	r0, r5
 8005482:	4631      	mov	r1, r6
 8005484:	f7fb fa8e 	bl	80009a4 <__aeabi_uldivmod>
 8005488:	4603      	mov	r3, r0
 800548a:	460c      	mov	r4, r1
 800548c:	461a      	mov	r2, r3
 800548e:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005490:	fba3 2302 	umull	r2, r3, r3, r2
 8005494:	095b      	lsrs	r3, r3, #5
 8005496:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	469b      	mov	fp, r3
 800549e:	f04f 0c00 	mov.w	ip, #0
 80054a2:	46d9      	mov	r9, fp
 80054a4:	46e2      	mov	sl, ip
 80054a6:	eb19 0309 	adds.w	r3, r9, r9
 80054aa:	eb4a 040a 	adc.w	r4, sl, sl
 80054ae:	4699      	mov	r9, r3
 80054b0:	46a2      	mov	sl, r4
 80054b2:	eb19 090b 	adds.w	r9, r9, fp
 80054b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ba:	f04f 0100 	mov.w	r1, #0
 80054be:	f04f 0200 	mov.w	r2, #0
 80054c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054ce:	4689      	mov	r9, r1
 80054d0:	4692      	mov	sl, r2
 80054d2:	eb1b 0509 	adds.w	r5, fp, r9
 80054d6:	eb4c 060a 	adc.w	r6, ip, sl
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	4619      	mov	r1, r3
 80054e0:	f04f 0200 	mov.w	r2, #0
 80054e4:	f04f 0300 	mov.w	r3, #0
 80054e8:	f04f 0400 	mov.w	r4, #0
 80054ec:	0094      	lsls	r4, r2, #2
 80054ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054f2:	008b      	lsls	r3, r1, #2
 80054f4:	461a      	mov	r2, r3
 80054f6:	4623      	mov	r3, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	4631      	mov	r1, r6
 80054fc:	f7fb fa52 	bl	80009a4 <__aeabi_uldivmod>
 8005500:	4603      	mov	r3, r0
 8005502:	460c      	mov	r4, r1
 8005504:	461a      	mov	r2, r3
 8005506:	4b32      	ldr	r3, [pc, #200]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005508:	fba3 1302 	umull	r1, r3, r3, r2
 800550c:	095b      	lsrs	r3, r3, #5
 800550e:	2164      	movs	r1, #100	; 0x64
 8005510:	fb01 f303 	mul.w	r3, r1, r3
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	3332      	adds	r3, #50	; 0x32
 800551a:	4a2d      	ldr	r2, [pc, #180]	; (80055d0 <UART_SetConfig+0x6f4>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005526:	4498      	add	r8, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	469b      	mov	fp, r3
 800552c:	f04f 0c00 	mov.w	ip, #0
 8005530:	46d9      	mov	r9, fp
 8005532:	46e2      	mov	sl, ip
 8005534:	eb19 0309 	adds.w	r3, r9, r9
 8005538:	eb4a 040a 	adc.w	r4, sl, sl
 800553c:	4699      	mov	r9, r3
 800553e:	46a2      	mov	sl, r4
 8005540:	eb19 090b 	adds.w	r9, r9, fp
 8005544:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005548:	f04f 0100 	mov.w	r1, #0
 800554c:	f04f 0200 	mov.w	r2, #0
 8005550:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005554:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005558:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800555c:	4689      	mov	r9, r1
 800555e:	4692      	mov	sl, r2
 8005560:	eb1b 0509 	adds.w	r5, fp, r9
 8005564:	eb4c 060a 	adc.w	r6, ip, sl
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	4619      	mov	r1, r3
 800556e:	f04f 0200 	mov.w	r2, #0
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	0094      	lsls	r4, r2, #2
 800557c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005580:	008b      	lsls	r3, r1, #2
 8005582:	461a      	mov	r2, r3
 8005584:	4623      	mov	r3, r4
 8005586:	4628      	mov	r0, r5
 8005588:	4631      	mov	r1, r6
 800558a:	f7fb fa0b 	bl	80009a4 <__aeabi_uldivmod>
 800558e:	4603      	mov	r3, r0
 8005590:	460c      	mov	r4, r1
 8005592:	461a      	mov	r2, r3
 8005594:	4b0e      	ldr	r3, [pc, #56]	; (80055d0 <UART_SetConfig+0x6f4>)
 8005596:	fba3 1302 	umull	r1, r3, r3, r2
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	; 0x64
 800559e:	fb01 f303 	mul.w	r3, r1, r3
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	; 0x32
 80055a8:	4a09      	ldr	r2, [pc, #36]	; (80055d0 <UART_SetConfig+0x6f4>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 020f 	and.w	r2, r3, #15
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4442      	add	r2, r8
 80055ba:	609a      	str	r2, [r3, #8]
}
 80055bc:	e7ff      	b.n	80055be <UART_SetConfig+0x6e2>
 80055be:	bf00      	nop
 80055c0:	3714      	adds	r7, #20
 80055c2:	46bd      	mov	sp, r7
 80055c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055c8:	40011000 	.word	0x40011000
 80055cc:	40011400 	.word	0x40011400
 80055d0:	51eb851f 	.word	0x51eb851f

080055d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055d4:	b084      	sub	sp, #16
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
 80055de:	f107 001c 	add.w	r0, r7, #28
 80055e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d122      	bne.n	8005632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005616:	2b01      	cmp	r3, #1
 8005618:	d105      	bne.n	8005626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68db      	ldr	r3, [r3, #12]
 800561e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f94a 	bl	80058c0 <USB_CoreReset>
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	e01a      	b.n	8005668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f93e 	bl	80058c0 <USB_CoreReset>
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38
 800565a:	e005      	b.n	8005668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	2b01      	cmp	r3, #1
 800566c:	d10b      	bne.n	8005686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f043 0206 	orr.w	r2, r3, #6
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f043 0220 	orr.w	r2, r3, #32
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005686:	7bfb      	ldrb	r3, [r7, #15]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005692:	b004      	add	sp, #16
 8005694:	4770      	bx	lr

08005696 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	f043 0201 	orr.w	r2, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f023 0201 	bic.w	r2, r3, #1
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr

080056da <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80056f2:	78fb      	ldrb	r3, [r7, #3]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d106      	bne.n	8005706 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68db      	ldr	r3, [r3, #12]
 80056fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	60da      	str	r2, [r3, #12]
 8005704:	e00b      	b.n	800571e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	60da      	str	r2, [r3, #12]
 8005718:	e001      	b.n	800571e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e003      	b.n	8005726 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800571e:	2032      	movs	r0, #50	; 0x32
 8005720:	f7fc f84c 	bl	80017bc <HAL_Delay>

  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
	...

08005730 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800573a:	2300      	movs	r3, #0
 800573c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	019b      	lsls	r3, r3, #6
 8005742:	f043 0220 	orr.w	r2, r3, #32
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a09      	ldr	r2, [pc, #36]	; (8005778 <USB_FlushTxFifo+0x48>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e006      	b.n	800576a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	f003 0320 	and.w	r3, r3, #32
 8005764:	2b20      	cmp	r3, #32
 8005766:	d0f0      	beq.n	800574a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	00030d40 	.word	0x00030d40

0800577c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800577c:	b480      	push	{r7}
 800577e:	b085      	sub	sp, #20
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005784:	2300      	movs	r3, #0
 8005786:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2210      	movs	r2, #16
 800578c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	3301      	adds	r3, #1
 8005792:	60fb      	str	r3, [r7, #12]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	4a09      	ldr	r2, [pc, #36]	; (80057bc <USB_FlushRxFifo+0x40>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d901      	bls.n	80057a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e006      	b.n	80057ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	f003 0310 	and.w	r3, r3, #16
 80057a8:	2b10      	cmp	r3, #16
 80057aa:	d0f0      	beq.n	800578e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057ac:	2300      	movs	r3, #0
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	00030d40 	.word	0x00030d40

080057c0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b089      	sub	sp, #36	; 0x24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	4611      	mov	r1, r2
 80057cc:	461a      	mov	r2, r3
 80057ce:	460b      	mov	r3, r1
 80057d0:	71fb      	strb	r3, [r7, #7]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80057de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d11a      	bne.n	800581c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057e6:	88bb      	ldrh	r3, [r7, #4]
 80057e8:	3303      	adds	r3, #3
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	61bb      	str	r3, [r7, #24]
 80057f2:	e00f      	b.n	8005814 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057f4:	79fb      	ldrb	r3, [r7, #7]
 80057f6:	031a      	lsls	r2, r3, #12
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	4413      	add	r3, r2
 80057fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005800:	461a      	mov	r2, r3
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	3304      	adds	r3, #4
 800580c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3301      	adds	r3, #1
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	69ba      	ldr	r2, [r7, #24]
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3eb      	bcc.n	80057f4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3724      	adds	r7, #36	; 0x24
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800582a:	b480      	push	{r7}
 800582c:	b089      	sub	sp, #36	; 0x24
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	4613      	mov	r3, r2
 8005836:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	3303      	adds	r3, #3
 8005844:	089b      	lsrs	r3, r3, #2
 8005846:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005848:	2300      	movs	r3, #0
 800584a:	61bb      	str	r3, [r7, #24]
 800584c:	e00b      	b.n	8005866 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	601a      	str	r2, [r3, #0]
    pDest++;
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	3301      	adds	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	429a      	cmp	r2, r3
 800586c:	d3ef      	bcc.n	800584e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800586e:	69fb      	ldr	r3, [r7, #28]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3724      	adds	r7, #36	; 0x24
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4013      	ands	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005894:	68fb      	ldr	r3, [r7, #12]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3714      	adds	r7, #20
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	695b      	ldr	r3, [r3, #20]
 80058ae:	f003 0301 	and.w	r3, r3, #1
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
	...

080058c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b085      	sub	sp, #20
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80058c8:	2300      	movs	r3, #0
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3301      	adds	r3, #1
 80058d0:	60fb      	str	r3, [r7, #12]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4a13      	ldr	r2, [pc, #76]	; (8005924 <USB_CoreReset+0x64>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d901      	bls.n	80058de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e01b      	b.n	8005916 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	daf2      	bge.n	80058cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f043 0201 	orr.w	r2, r3, #1
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	3301      	adds	r3, #1
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4a09      	ldr	r2, [pc, #36]	; (8005924 <USB_CoreReset+0x64>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d901      	bls.n	8005908 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e006      	b.n	8005916 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	691b      	ldr	r3, [r3, #16]
 800590c:	f003 0301 	and.w	r3, r3, #1
 8005910:	2b01      	cmp	r3, #1
 8005912:	d0f0      	beq.n	80058f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	00030d40 	.word	0x00030d40

08005928 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005928:	b084      	sub	sp, #16
 800592a:	b580      	push	{r7, lr}
 800592c:	b084      	sub	sp, #16
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	f107 001c 	add.w	r0, r7, #28
 8005936:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d018      	beq.n	80059ac <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2b03      	cmp	r3, #3
 800597e:	d10a      	bne.n	8005996 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800598e:	f043 0304 	orr.w	r3, r3, #4
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e014      	b.n	80059c0 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059a4:	f023 0304 	bic.w	r3, r3, #4
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	e009      	b.n	80059c0 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059ba:	f023 0304 	bic.w	r3, r3, #4
 80059be:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80059c0:	2110      	movs	r1, #16
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f7ff feb4 	bl	8005730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f7ff fed7 	bl	800577c <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e015      	b.n	8005a00 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059e0:	461a      	mov	r2, r3
 80059e2:	f04f 33ff 	mov.w	r3, #4294967295
 80059e6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059f4:	461a      	mov	r2, r3
 80059f6:	2300      	movs	r3, #0
 80059f8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	3301      	adds	r3, #1
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d3e5      	bcc.n	80059d4 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f8ac 	bl	8005b68 <USB_DriveVbus>

  HAL_Delay(200U);
 8005a10:	20c8      	movs	r0, #200	; 0xc8
 8005a12:	f7fb fed3 	bl	80017bc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a22:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d00b      	beq.n	8005a48 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <USB_HostInit+0x164>)
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a13      	ldr	r2, [pc, #76]	; (8005a90 <USB_HostInit+0x168>)
 8005a42:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a46:	e009      	b.n	8005a5c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2280      	movs	r2, #128	; 0x80
 8005a4c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a10      	ldr	r2, [pc, #64]	; (8005a94 <USB_HostInit+0x16c>)
 8005a52:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a10      	ldr	r2, [pc, #64]	; (8005a98 <USB_HostInit+0x170>)
 8005a58:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d105      	bne.n	8005a6e <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	699b      	ldr	r3, [r3, #24]
 8005a66:	f043 0210 	orr.w	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	699a      	ldr	r2, [r3, #24]
 8005a72:	4b0a      	ldr	r3, [pc, #40]	; (8005a9c <USB_HostInit+0x174>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3710      	adds	r7, #16
 8005a80:	46bd      	mov	sp, r7
 8005a82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a86:	b004      	add	sp, #16
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	01000200 	.word	0x01000200
 8005a90:	00e00300 	.word	0x00e00300
 8005a94:	00600080 	.word	0x00600080
 8005a98:	004000e0 	.word	0x004000e0
 8005a9c:	a3200008 	.word	0xa3200008

08005aa0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005abe:	f023 0303 	bic.w	r3, r3, #3
 8005ac2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 0303 	and.w	r3, r3, #3
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005adc:	78fb      	ldrb	r3, [r7, #3]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d107      	bne.n	8005af2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ae8:	461a      	mov	r2, r3
 8005aea:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005aee:	6053      	str	r3, [r2, #4]
 8005af0:	e009      	b.n	8005b06 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005af2:	78fb      	ldrb	r3, [r7, #3]
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d106      	bne.n	8005b06 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005afe:	461a      	mov	r2, r3
 8005b00:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b04:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b20:	2300      	movs	r3, #0
 8005b22:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b34:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b42:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b44:	2064      	movs	r0, #100	; 0x64
 8005b46:	f7fb fe39 	bl	80017bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b56:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b58:	200a      	movs	r0, #10
 8005b5a:	f7fb fe2f 	bl	80017bc <HAL_Delay>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b8c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d109      	bne.n	8005bac <USB_DriveVbus+0x44>
 8005b98:	78fb      	ldrb	r3, [r7, #3]
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d106      	bne.n	8005bac <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	68fa      	ldr	r2, [r7, #12]
 8005ba2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005baa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb6:	d109      	bne.n	8005bcc <USB_DriveVbus+0x64>
 8005bb8:	78fb      	ldrb	r3, [r7, #3]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d106      	bne.n	8005bcc <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bca:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005bcc:	2300      	movs	r3, #0
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005be6:	2300      	movs	r3, #0
 8005be8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	0c5b      	lsrs	r3, r3, #17
 8005bf8:	f003 0303 	and.w	r3, r3, #3
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	b29b      	uxth	r3, r3
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	4608      	mov	r0, r1
 8005c36:	4611      	mov	r1, r2
 8005c38:	461a      	mov	r2, r3
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	70fb      	strb	r3, [r7, #3]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70bb      	strb	r3, [r7, #2]
 8005c42:	4613      	mov	r3, r2
 8005c44:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c4e:	78fb      	ldrb	r3, [r7, #3]
 8005c50:	015a      	lsls	r2, r3, #5
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	4413      	add	r3, r2
 8005c56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005c60:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c62:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d87e      	bhi.n	8005d68 <USB_HC_Init+0x13c>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <USB_HC_Init+0x44>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005d2b 	.word	0x08005d2b
 8005c78:	08005c81 	.word	0x08005c81
 8005c7c:	08005ced 	.word	0x08005ced
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	015a      	lsls	r2, r3, #5
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	4413      	add	r3, r2
 8005c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005c92:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	da10      	bge.n	8005cbe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	78fa      	ldrb	r2, [r7, #3]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68ba      	ldr	r2, [r7, #8]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cba:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005cbc:	e057      	b.n	8005d6e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d051      	beq.n	8005d6e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	0151      	lsls	r1, r2, #5
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	440a      	add	r2, r1
 8005ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ce4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005ce8:	60d3      	str	r3, [r2, #12]
      break;
 8005cea:	e040      	b.n	8005d6e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f240 639d 	movw	r3, #1693	; 0x69d
 8005cfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	da34      	bge.n	8005d72 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d26:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d28:	e023      	b.n	8005d72 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	015a      	lsls	r2, r3, #5
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	4413      	add	r3, r2
 8005d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d36:	461a      	mov	r2, r3
 8005d38:	f240 2325 	movw	r3, #549	; 0x225
 8005d3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da17      	bge.n	8005d76 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d46:	78fb      	ldrb	r3, [r7, #3]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	0151      	lsls	r1, r2, #5
 8005d58:	68ba      	ldr	r2, [r7, #8]
 8005d5a:	440a      	add	r2, r1
 8005d5c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d60:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005d64:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005d66:	e006      	b.n	8005d76 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d6c:	e004      	b.n	8005d78 <USB_HC_Init+0x14c>
      break;
 8005d6e:	bf00      	nop
 8005d70:	e002      	b.n	8005d78 <USB_HC_Init+0x14c>
      break;
 8005d72:	bf00      	nop
 8005d74:	e000      	b.n	8005d78 <USB_HC_Init+0x14c>
      break;
 8005d76:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d7e:	699a      	ldr	r2, [r3, #24]
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	f003 030f 	and.w	r3, r3, #15
 8005d86:	2101      	movs	r1, #1
 8005d88:	fa01 f303 	lsl.w	r3, r1, r3
 8005d8c:	68b9      	ldr	r1, [r7, #8]
 8005d8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005d92:	4313      	orrs	r3, r2
 8005d94:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005da2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da03      	bge.n	8005db2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dae:	613b      	str	r3, [r7, #16]
 8005db0:	e001      	b.n	8005db6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005db6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d103      	bne.n	8005dc6 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005dbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	e001      	b.n	8005dca <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dca:	787b      	ldrb	r3, [r7, #1]
 8005dcc:	059b      	lsls	r3, r3, #22
 8005dce:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005dd2:	78bb      	ldrb	r3, [r7, #2]
 8005dd4:	02db      	lsls	r3, r3, #11
 8005dd6:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dda:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005de0:	049b      	lsls	r3, r3, #18
 8005de2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005de6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005de8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dee:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005df4:	78fb      	ldrb	r3, [r7, #3]
 8005df6:	0159      	lsls	r1, r3, #5
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e00:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e06:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e0c:	2b03      	cmp	r3, #3
 8005e0e:	d10f      	bne.n	8005e30 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e10:	78fb      	ldrb	r3, [r7, #3]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	78fa      	ldrb	r2, [r7, #3]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e2e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e30:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	371c      	adds	r7, #28
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop

08005e40 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e40:	b580      	push	{r7, lr}
 8005e42:	b08c      	sub	sp, #48	; 0x30
 8005e44:	af02      	add	r7, sp, #8
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	785b      	ldrb	r3, [r3, #1]
 8005e56:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005e5c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d028      	beq.n	8005ebc <USB_HC_StartXfer+0x7c>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d124      	bne.n	8005ebc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005e72:	79fb      	ldrb	r3, [r7, #7]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <USB_HC_StartXfer+0x50>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	795b      	ldrb	r3, [r3, #5]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d107      	bne.n	8005e90 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	785b      	ldrb	r3, [r3, #1]
 8005e84:	4619      	mov	r1, r3
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fa2e 	bl	80062e8 <USB_DoPing>
      return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e112      	b.n	80060b6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d112      	bne.n	8005ebc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	015a      	lsls	r2, r3, #5
 8005e9a:	6a3b      	ldr	r3, [r7, #32]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	69fa      	ldr	r2, [r7, #28]
 8005ea6:	0151      	lsls	r1, r2, #5
 8005ea8:	6a3a      	ldr	r2, [r7, #32]
 8005eaa:	440a      	add	r2, r1
 8005eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005eb0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005eb4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d018      	beq.n	8005ef6 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	8912      	ldrh	r2, [r2, #8]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	8912      	ldrh	r2, [r2, #8]
 8005ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed8:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005eda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005edc:	8b7b      	ldrh	r3, [r7, #26]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d90b      	bls.n	8005efa <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005ee2:	8b7b      	ldrh	r3, [r7, #26]
 8005ee4:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005ee6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	8912      	ldrh	r2, [r2, #8]
 8005eec:	fb02 f203 	mul.w	r2, r2, r3
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	611a      	str	r2, [r3, #16]
 8005ef4:	e001      	b.n	8005efa <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d006      	beq.n	8005f10 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f04:	68ba      	ldr	r2, [r7, #8]
 8005f06:	8912      	ldrh	r2, [r2, #8]
 8005f08:	fb02 f203 	mul.w	r2, r2, r3
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f18:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f1a:	04d9      	lsls	r1, r3, #19
 8005f1c:	4b68      	ldr	r3, [pc, #416]	; (80060c0 <USB_HC_StartXfer+0x280>)
 8005f1e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f20:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	7a9b      	ldrb	r3, [r3, #10]
 8005f26:	075b      	lsls	r3, r3, #29
 8005f28:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f2c:	69f9      	ldr	r1, [r7, #28]
 8005f2e:	0148      	lsls	r0, r1, #5
 8005f30:	6a39      	ldr	r1, [r7, #32]
 8005f32:	4401      	add	r1, r0
 8005f34:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f38:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f3a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f3c:	79fb      	ldrb	r3, [r7, #7]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	68d9      	ldr	r1, [r3, #12]
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	015a      	lsls	r2, r3, #5
 8005f4a:	6a3b      	ldr	r3, [r7, #32]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f52:	460a      	mov	r2, r1
 8005f54:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	bf0c      	ite	eq
 8005f66:	2301      	moveq	r3, #1
 8005f68:	2300      	movne	r3, #0
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	69fa      	ldr	r2, [r7, #28]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	6a3a      	ldr	r2, [r7, #32]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f88:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005f8c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005f8e:	69fb      	ldr	r3, [r7, #28]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	6a3b      	ldr	r3, [r7, #32]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	7e7b      	ldrb	r3, [r7, #25]
 8005f9e:	075b      	lsls	r3, r3, #29
 8005fa0:	69f9      	ldr	r1, [r7, #28]
 8005fa2:	0148      	lsls	r0, r1, #5
 8005fa4:	6a39      	ldr	r1, [r7, #32]
 8005fa6:	4401      	add	r1, r0
 8005fa8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a41      	ldr	r2, [pc, #260]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fc0:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005fc2:	4b40      	ldr	r3, [pc, #256]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005fca:	4a3e      	ldr	r2, [pc, #248]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fcc:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	78db      	ldrb	r3, [r3, #3]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d006      	beq.n	8005fe4 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005fd6:	4b3b      	ldr	r3, [pc, #236]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fde:	4a39      	ldr	r2, [pc, #228]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e005      	b.n	8005ff0 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005fe4:	4b37      	ldr	r3, [pc, #220]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fec:	4a35      	ldr	r2, [pc, #212]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005fee:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ff0:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	4a32      	ldr	r2, [pc, #200]	; (80060c4 <USB_HC_StartXfer+0x284>)
 8005ffa:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	4413      	add	r3, r2
 8006004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006008:	461a      	mov	r2, r3
 800600a:	4b2e      	ldr	r3, [pc, #184]	; (80060c4 <USB_HC_StartXfer+0x284>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006010:	79fb      	ldrb	r3, [r7, #7]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d14e      	bne.n	80060b4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	78db      	ldrb	r3, [r3, #3]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d14a      	bne.n	80060b4 <USB_HC_StartXfer+0x274>
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d046      	beq.n	80060b4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	79db      	ldrb	r3, [r3, #7]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d830      	bhi.n	8006090 <USB_HC_StartXfer+0x250>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <USB_HC_StartXfer+0x1f4>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	08006069 	.word	0x08006069
 800603c:	08006045 	.word	0x08006045
 8006040:	08006069 	.word	0x08006069
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	3303      	adds	r3, #3
 800604a:	089b      	lsrs	r3, r3, #2
 800604c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800604e:	8afa      	ldrh	r2, [r7, #22]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006054:	b29b      	uxth	r3, r3
 8006056:	429a      	cmp	r2, r3
 8006058:	d91c      	bls.n	8006094 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	f043 0220 	orr.w	r2, r3, #32
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	619a      	str	r2, [r3, #24]
          }
          break;
 8006066:	e015      	b.n	8006094 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	3303      	adds	r3, #3
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006072:	8afa      	ldrh	r2, [r7, #22]
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	b29b      	uxth	r3, r3
 800607e:	429a      	cmp	r2, r3
 8006080:	d90a      	bls.n	8006098 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	619a      	str	r2, [r3, #24]
          }
          break;
 800608e:	e003      	b.n	8006098 <USB_HC_StartXfer+0x258>

        default:
          break;
 8006090:	bf00      	nop
 8006092:	e002      	b.n	800609a <USB_HC_StartXfer+0x25a>
          break;
 8006094:	bf00      	nop
 8006096:	e000      	b.n	800609a <USB_HC_StartXfer+0x25a>
          break;
 8006098:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	68d9      	ldr	r1, [r3, #12]
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	785a      	ldrb	r2, [r3, #1]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	b298      	uxth	r0, r3
 80060a8:	2300      	movs	r3, #0
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	4603      	mov	r3, r0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff fb86 	bl	80057c0 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3728      	adds	r7, #40	; 0x28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	1ff80000 	.word	0x1ff80000
 80060c4:	200000b0 	.word	0x200000b0

080060c8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	b29b      	uxth	r3, r3
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3714      	adds	r7, #20
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b087      	sub	sp, #28
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
 80060f2:	460b      	mov	r3, r1
 80060f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80060fa:	78fb      	ldrb	r3, [r7, #3]
 80060fc:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0c9b      	lsrs	r3, r3, #18
 8006112:	f003 0303 	and.w	r3, r3, #3
 8006116:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <USB_HC_Halt+0x3a>
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	2b02      	cmp	r3, #2
 8006122:	d16c      	bne.n	80061fe <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	4413      	add	r3, r2
 800612c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	0151      	lsls	r1, r2, #5
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	440a      	add	r2, r1
 800613a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800613e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006142:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d143      	bne.n	80061d8 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4413      	add	r3, r2
 8006158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68fa      	ldr	r2, [r7, #12]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	440a      	add	r2, r1
 8006166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800616a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800616e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800618e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	0151      	lsls	r1, r2, #5
 80061a2:	693a      	ldr	r2, [r7, #16]
 80061a4:	440a      	add	r2, r1
 80061a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061ae:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	3301      	adds	r3, #1
 80061b4:	617b      	str	r3, [r7, #20]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061bc:	d81d      	bhi.n	80061fa <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d4:	d0ec      	beq.n	80061b0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061d6:	e080      	b.n	80062da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	0151      	lsls	r1, r2, #5
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	440a      	add	r2, r1
 80061ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061f6:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061f8:	e06f      	b.n	80062da <USB_HC_Halt+0x1f0>
          break;
 80061fa:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80061fc:	e06d      	b.n	80062da <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	0151      	lsls	r1, r2, #5
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	440a      	add	r2, r1
 8006214:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006218:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800621c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800622a:	2b00      	cmp	r3, #0
 800622c:	d143      	bne.n	80062b6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	015a      	lsls	r2, r3, #5
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	4413      	add	r3, r2
 8006236:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	0151      	lsls	r1, r2, #5
 8006240:	693a      	ldr	r2, [r7, #16]
 8006242:	440a      	add	r2, r1
 8006244:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006248:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800624c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800626c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	015a      	lsls	r2, r3, #5
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	4413      	add	r3, r2
 8006276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	0151      	lsls	r1, r2, #5
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	440a      	add	r2, r1
 8006284:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006288:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800628c:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	3301      	adds	r3, #1
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800629a:	d81d      	bhi.n	80062d8 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062b2:	d0ec      	beq.n	800628e <USB_HC_Halt+0x1a4>
 80062b4:	e011      	b.n	80062da <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	0151      	lsls	r1, r2, #5
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	440a      	add	r2, r1
 80062cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e000      	b.n	80062da <USB_HC_Halt+0x1f0>
          break;
 80062d8:	bf00      	nop
    }
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80062fc:	2301      	movs	r3, #1
 80062fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	04da      	lsls	r2, r3, #19
 8006304:	4b15      	ldr	r3, [pc, #84]	; (800635c <USB_DoPing+0x74>)
 8006306:	4013      	ands	r3, r2
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	440a      	add	r2, r1
 8006310:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006318:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	015a      	lsls	r2, r3, #5
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	4413      	add	r3, r2
 8006322:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006330:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006338:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	4413      	add	r3, r2
 8006342:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006346:	461a      	mov	r2, r3
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	371c      	adds	r7, #28
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	1ff80000 	.word	0x1ff80000

08006360 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff f9a1 	bl	80056b8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8006376:	2110      	movs	r1, #16
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f7ff f9d9 	bl	8005730 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7ff f9fc 	bl	800577c <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e01f      	b.n	80063ca <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063a8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063b0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063be:	461a      	mov	r2, r3
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	3301      	adds	r3, #1
 80063c8:	613b      	str	r3, [r7, #16]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b0f      	cmp	r3, #15
 80063ce:	d9dc      	bls.n	800638a <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80063d0:	2300      	movs	r3, #0
 80063d2:	613b      	str	r3, [r7, #16]
 80063d4:	e034      	b.n	8006440 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063ec:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80063f4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80063fc:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640a:	461a      	mov	r2, r3
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	3301      	adds	r3, #1
 8006414:	617b      	str	r3, [r7, #20]
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800641c:	d80c      	bhi.n	8006438 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006430:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006434:	d0ec      	beq.n	8006410 <USB_StopHost+0xb0>
 8006436:	e000      	b.n	800643a <USB_StopHost+0xda>
        break;
 8006438:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	3301      	adds	r3, #1
 800643e:	613b      	str	r3, [r7, #16]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	2b0f      	cmp	r3, #15
 8006444:	d9c7      	bls.n	80063d6 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800644c:	461a      	mov	r2, r3
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f04f 32ff 	mov.w	r2, #4294967295
 800645a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff f91a 	bl	8005696 <USB_EnableGlobalInt>

  return HAL_OK;
 8006462:	2300      	movs	r3, #0
}
 8006464:	4618      	mov	r0, r3
 8006466:	3718      	adds	r7, #24
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800646c:	b590      	push	{r4, r7, lr}
 800646e:	b089      	sub	sp, #36	; 0x24
 8006470:	af04      	add	r7, sp, #16
 8006472:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8006474:	2302      	movs	r3, #2
 8006476:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 8006478:	2301      	movs	r3, #1
 800647a:	2202      	movs	r2, #2
 800647c:	2102      	movs	r1, #2
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc3a 	bl	8006cf8 <USBH_FindInterface>
 8006484:	4603      	mov	r3, r0
 8006486:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2bff      	cmp	r3, #255	; 0xff
 800648c:	f000 812a 	beq.w	80066e4 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 fc13 	bl	8006cc0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80064a0:	2050      	movs	r0, #80	; 0x50
 80064a2:	f002 f8df 	bl	8008664 <malloc>
 80064a6:	4603      	mov	r3, r0
 80064a8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064b0:	69db      	ldr	r3, [r3, #28]
 80064b2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80064b4:	7bbb      	ldrb	r3, [r7, #14]
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	211a      	movs	r1, #26
 80064ba:	fb01 f303 	mul.w	r3, r1, r3
 80064be:	4413      	add	r3, r2
 80064c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b25b      	sxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	da15      	bge.n	80064f8 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	211a      	movs	r1, #26
 80064d2:	fb01 f303 	mul.w	r3, r1, r3
 80064d6:	4413      	add	r3, r2
 80064d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80064dc:	781a      	ldrb	r2, [r3, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064e2:	7bbb      	ldrb	r3, [r7, #14]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	211a      	movs	r1, #26
 80064e8:	fb01 f303 	mul.w	r3, r1, r3
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80064f2:	881a      	ldrh	r2, [r3, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	785b      	ldrb	r3, [r3, #1]
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 fd21 	bl	8007f46 <USBH_AllocPipe>
 8006504:	4603      	mov	r3, r0
 8006506:	461a      	mov	r2, r3
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	7819      	ldrb	r1, [r3, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	7858      	ldrb	r0, [r3, #1]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	8952      	ldrh	r2, [r2, #10]
 8006524:	9202      	str	r2, [sp, #8]
 8006526:	2203      	movs	r2, #3
 8006528:	9201      	str	r2, [sp, #4]
 800652a:	9300      	str	r3, [sp, #0]
 800652c:	4623      	mov	r3, r4
 800652e:	4602      	mov	r2, r0
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 fcd9 	bl	8007ee8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2200      	movs	r2, #0
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f001 ffe0 	bl	8008504 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006544:	2300      	movs	r3, #0
 8006546:	2200      	movs	r2, #0
 8006548:	210a      	movs	r1, #10
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fbd4 	bl	8006cf8 <USBH_FindInterface>
 8006550:	4603      	mov	r3, r0
 8006552:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	2bff      	cmp	r3, #255	; 0xff
 8006558:	f000 80c4 	beq.w	80066e4 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	211a      	movs	r1, #26
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	4413      	add	r3, r2
 8006568:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	b25b      	sxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	da16      	bge.n	80065a2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	211a      	movs	r1, #26
 800657a:	fb01 f303 	mul.w	r3, r1, r3
 800657e:	4413      	add	r3, r2
 8006580:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	211a      	movs	r1, #26
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	4413      	add	r3, r2
 8006596:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800659a:	881a      	ldrh	r2, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	835a      	strh	r2, [r3, #26]
 80065a0:	e015      	b.n	80065ce <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065a2:	7bbb      	ldrb	r3, [r7, #14]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	211a      	movs	r1, #26
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065b2:	781a      	ldrb	r2, [r3, #0]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	211a      	movs	r1, #26
 80065be:	fb01 f303 	mul.w	r3, r1, r3
 80065c2:	4413      	add	r3, r2
 80065c4:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065c8:	881a      	ldrh	r2, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80065ce:	7bbb      	ldrb	r3, [r7, #14]
 80065d0:	687a      	ldr	r2, [r7, #4]
 80065d2:	211a      	movs	r1, #26
 80065d4:	fb01 f303 	mul.w	r3, r1, r3
 80065d8:	4413      	add	r3, r2
 80065da:	f203 3352 	addw	r3, r3, #850	; 0x352
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	da16      	bge.n	8006614 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80065e6:	7bbb      	ldrb	r3, [r7, #14]
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	211a      	movs	r1, #26
 80065ec:	fb01 f303 	mul.w	r3, r1, r3
 80065f0:	4413      	add	r3, r2
 80065f2:	f203 3352 	addw	r3, r3, #850	; 0x352
 80065f6:	781a      	ldrb	r2, [r3, #0]
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	211a      	movs	r1, #26
 8006602:	fb01 f303 	mul.w	r3, r1, r3
 8006606:	4413      	add	r3, r2
 8006608:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800660c:	881a      	ldrh	r2, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	835a      	strh	r2, [r3, #26]
 8006612:	e015      	b.n	8006640 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006614:	7bbb      	ldrb	r3, [r7, #14]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	211a      	movs	r1, #26
 800661a:	fb01 f303 	mul.w	r3, r1, r3
 800661e:	4413      	add	r3, r2
 8006620:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006624:	781a      	ldrb	r2, [r3, #0]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	211a      	movs	r1, #26
 8006630:	fb01 f303 	mul.w	r3, r1, r3
 8006634:	4413      	add	r3, r2
 8006636:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800663a:	881a      	ldrh	r2, [r3, #0]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	7b9b      	ldrb	r3, [r3, #14]
 8006644:	4619      	mov	r1, r3
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f001 fc7d 	bl	8007f46 <USBH_AllocPipe>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	7bdb      	ldrb	r3, [r3, #15]
 8006658:	4619      	mov	r1, r3
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 fc73 	bl	8007f46 <USBH_AllocPipe>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	7b59      	ldrb	r1, [r3, #13]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	7b98      	ldrb	r0, [r3, #14]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800667c:	68ba      	ldr	r2, [r7, #8]
 800667e:	8b12      	ldrh	r2, [r2, #24]
 8006680:	9202      	str	r2, [sp, #8]
 8006682:	2202      	movs	r2, #2
 8006684:	9201      	str	r2, [sp, #4]
 8006686:	9300      	str	r3, [sp, #0]
 8006688:	4623      	mov	r3, r4
 800668a:	4602      	mov	r2, r0
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fc2b 	bl	8007ee8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	7b19      	ldrb	r1, [r3, #12]
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	7bd8      	ldrb	r0, [r3, #15]
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	8b52      	ldrh	r2, [r2, #26]
 80066aa:	9202      	str	r2, [sp, #8]
 80066ac:	2202      	movs	r2, #2
 80066ae:	9201      	str	r2, [sp, #4]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	4623      	mov	r3, r4
 80066b4:	4602      	mov	r2, r0
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fc16 	bl	8007ee8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	7b5b      	ldrb	r3, [r3, #13]
 80066c8:	2200      	movs	r2, #0
 80066ca:	4619      	mov	r1, r3
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 ff19 	bl	8008504 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	7b1b      	ldrb	r3, [r3, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	4619      	mov	r1, r3
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f001 ff12 	bl	8008504 <USBH_LL_SetToggle>
      status = USBH_OK;
 80066e0:	2300      	movs	r3, #0
 80066e2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80066e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3714      	adds	r7, #20
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd90      	pop	{r4, r7, pc}

080066ee <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b084      	sub	sp, #16
 80066f2:	af00      	add	r7, sp, #0
 80066f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00e      	beq.n	8006726 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	4619      	mov	r1, r3
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f001 fc09 	bl	8007f26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	4619      	mov	r1, r3
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f001 fc31 	bl	8007f82 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	7b1b      	ldrb	r3, [r3, #12]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00e      	beq.n	800674c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	7b1b      	ldrb	r3, [r3, #12]
 8006732:	4619      	mov	r1, r3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f001 fbf6 	bl	8007f26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	7b1b      	ldrb	r3, [r3, #12]
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fc1e 	bl	8007f82 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	7b5b      	ldrb	r3, [r3, #13]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00e      	beq.n	8006772 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	7b5b      	ldrb	r3, [r3, #13]
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fbe3 	bl	8007f26 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	7b5b      	ldrb	r3, [r3, #13]
 8006764:	4619      	mov	r1, r3
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f001 fc0b 	bl	8007f82 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00b      	beq.n	8006796 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	4618      	mov	r0, r3
 8006788:	f001 ff74 	bl	8008674 <free>
    phost->pActiveClass->pData = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006792:	2200      	movs	r2, #0
 8006794:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80067a8:	2302      	movs	r3, #2
 80067aa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	3340      	adds	r3, #64	; 0x40
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 f8b2 	bl	8006926 <GetLineCoding>
 80067c2:	4603      	mov	r3, r0
 80067c4:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067d2:	2102      	movs	r1, #2
 80067d4:	6878      	ldr	r0, [r7, #4]
 80067d6:	4798      	blx	r3
  }
  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80067ec:	2301      	movs	r3, #1
 80067ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067fa:	69db      	ldr	r3, [r3, #28]
 80067fc:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006804:	2b04      	cmp	r3, #4
 8006806:	d877      	bhi.n	80068f8 <USBH_CDC_Process+0x114>
 8006808:	a201      	add	r2, pc, #4	; (adr r2, 8006810 <USBH_CDC_Process+0x2c>)
 800680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680e:	bf00      	nop
 8006810:	08006825 	.word	0x08006825
 8006814:	0800682b 	.word	0x0800682b
 8006818:	0800685b 	.word	0x0800685b
 800681c:	080068cf 	.word	0x080068cf
 8006820:	080068dd 	.word	0x080068dd
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	73fb      	strb	r3, [r7, #15]
    break;
 8006828:	e06d      	b.n	8006906 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f897 	bl	8006964 <SetLineCoding>
 8006836:	4603      	mov	r3, r0
 8006838:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d104      	bne.n	800684a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2202      	movs	r2, #2
 8006844:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006848:	e058      	b.n	80068fc <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800684a:	7bbb      	ldrb	r3, [r7, #14]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d055      	beq.n	80068fc <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	2204      	movs	r2, #4
 8006854:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8006858:	e050      	b.n	80068fc <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	3340      	adds	r3, #64	; 0x40
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 f860 	bl	8006926 <GetLineCoding>
 8006866:	4603      	mov	r3, r0
 8006868:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d126      	bne.n	80068be <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006882:	791b      	ldrb	r3, [r3, #4]
 8006884:	429a      	cmp	r2, r3
 8006886:	d13b      	bne.n	8006900 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006892:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006894:	429a      	cmp	r2, r3
 8006896:	d133      	bne.n	8006900 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068a2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d12b      	bne.n	8006900 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d124      	bne.n	8006900 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f95a 	bl	8006b70 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 80068bc:	e020      	b.n	8006900 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 80068be:	7bbb      	ldrb	r3, [r7, #14]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d01d      	beq.n	8006900 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2204      	movs	r2, #4
 80068c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80068cc:	e018      	b.n	8006900 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f867 	bl	80069a2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f000 f8dc 	bl	8006a92 <CDC_ProcessReception>
    break;
 80068da:	e014      	b.n	8006906 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80068dc:	2100      	movs	r1, #0
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fece 	bl	8007680 <USBH_ClrFeature>
 80068e4:	4603      	mov	r3, r0
 80068e6:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d10a      	bne.n	8006904 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80068f6:	e005      	b.n	8006904 <USBH_CDC_Process+0x120>

  default:
    break;
 80068f8:	bf00      	nop
 80068fa:	e004      	b.n	8006906 <USBH_CDC_Process+0x122>
    break;
 80068fc:	bf00      	nop
 80068fe:	e002      	b.n	8006906 <USBH_CDC_Process+0x122>
    break;
 8006900:	bf00      	nop
 8006902:	e000      	b.n	8006906 <USBH_CDC_Process+0x122>
    break;
 8006904:	bf00      	nop

  }

  return status;
 8006906:	7bfb      	ldrb	r3, [r7, #15]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3710      	adds	r7, #16
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	370c      	adds	r7, #12
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006926:	b580      	push	{r7, lr}
 8006928:	b082      	sub	sp, #8
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	22a1      	movs	r2, #161	; 0xa1
 8006934:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2221      	movs	r2, #33	; 0x21
 800693a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2207      	movs	r2, #7
 800694c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	2207      	movs	r2, #7
 8006952:	4619      	mov	r1, r3
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f001 f873 	bl	8007a40 <USBH_CtlReq>
 800695a:	4603      	mov	r3, r0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3708      	adds	r7, #8
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2221      	movs	r2, #33	; 0x21
 8006972:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2220      	movs	r2, #32
 8006978:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2207      	movs	r2, #7
 800698a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	2207      	movs	r2, #7
 8006990:	4619      	mov	r1, r3
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f001 f854 	bl	8007a40 <USBH_CtlReq>
 8006998:	4603      	mov	r3, r0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3708      	adds	r7, #8
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b086      	sub	sp, #24
 80069a6:	af02      	add	r7, sp, #8
 80069a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80069b0:	69db      	ldr	r3, [r3, #28]
 80069b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069b4:	2300      	movs	r3, #0
 80069b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d002      	beq.n	80069c8 <CDC_ProcessTransmission+0x26>
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d025      	beq.n	8006a12 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 80069c6:	e060      	b.n	8006a8a <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	8b12      	ldrh	r2, [r2, #24]
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d90c      	bls.n	80069ee <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	69d9      	ldr	r1, [r3, #28]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	8b1a      	ldrh	r2, [r3, #24]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	7b58      	ldrb	r0, [r3, #13]
 80069e0:	2301      	movs	r3, #1
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	4603      	mov	r3, r0
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f001 fa3b 	bl	8007e62 <USBH_BulkSendData>
 80069ec:	e00c      	b.n	8006a08 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80069f6:	b29a      	uxth	r2, r3
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	7b58      	ldrb	r0, [r3, #13]
 80069fc:	2301      	movs	r3, #1
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	4603      	mov	r3, r0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fa2d 	bl	8007e62 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a10:	e03b      	b.n	8006a8a <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	7b5b      	ldrb	r3, [r3, #13]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 fd49 	bl	80084b0 <USBH_LL_GetURBState>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006a22:	7afb      	ldrb	r3, [r7, #11]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d128      	bne.n	8006a7a <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	8b12      	ldrh	r2, [r2, #24]
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d90e      	bls.n	8006a52 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	8b12      	ldrh	r2, [r2, #24]
 8006a3c:	1a9a      	subs	r2, r3, r2
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	8b12      	ldrh	r2, [r2, #24]
 8006a4a:	441a      	add	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	61da      	str	r2, [r3, #28]
 8006a50:	e002      	b.n	8006a58 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a68:	e00e      	b.n	8006a88 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f868 	bl	8006b48 <USBH_CDC_TransmitCallback>
    break;
 8006a78:	e006      	b.n	8006a88 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006a7a:	7afb      	ldrb	r3, [r7, #11]
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d103      	bne.n	8006a88 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a88:	bf00      	nop
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3710      	adds	r7, #16
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b086      	sub	sp, #24
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006aa0:	69db      	ldr	r3, [r3, #28]
 8006aa2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d002      	beq.n	8006ab8 <CDC_ProcessReception+0x26>
 8006ab2:	2b04      	cmp	r3, #4
 8006ab4:	d00e      	beq.n	8006ad4 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006ab6:	e043      	b.n	8006b40 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	6a19      	ldr	r1, [r3, #32]
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	8b5a      	ldrh	r2, [r3, #26]
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	7b1b      	ldrb	r3, [r3, #12]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f001 f9f1 	bl	8007eac <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2204      	movs	r2, #4
 8006ace:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006ad2:	e035      	b.n	8006b40 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	7b1b      	ldrb	r3, [r3, #12]
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f001 fce8 	bl	80084b0 <USBH_LL_GetURBState>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006ae4:	7cfb      	ldrb	r3, [r7, #19]
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d129      	bne.n	8006b3e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	7b1b      	ldrb	r3, [r3, #12]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f001 fc4b 	bl	800838c <USBH_LL_GetLastXferSize>
 8006af6:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d016      	beq.n	8006b30 <CDC_ProcessReception+0x9e>
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	8b5b      	ldrh	r3, [r3, #26]
 8006b06:	461a      	mov	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d910      	bls.n	8006b30 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	1ad2      	subs	r2, r2, r3
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	6a1a      	ldr	r2, [r3, #32]
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	441a      	add	r2, r3
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b2e:	e006      	b.n	8006b3e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f80f 	bl	8006b5c <USBH_CDC_ReceiveCallback>
    break;
 8006b3e:	bf00      	nop
  }
}
 8006b40:	bf00      	nop
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]

}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]

}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	4613      	mov	r3, r2
 8006b90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e019      	b.n	8006bd0 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	79fa      	ldrb	r2, [r7, #7]
 8006ba0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f000 f80f 	bl	8006bd8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006bc8:	68f8      	ldr	r0, [r7, #12]
 8006bca:	f001 fb2d 	bl	8008228 <USBH_LL_Init>

  return USBH_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3710      	adds	r7, #16
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b085      	sub	sp, #20
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006be4:	e008      	b.n	8006bf8 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	32e0      	adds	r2, #224	; 0xe0
 8006bec:	2100      	movs	r1, #0
 8006bee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	60fb      	str	r3, [r7, #12]
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2b0e      	cmp	r3, #14
 8006bfc:	d9f3      	bls.n	8006be6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	60fb      	str	r3, [r7, #12]
 8006c02:	e009      	b.n	8006c18 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c0e:	2200      	movs	r2, #0
 8006c10:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	60fb      	str	r3, [r7, #12]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1e:	d3f1      	bcc.n	8006c04 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2240      	movs	r2, #64	; 0x40
 8006c44:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b085      	sub	sp, #20
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
 8006c72:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006c74:	2300      	movs	r3, #0
 8006c76:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d017      	beq.n	8006cae <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10f      	bne.n	8006ca8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c8e:	1c59      	adds	r1, r3, #1
 8006c90:	687a      	ldr	r2, [r7, #4]
 8006c92:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	33dc      	adds	r3, #220	; 0xdc
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	73fb      	strb	r3, [r7, #15]
 8006ca6:	e004      	b.n	8006cb2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006ca8:	2302      	movs	r3, #2
 8006caa:	73fb      	strb	r3, [r7, #15]
 8006cac:	e001      	b.n	8006cb2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006cae:	2302      	movs	r3, #2
 8006cb0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3714      	adds	r7, #20
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	460b      	mov	r3, r1
 8006cca:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006cd6:	78fa      	ldrb	r2, [r7, #3]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d204      	bcs.n	8006ce6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	78fa      	ldrb	r2, [r7, #3]
 8006ce0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006ce4:	e001      	b.n	8006cea <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3714      	adds	r7, #20
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	4608      	mov	r0, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	461a      	mov	r2, r3
 8006d06:	4603      	mov	r3, r0
 8006d08:	70fb      	strb	r3, [r7, #3]
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	70bb      	strb	r3, [r7, #2]
 8006d0e:	4613      	mov	r3, r2
 8006d10:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006d20:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d22:	e025      	b.n	8006d70 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	221a      	movs	r2, #26
 8006d28:	fb02 f303 	mul.w	r3, r2, r3
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4413      	add	r3, r2
 8006d32:	3302      	adds	r3, #2
 8006d34:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	795b      	ldrb	r3, [r3, #5]
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d002      	beq.n	8006d46 <USBH_FindInterface+0x4e>
 8006d40:	78fb      	ldrb	r3, [r7, #3]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d111      	bne.n	8006d6a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d4a:	78ba      	ldrb	r2, [r7, #2]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d002      	beq.n	8006d56 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d50:	78bb      	ldrb	r3, [r7, #2]
 8006d52:	2bff      	cmp	r3, #255	; 0xff
 8006d54:	d109      	bne.n	8006d6a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d5a:	787a      	ldrb	r2, [r7, #1]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d002      	beq.n	8006d66 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006d60:	787b      	ldrb	r3, [r7, #1]
 8006d62:	2bff      	cmp	r3, #255	; 0xff
 8006d64:	d101      	bne.n	8006d6a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006d66:	7dfb      	ldrb	r3, [r7, #23]
 8006d68:	e006      	b.n	8006d78 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006d6a:	7dfb      	ldrb	r3, [r7, #23]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d9d6      	bls.n	8006d24 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006d76:	23ff      	movs	r3, #255	; 0xff
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	371c      	adds	r7, #28
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f001 fa87 	bl	80082a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006d92:	2101      	movs	r1, #1
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f001 fb9e 	bl	80084d6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b088      	sub	sp, #32
 8006da8:	af04      	add	r7, sp, #16
 8006daa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006dac:	2302      	movs	r3, #2
 8006dae:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 faec 	bl	8007392 <USBH_IsPortEnabled>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10c      	bne.n	8006dda <USBH_Process+0x36>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d007      	beq.n	8006dda <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	2b03      	cmp	r3, #3
 8006dd2:	d002      	beq.n	8006dda <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2203      	movs	r2, #3
 8006dd8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b0b      	cmp	r3, #11
 8006de2:	f200 814c 	bhi.w	800707e <USBH_Process+0x2da>
 8006de6:	a201      	add	r2, pc, #4	; (adr r2, 8006dec <USBH_Process+0x48>)
 8006de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dec:	08006e1d 	.word	0x08006e1d
 8006df0:	08006e3f 	.word	0x08006e3f
 8006df4:	08006e53 	.word	0x08006e53
 8006df8:	08007059 	.word	0x08007059
 8006dfc:	0800707f 	.word	0x0800707f
 8006e00:	08006ee1 	.word	0x08006ee1
 8006e04:	0800700f 	.word	0x0800700f
 8006e08:	08006f11 	.word	0x08006f11
 8006e0c:	08006f31 	.word	0x08006f31
 8006e10:	08006f51 	.word	0x08006f51
 8006e14:	08006f7f 	.word	0x08006f7f
 8006e18:	08007041 	.word	0x08007041
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	f000 812c 	beq.w	8007082 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006e30:	20c8      	movs	r0, #200	; 0xc8
 8006e32:	f001 fb9a 	bl	800856a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f001 fa8d 	bl	8008356 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006e3c:	e121      	b.n	8007082 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	f040 811e 	bne.w	8007086 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2202      	movs	r2, #2
 8006e4e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006e50:	e119      	b.n	8007086 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006e52:	2064      	movs	r0, #100	; 0x64
 8006e54:	f001 fb89 	bl	800856a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f001 fa57 	bl	800830c <USBH_LL_GetSpeed>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2205      	movs	r2, #5
 8006e6c:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006e6e:	2100      	movs	r1, #0
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f001 f868 	bl	8007f46 <USBH_AllocPipe>
 8006e76:	4603      	mov	r3, r0
 8006e78:	461a      	mov	r2, r3
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006e7e:	2180      	movs	r1, #128	; 0x80
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f001 f860 	bl	8007f46 <USBH_AllocPipe>
 8006e86:	4603      	mov	r3, r0
 8006e88:	461a      	mov	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	7919      	ldrb	r1, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006ea2:	b292      	uxth	r2, r2
 8006ea4:	9202      	str	r2, [sp, #8]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	9201      	str	r2, [sp, #4]
 8006eaa:	9300      	str	r3, [sp, #0]
 8006eac:	4603      	mov	r3, r0
 8006eae:	2280      	movs	r2, #128	; 0x80
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 f819 	bl	8007ee8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	7959      	ldrb	r1, [r3, #5]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006eca:	b292      	uxth	r2, r2
 8006ecc:	9202      	str	r2, [sp, #8]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	9201      	str	r2, [sp, #4]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f001 f805 	bl	8007ee8 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ede:	e0e3      	b.n	80070a8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f8e7 	bl	80070b4 <USBH_HandleEnum>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	f040 80ce 	bne.w	800708a <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d103      	bne.n	8006f08 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2208      	movs	r2, #8
 8006f04:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006f06:	e0c0      	b.n	800708a <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2207      	movs	r2, #7
 8006f0c:	701a      	strb	r2, [r3, #0]
    break;
 8006f0e:	e0bc      	b.n	800708a <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80b9 	beq.w	800708e <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f22:	2101      	movs	r1, #1
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2208      	movs	r2, #8
 8006f2c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f2e:	e0ae      	b.n	800708e <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006f36:	b29b      	uxth	r3, r3
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 fb59 	bl	80075f2 <USBH_SetCfg>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 80a5 	bne.w	8007092 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2209      	movs	r2, #9
 8006f4c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f4e:	e0a0      	b.n	8007092 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00b      	beq.n	8006f76 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006f5e:	2101      	movs	r1, #1
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 fb69 	bl	8007638 <USBH_SetFeature>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8094 	bne.w	8007096 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	220a      	movs	r2, #10
 8006f72:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f74:	e08f      	b.n	8007096 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	220a      	movs	r2, #10
 8006f7a:	701a      	strb	r2, [r3, #0]
    break;
 8006f7c:	e08b      	b.n	8007096 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f000 8088 	beq.w	800709a <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006f92:	2300      	movs	r3, #0
 8006f94:	73fb      	strb	r3, [r7, #15]
 8006f96:	e017      	b.n	8006fc8 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006f98:	7bfb      	ldrb	r3, [r7, #15]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	33dc      	adds	r3, #220	; 0xdc
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	4413      	add	r3, r2
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	791a      	ldrb	r2, [r3, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d108      	bne.n	8006fc2 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8006fb0:	7bfb      	ldrb	r3, [r7, #15]
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	33dc      	adds	r3, #220	; 0xdc
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0e4      	beq.n	8006f98 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d016      	beq.n	8007006 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2206      	movs	r2, #6
 8006fee:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006ff6:	2103      	movs	r1, #3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006ffc:	e04d      	b.n	800709a <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	220d      	movs	r2, #13
 8007002:	701a      	strb	r2, [r3, #0]
    break;
 8007004:	e049      	b.n	800709a <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	220d      	movs	r2, #13
 800700a:	701a      	strb	r2, [r3, #0]
    break;
 800700c:	e045      	b.n	800709a <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00f      	beq.n	8007038 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
 8007024:	4603      	mov	r3, r0
 8007026:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d136      	bne.n	800709e <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	220b      	movs	r2, #11
 8007034:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007036:	e032      	b.n	800709e <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	220d      	movs	r2, #13
 800703c:	701a      	strb	r2, [r3, #0]
    break;
 800703e:	e02e      	b.n	800709e <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007046:	2b00      	cmp	r3, #0
 8007048:	d02b      	beq.n	80070a2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007050:	695b      	ldr	r3, [r3, #20]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
    }
    break;
 8007056:	e024      	b.n	80070a2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f7ff fdbd 	bl	8006bd8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007064:	2b00      	cmp	r3, #0
 8007066:	d01e      	beq.n	80070a6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
      phost->pActiveClass = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800707c:	e013      	b.n	80070a6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 800707e:	bf00      	nop
 8007080:	e012      	b.n	80070a8 <USBH_Process+0x304>
    break;
 8007082:	bf00      	nop
 8007084:	e010      	b.n	80070a8 <USBH_Process+0x304>
    break;
 8007086:	bf00      	nop
 8007088:	e00e      	b.n	80070a8 <USBH_Process+0x304>
    break;
 800708a:	bf00      	nop
 800708c:	e00c      	b.n	80070a8 <USBH_Process+0x304>
    break;
 800708e:	bf00      	nop
 8007090:	e00a      	b.n	80070a8 <USBH_Process+0x304>
    break;
 8007092:	bf00      	nop
 8007094:	e008      	b.n	80070a8 <USBH_Process+0x304>
    break;
 8007096:	bf00      	nop
 8007098:	e006      	b.n	80070a8 <USBH_Process+0x304>
    break;
 800709a:	bf00      	nop
 800709c:	e004      	b.n	80070a8 <USBH_Process+0x304>
    break;
 800709e:	bf00      	nop
 80070a0:	e002      	b.n	80070a8 <USBH_Process+0x304>
    break;
 80070a2:	bf00      	nop
 80070a4:	e000      	b.n	80070a8 <USBH_Process+0x304>
    break;
 80070a6:	bf00      	nop
  }
 return USBH_OK;
 80070a8:	2300      	movs	r3, #0
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop

080070b4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af04      	add	r7, sp, #16
 80070ba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80070bc:	2301      	movs	r3, #1
 80070be:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	785b      	ldrb	r3, [r3, #1]
 80070c4:	2b07      	cmp	r3, #7
 80070c6:	f200 80f8 	bhi.w	80072ba <USBH_HandleEnum+0x206>
 80070ca:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <USBH_HandleEnum+0x1c>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	080070f1 	.word	0x080070f1
 80070d4:	08007163 	.word	0x08007163
 80070d8:	0800717b 	.word	0x0800717b
 80070dc:	080071f1 	.word	0x080071f1
 80070e0:	08007207 	.word	0x08007207
 80070e4:	08007223 	.word	0x08007223
 80070e8:	08007257 	.word	0x08007257
 80070ec:	0800728b 	.word	0x0800728b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 80070f0:	2108      	movs	r1, #8
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 f9ad 	bl	8007452 <USBH_Get_DevDesc>
 80070f8:	4603      	mov	r3, r0
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 80df 	bne.w	80072be <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	7919      	ldrb	r1, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007124:	b292      	uxth	r2, r2
 8007126:	9202      	str	r2, [sp, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	4603      	mov	r3, r0
 8007130:	2280      	movs	r2, #128	; 0x80
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 fed8 	bl	8007ee8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	7959      	ldrb	r1, [r3, #5]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800714c:	b292      	uxth	r2, r2
 800714e:	9202      	str	r2, [sp, #8]
 8007150:	2200      	movs	r2, #0
 8007152:	9201      	str	r2, [sp, #4]
 8007154:	9300      	str	r3, [sp, #0]
 8007156:	4603      	mov	r3, r0
 8007158:	2200      	movs	r2, #0
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fec4 	bl	8007ee8 <USBH_OpenPipe>

    }
    break;
 8007160:	e0ad      	b.n	80072be <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 8007162:	2112      	movs	r1, #18
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f974 	bl	8007452 <USBH_Get_DevDesc>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	f040 80a8 	bne.w	80072c2 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2202      	movs	r2, #2
 8007176:	705a      	strb	r2, [r3, #1]

    }
    break;
 8007178:	e0a3      	b.n	80072c2 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800717a:	2101      	movs	r1, #1
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f000 fa14 	bl	80075aa <USBH_SetAddress>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 809e 	bne.w	80072c6 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 800718a:	2002      	movs	r0, #2
 800718c:	f001 f9ed 	bl	800856a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2203      	movs	r2, #3
 800719c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	7919      	ldrb	r1, [r3, #4]
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80071b2:	b292      	uxth	r2, r2
 80071b4:	9202      	str	r2, [sp, #8]
 80071b6:	2200      	movs	r2, #0
 80071b8:	9201      	str	r2, [sp, #4]
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4603      	mov	r3, r0
 80071be:	2280      	movs	r2, #128	; 0x80
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fe91 	bl	8007ee8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	7959      	ldrb	r1, [r3, #5]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80071da:	b292      	uxth	r2, r2
 80071dc:	9202      	str	r2, [sp, #8]
 80071de:	2200      	movs	r2, #0
 80071e0:	9201      	str	r2, [sp, #4]
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	4603      	mov	r3, r0
 80071e6:	2200      	movs	r2, #0
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 fe7d 	bl	8007ee8 <USBH_OpenPipe>
    }
    break;
 80071ee:	e06a      	b.n	80072c6 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 80071f0:	2109      	movs	r1, #9
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f955 	bl	80074a2 <USBH_Get_CfgDesc>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d165      	bne.n	80072ca <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2204      	movs	r2, #4
 8007202:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007204:	e061      	b.n	80072ca <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f947 	bl	80074a2 <USBH_Get_CfgDesc>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d159      	bne.n	80072ce <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2205      	movs	r2, #5
 800721e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007220:	e055      	b.n	80072ce <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007228:	2b00      	cmp	r3, #0
 800722a:	d010      	beq.n	800724e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007238:	23ff      	movs	r3, #255	; 0xff
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f000 f955 	bl	80074ea <USBH_Get_StringDesc>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d145      	bne.n	80072d2 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2206      	movs	r2, #6
 800724a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800724c:	e041      	b.n	80072d2 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2206      	movs	r2, #6
 8007252:	705a      	strb	r2, [r3, #1]
    break;
 8007254:	e03d      	b.n	80072d2 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800725c:	2b00      	cmp	r3, #0
 800725e:	d010      	beq.n	8007282 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800726c:	23ff      	movs	r3, #255	; 0xff
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f93b 	bl	80074ea <USBH_Get_StringDesc>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d12d      	bne.n	80072d6 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2207      	movs	r2, #7
 800727e:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007280:	e029      	b.n	80072d6 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2207      	movs	r2, #7
 8007286:	705a      	strb	r2, [r3, #1]
    break;
 8007288:	e025      	b.n	80072d6 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8007290:	2b00      	cmp	r3, #0
 8007292:	d00f      	beq.n	80072b4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072a0:	23ff      	movs	r3, #255	; 0xff
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f921 	bl	80074ea <USBH_Get_StringDesc>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d115      	bne.n	80072da <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80072b2:	e012      	b.n	80072da <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
    break;
 80072b8:	e00f      	b.n	80072da <USBH_HandleEnum+0x226>

  default:
    break;
 80072ba:	bf00      	nop
 80072bc:	e00e      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072be:	bf00      	nop
 80072c0:	e00c      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072c2:	bf00      	nop
 80072c4:	e00a      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072c6:	bf00      	nop
 80072c8:	e008      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072ca:	bf00      	nop
 80072cc:	e006      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072ce:	bf00      	nop
 80072d0:	e004      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072d2:	bf00      	nop
 80072d4:	e002      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072d6:	bf00      	nop
 80072d8:	e000      	b.n	80072dc <USBH_HandleEnum+0x228>
    break;
 80072da:	bf00      	nop
  }
  return Status;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop

080072e8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 80072fa:	bf00      	nop
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007306:	b580      	push	{r7, lr}
 8007308:	b082      	sub	sp, #8
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007314:	1c5a      	adds	r2, r3, #1
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f804 	bl	800732a <USBH_HandleSof>
}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b082      	sub	sp, #8
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	2b0b      	cmp	r3, #11
 800733a:	d10a      	bne.n	8007352 <USBH_HandleSof+0x28>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007342:	2b00      	cmp	r3, #0
 8007344:	d005      	beq.n	8007352 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	4798      	blx	r3
  }
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800735a:	b480      	push	{r7}
 800735c:	b083      	sub	sp, #12
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800736a:	bf00      	nop
}
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8007376:	b480      	push	{r7}
 8007378:	b083      	sub	sp, #12
 800737a:	af00      	add	r7, sp, #0
 800737c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8007386:	bf00      	nop
}
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10f      	bne.n	80073de <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00e      	beq.n	80073ee <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80073d6:	2104      	movs	r1, #4
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
 80073dc:	e007      	b.n	80073ee <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3708      	adds	r7, #8
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 ff68 	bl	80082d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	791b      	ldrb	r3, [r3, #4]
 800740a:	4619      	mov	r1, r3
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fdb8 	bl	8007f82 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	795b      	ldrb	r3, [r3, #5]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 fdb2 	bl	8007f82 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800742c:	2b00      	cmp	r3, #0
 800742e:	d005      	beq.n	800743c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007436:	2105      	movs	r1, #5
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 ff2f 	bl	80082a0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2203      	movs	r2, #3
 8007446:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af02      	add	r7, sp, #8
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	460b      	mov	r3, r1
 800745c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	b29b      	uxth	r3, r3
 8007468:	9300      	str	r3, [sp, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 f864 	bl	8007540 <USBH_GetDescriptor>
 8007478:	4603      	mov	r3, r0
 800747a:	73fb      	strb	r3, [r7, #15]
 800747c:	7bfb      	ldrb	r3, [r7, #15]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d10a      	bne.n	8007498 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f203 3022 	addw	r0, r3, #802	; 0x322
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800748e:	78fa      	ldrb	r2, [r7, #3]
 8007490:	b292      	uxth	r2, r2
 8007492:	4619      	mov	r1, r3
 8007494:	f000 f918 	bl	80076c8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 8007498:	7bfb      	ldrb	r3, [r7, #15]
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af02      	add	r7, sp, #8
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	331c      	adds	r3, #28
 80074b2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80074b4:	887b      	ldrh	r3, [r7, #2]
 80074b6:	9300      	str	r3, [sp, #0]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074be:	2100      	movs	r1, #0
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f83d 	bl	8007540 <USBH_GetDescriptor>
 80074c6:	4603      	mov	r3, r0
 80074c8:	72fb      	strb	r3, [r7, #11]
 80074ca:	7afb      	ldrb	r3, [r7, #11]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d107      	bne.n	80074e0 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	f503 734d 	add.w	r3, r3, #820	; 0x334
 80074d6:	887a      	ldrh	r2, [r7, #2]
 80074d8:	68f9      	ldr	r1, [r7, #12]
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f964 	bl	80077a8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 80074e0:	7afb      	ldrb	r3, [r7, #11]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}

080074ea <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b088      	sub	sp, #32
 80074ee:	af02      	add	r7, sp, #8
 80074f0:	60f8      	str	r0, [r7, #12]
 80074f2:	607a      	str	r2, [r7, #4]
 80074f4:	461a      	mov	r2, r3
 80074f6:	460b      	mov	r3, r1
 80074f8:	72fb      	strb	r3, [r7, #11]
 80074fa:	4613      	mov	r3, r2
 80074fc:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 80074fe:	7afb      	ldrb	r3, [r7, #11]
 8007500:	b29b      	uxth	r3, r3
 8007502:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007506:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800750e:	893b      	ldrh	r3, [r7, #8]
 8007510:	9300      	str	r3, [sp, #0]
 8007512:	460b      	mov	r3, r1
 8007514:	2100      	movs	r1, #0
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f000 f812 	bl	8007540 <USBH_GetDescriptor>
 800751c:	4603      	mov	r3, r0
 800751e:	75fb      	strb	r3, [r7, #23]
 8007520:	7dfb      	ldrb	r3, [r7, #23]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d107      	bne.n	8007536 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800752c:	893a      	ldrh	r2, [r7, #8]
 800752e:	6879      	ldr	r1, [r7, #4]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 fa37 	bl	80079a4 <USBH_ParseStringDesc>
  }
  return status;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3718      	adds	r7, #24
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	460b      	mov	r3, r1
 800754c:	72fb      	strb	r3, [r7, #11]
 800754e:	4613      	mov	r3, r2
 8007550:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	789b      	ldrb	r3, [r3, #2]
 8007556:	2b01      	cmp	r3, #1
 8007558:	d11c      	bne.n	8007594 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800755a:	7afb      	ldrb	r3, [r7, #11]
 800755c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007560:	b2da      	uxtb	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2206      	movs	r2, #6
 800756a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	893a      	ldrh	r2, [r7, #8]
 8007570:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007572:	893b      	ldrh	r3, [r7, #8]
 8007574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007578:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800757c:	d104      	bne.n	8007588 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f240 4209 	movw	r2, #1033	; 0x409
 8007584:	829a      	strh	r2, [r3, #20]
 8007586:	e002      	b.n	800758e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8b3a      	ldrh	r2, [r7, #24]
 8007592:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 8007594:	8b3b      	ldrh	r3, [r7, #24]
 8007596:	461a      	mov	r2, r3
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f000 fa50 	bl	8007a40 <USBH_CtlReq>
 80075a0:	4603      	mov	r3, r0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3710      	adds	r7, #16
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}

080075aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075aa:	b580      	push	{r7, lr}
 80075ac:	b082      	sub	sp, #8
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	789b      	ldrb	r3, [r3, #2]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d10f      	bne.n	80075de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2205      	movs	r2, #5
 80075c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075ca:	78fb      	ldrb	r3, [r7, #3]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80075de:	2200      	movs	r2, #0
 80075e0:	2100      	movs	r1, #0
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 fa2c 	bl	8007a40 <USBH_CtlReq>
 80075e8:	4603      	mov	r3, r0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3708      	adds	r7, #8
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}

080075f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80075f2:	b580      	push	{r7, lr}
 80075f4:	b082      	sub	sp, #8
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
 80075fa:	460b      	mov	r3, r1
 80075fc:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	789b      	ldrb	r3, [r3, #2]
 8007602:	2b01      	cmp	r3, #1
 8007604:	d10e      	bne.n	8007624 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2209      	movs	r2, #9
 8007610:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	887a      	ldrh	r2, [r7, #2]
 8007616:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007624:	2200      	movs	r2, #0
 8007626:	2100      	movs	r1, #0
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f000 fa09 	bl	8007a40 <USBH_CtlReq>
 800762e:	4603      	mov	r3, r0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	789b      	ldrb	r3, [r3, #2]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d10f      	bne.n	800766c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2203      	movs	r2, #3
 8007656:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	b29a      	uxth	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800766c:	2200      	movs	r2, #0
 800766e:	2100      	movs	r1, #0
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f9e5 	bl	8007a40 <USBH_CtlReq>
 8007676:	4603      	mov	r3, r0
}
 8007678:	4618      	mov	r0, r3
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}

08007680 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	789b      	ldrb	r3, [r3, #2]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10f      	bne.n	80076b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	2202      	movs	r2, #2
 8007698:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076a6:	78fb      	ldrb	r3, [r7, #3]
 80076a8:	b29a      	uxth	r2, r3
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80076b4:	2200      	movs	r2, #0
 80076b6:	2100      	movs	r1, #0
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f9c1 	bl	8007a40 <USBH_CtlReq>
 80076be:	4603      	mov	r3, r0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	781a      	ldrb	r2, [r3, #0]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	785a      	ldrb	r2, [r3, #1]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	3302      	adds	r3, #2
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	b29a      	uxth	r2, r3
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	3303      	adds	r3, #3
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	021b      	lsls	r3, r3, #8
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	4313      	orrs	r3, r2
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	791a      	ldrb	r2, [r3, #4]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	795a      	ldrb	r2, [r3, #5]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	799a      	ldrb	r2, [r3, #6]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	79da      	ldrb	r2, [r3, #7]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007722:	88fb      	ldrh	r3, [r7, #6]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d939      	bls.n	800779c <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	3308      	adds	r3, #8
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	b29a      	uxth	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	3309      	adds	r3, #9
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	b29b      	uxth	r3, r3
 8007738:	021b      	lsls	r3, r3, #8
 800773a:	b29b      	uxth	r3, r3
 800773c:	4313      	orrs	r3, r2
 800773e:	b29a      	uxth	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	330a      	adds	r3, #10
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	b29a      	uxth	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	330b      	adds	r3, #11
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	021b      	lsls	r3, r3, #8
 8007756:	b29b      	uxth	r3, r3
 8007758:	4313      	orrs	r3, r2
 800775a:	b29a      	uxth	r2, r3
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	330c      	adds	r3, #12
 8007764:	781b      	ldrb	r3, [r3, #0]
 8007766:	b29a      	uxth	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	330d      	adds	r3, #13
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	b29b      	uxth	r3, r3
 8007770:	021b      	lsls	r3, r3, #8
 8007772:	b29b      	uxth	r3, r3
 8007774:	4313      	orrs	r3, r2
 8007776:	b29a      	uxth	r2, r3
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7b9a      	ldrb	r2, [r3, #14]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	7bda      	ldrb	r2, [r3, #15]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	7c1a      	ldrb	r2, [r3, #16]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	7c5a      	ldrb	r2, [r3, #17]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	745a      	strb	r2, [r3, #17]
  }
}
 800779c:	bf00      	nop
 800779e:	3714      	adds	r7, #20
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	4613      	mov	r3, r2
 80077b4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	781a      	ldrb	r2, [r3, #0]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	785a      	ldrb	r2, [r3, #1]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	3302      	adds	r3, #2
 80077de:	781b      	ldrb	r3, [r3, #0]
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	3303      	adds	r3, #3
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	4313      	orrs	r3, r2
 80077f0:	b29a      	uxth	r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	791a      	ldrb	r2, [r3, #4]
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	795a      	ldrb	r2, [r3, #5]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	799a      	ldrb	r2, [r3, #6]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	79da      	ldrb	r2, [r3, #7]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	7a1a      	ldrb	r2, [r3, #8]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2b09      	cmp	r3, #9
 8007822:	d95f      	bls.n	80078e4 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007824:	2309      	movs	r3, #9
 8007826:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007828:	2300      	movs	r3, #0
 800782a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800782c:	e051      	b.n	80078d2 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800782e:	f107 0316 	add.w	r3, r7, #22
 8007832:	4619      	mov	r1, r3
 8007834:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007836:	f000 f8e8 	bl	8007a0a <USBH_GetNextDesc>
 800783a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	785b      	ldrb	r3, [r3, #1]
 8007840:	2b04      	cmp	r3, #4
 8007842:	d146      	bne.n	80078d2 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007844:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007848:	221a      	movs	r2, #26
 800784a:	fb02 f303 	mul.w	r3, r2, r3
 800784e:	3308      	adds	r3, #8
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	3302      	adds	r3, #2
 8007856:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8007858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800785a:	69f8      	ldr	r0, [r7, #28]
 800785c:	f000 f846 	bl	80078ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007866:	2300      	movs	r3, #0
 8007868:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800786a:	e022      	b.n	80078b2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800786c:	f107 0316 	add.w	r3, r7, #22
 8007870:	4619      	mov	r1, r3
 8007872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007874:	f000 f8c9 	bl	8007a0a <USBH_GetNextDesc>
 8007878:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800787a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787c:	785b      	ldrb	r3, [r3, #1]
 800787e:	2b05      	cmp	r3, #5
 8007880:	d117      	bne.n	80078b2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007882:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007886:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800788a:	3201      	adds	r2, #1
 800788c:	00d2      	lsls	r2, r2, #3
 800788e:	211a      	movs	r1, #26
 8007890:	fb01 f303 	mul.w	r3, r1, r3
 8007894:	4413      	add	r3, r2
 8007896:	3308      	adds	r3, #8
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	4413      	add	r3, r2
 800789c:	3304      	adds	r3, #4
 800789e:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80078a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078a2:	69b8      	ldr	r0, [r7, #24]
 80078a4:	f000 f851 	bl	800794a <USBH_ParseEPDesc>
            ep_ix++;
 80078a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078ac:	3301      	adds	r3, #1
 80078ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	791b      	ldrb	r3, [r3, #4]
 80078b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d204      	bcs.n	80078c8 <USBH_ParseCfgDesc+0x120>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	885a      	ldrh	r2, [r3, #2]
 80078c2:	8afb      	ldrh	r3, [r7, #22]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d8d1      	bhi.n	800786c <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80078c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078cc:	3301      	adds	r3, #1
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d6:	2b01      	cmp	r3, #1
 80078d8:	d804      	bhi.n	80078e4 <USBH_ParseCfgDesc+0x13c>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	885a      	ldrh	r2, [r3, #2]
 80078de:	8afb      	ldrh	r3, [r7, #22]
 80078e0:	429a      	cmp	r2, r3
 80078e2:	d8a4      	bhi.n	800782e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	bd80      	pop	{r7, pc}

080078ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	781a      	ldrb	r2, [r3, #0]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	785a      	ldrb	r2, [r3, #1]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	789a      	ldrb	r2, [r3, #2]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	78da      	ldrb	r2, [r3, #3]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	791a      	ldrb	r2, [r3, #4]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	795a      	ldrb	r2, [r3, #5]
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	799a      	ldrb	r2, [r3, #6]
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	79da      	ldrb	r2, [r3, #7]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	7a1a      	ldrb	r2, [r3, #8]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	721a      	strb	r2, [r3, #8]
}
 800793e:	bf00      	nop
 8007940:	370c      	adds	r7, #12
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800794a:	b480      	push	{r7}
 800794c:	b083      	sub	sp, #12
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781a      	ldrb	r2, [r3, #0]
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	785a      	ldrb	r2, [r3, #1]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	789a      	ldrb	r2, [r3, #2]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	78da      	ldrb	r2, [r3, #3]
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	3304      	adds	r3, #4
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	b29a      	uxth	r2, r3
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	3305      	adds	r3, #5
 8007980:	781b      	ldrb	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	b29b      	uxth	r3, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	799a      	ldrb	r2, [r3, #6]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	719a      	strb	r2, [r3, #6]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b087      	sub	sp, #28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3301      	adds	r3, #1
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d120      	bne.n	80079fe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	1e9a      	subs	r2, r3, #2
 80079c2:	88fb      	ldrh	r3, [r7, #6]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	bf28      	it	cs
 80079c8:	4613      	movcs	r3, r2
 80079ca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3302      	adds	r3, #2
 80079d0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80079d2:	2300      	movs	r3, #0
 80079d4:	82fb      	strh	r3, [r7, #22]
 80079d6:	e00b      	b.n	80079f0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80079d8:	8afb      	ldrh	r3, [r7, #22]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	781a      	ldrb	r2, [r3, #0]
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80079ea:	8afb      	ldrh	r3, [r7, #22]
 80079ec:	3302      	adds	r3, #2
 80079ee:	82fb      	strh	r3, [r7, #22]
 80079f0:	8afa      	ldrh	r2, [r7, #22]
 80079f2:	8abb      	ldrh	r3, [r7, #20]
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d3ef      	bcc.n	80079d8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2200      	movs	r2, #0
 80079fc:	701a      	strb	r2, [r3, #0]
  }
}
 80079fe:	bf00      	nop
 8007a00:	371c      	adds	r7, #28
 8007a02:	46bd      	mov	sp, r7
 8007a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a08:	4770      	bx	lr

08007a0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a0a:	b480      	push	{r7}
 8007a0c:	b085      	sub	sp, #20
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	881a      	ldrh	r2, [r3, #0]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	4413      	add	r3, r2
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4413      	add	r3, r2
 8007a30:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007a32:	68fb      	ldr	r3, [r7, #12]
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3714      	adds	r7, #20
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	60b9      	str	r1, [r7, #8]
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	789b      	ldrb	r3, [r3, #2]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d002      	beq.n	8007a60 <USBH_CtlReq+0x20>
 8007a5a:	2b02      	cmp	r3, #2
 8007a5c:	d00f      	beq.n	8007a7e <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007a5e:	e034      	b.n	8007aca <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	88fa      	ldrh	r2, [r7, #6]
 8007a6a:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2202      	movs	r2, #2
 8007a76:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	75fb      	strb	r3, [r7, #23]
    break;
 8007a7c:	e025      	b.n	8007aca <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	f000 f828 	bl	8007ad4 <USBH_HandleControl>
 8007a84:	4603      	mov	r3, r0
 8007a86:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007a88:	7dfb      	ldrb	r3, [r7, #23]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d108      	bne.n	8007aa0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2201      	movs	r2, #1
 8007a92:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2200      	movs	r2, #0
 8007a98:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	75fb      	strb	r3, [r7, #23]
    break;
 8007a9e:	e013      	b.n	8007ac8 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007aa0:	7dfb      	ldrb	r3, [r7, #23]
 8007aa2:	2b03      	cmp	r3, #3
 8007aa4:	d108      	bne.n	8007ab8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007ab2:	2303      	movs	r3, #3
 8007ab4:	75fb      	strb	r3, [r7, #23]
    break;
 8007ab6:	e007      	b.n	8007ac8 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	2b02      	cmp	r3, #2
 8007abc:	d104      	bne.n	8007ac8 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	75fb      	strb	r3, [r7, #23]
    break;
 8007ac8:	bf00      	nop
  }
  return status;
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3718      	adds	r7, #24
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b086      	sub	sp, #24
 8007ad8:	af02      	add	r7, sp, #8
 8007ada:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	7e1b      	ldrb	r3, [r3, #24]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	2b0a      	cmp	r3, #10
 8007aec:	f200 814c 	bhi.w	8007d88 <USBH_HandleControl+0x2b4>
 8007af0:	a201      	add	r2, pc, #4	; (adr r2, 8007af8 <USBH_HandleControl+0x24>)
 8007af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af6:	bf00      	nop
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	08007b3f 	.word	0x08007b3f
 8007b00:	08007ba9 	.word	0x08007ba9
 8007b04:	08007bcf 	.word	0x08007bcf
 8007b08:	08007c07 	.word	0x08007c07
 8007b0c:	08007c33 	.word	0x08007c33
 8007b10:	08007c85 	.word	0x08007c85
 8007b14:	08007ca7 	.word	0x08007ca7
 8007b18:	08007ce3 	.word	0x08007ce3
 8007b1c:	08007d0b 	.word	0x08007d0b
 8007b20:	08007d49 	.word	0x08007d49
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f103 0110 	add.w	r1, r3, #16
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	795b      	ldrb	r3, [r3, #5]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f939 	bl	8007da8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2202      	movs	r2, #2
 8007b3a:	761a      	strb	r2, [r3, #24]
    break;
 8007b3c:	e12f      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	795b      	ldrb	r3, [r3, #5]
 8007b42:	4619      	mov	r1, r3
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 fcb3 	bl	80084b0 <USBH_LL_GetURBState>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d11e      	bne.n	8007b92 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	7c1b      	ldrb	r3, [r3, #16]
 8007b58:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b5c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	8adb      	ldrh	r3, [r3, #22]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007b66:	7b7b      	ldrb	r3, [r7, #13]
 8007b68:	2b80      	cmp	r3, #128	; 0x80
 8007b6a:	d103      	bne.n	8007b74 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2203      	movs	r2, #3
 8007b70:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007b72:	e10b      	b.n	8007d8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2205      	movs	r2, #5
 8007b78:	761a      	strb	r2, [r3, #24]
    break;
 8007b7a:	e107      	b.n	8007d8c <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007b7c:	7b7b      	ldrb	r3, [r7, #13]
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d103      	bne.n	8007b8a <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2209      	movs	r2, #9
 8007b86:	761a      	strb	r2, [r3, #24]
    break;
 8007b88:	e100      	b.n	8007d8c <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2207      	movs	r2, #7
 8007b8e:	761a      	strb	r2, [r3, #24]
    break;
 8007b90:	e0fc      	b.n	8007d8c <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b92:	7bbb      	ldrb	r3, [r7, #14]
 8007b94:	2b04      	cmp	r3, #4
 8007b96:	d003      	beq.n	8007ba0 <USBH_HandleControl+0xcc>
 8007b98:	7bbb      	ldrb	r3, [r7, #14]
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	f040 80f6 	bne.w	8007d8c <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	220b      	movs	r2, #11
 8007ba4:	761a      	strb	r2, [r3, #24]
    break;
 8007ba6:	e0f1      	b.n	8007d8c <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6899      	ldr	r1, [r3, #8]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	899a      	ldrh	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	791b      	ldrb	r3, [r3, #4]
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 f930 	bl	8007e26 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	761a      	strb	r2, [r3, #24]
    break;
 8007bcc:	e0e7      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	791b      	ldrb	r3, [r3, #4]
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 fc6b 	bl	80084b0 <USBH_LL_GetURBState>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d102      	bne.n	8007bea <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2209      	movs	r2, #9
 8007be8:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b05      	cmp	r3, #5
 8007bee:	d102      	bne.n	8007bf6 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007bf0:	2303      	movs	r3, #3
 8007bf2:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bf4:	e0cc      	b.n	8007d90 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007bf6:	7bbb      	ldrb	r3, [r7, #14]
 8007bf8:	2b04      	cmp	r3, #4
 8007bfa:	f040 80c9 	bne.w	8007d90 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	220b      	movs	r2, #11
 8007c02:	761a      	strb	r2, [r3, #24]
    break;
 8007c04:	e0c4      	b.n	8007d90 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	899a      	ldrh	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	7958      	ldrb	r0, [r3, #5]
 8007c12:	2301      	movs	r3, #1
 8007c14:	9300      	str	r3, [sp, #0]
 8007c16:	4603      	mov	r3, r0
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8df 	bl	8007ddc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2206      	movs	r2, #6
 8007c2e:	761a      	strb	r2, [r3, #24]
    break;
 8007c30:	e0b5      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	795b      	ldrb	r3, [r3, #5]
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fc39 	bl	80084b0 <USBH_LL_GetURBState>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007c42:	7bbb      	ldrb	r3, [r7, #14]
 8007c44:	2b01      	cmp	r3, #1
 8007c46:	d103      	bne.n	8007c50 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2207      	movs	r2, #7
 8007c4c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c4e:	e0a1      	b.n	8007d94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007c50:	7bbb      	ldrb	r3, [r7, #14]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	d105      	bne.n	8007c62 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	220c      	movs	r2, #12
 8007c5a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8007c60:	e098      	b.n	8007d94 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007c62:	7bbb      	ldrb	r3, [r7, #14]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d103      	bne.n	8007c70 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2205      	movs	r2, #5
 8007c6c:	761a      	strb	r2, [r3, #24]
    break;
 8007c6e:	e091      	b.n	8007d94 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	f040 808e 	bne.w	8007d94 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	220b      	movs	r2, #11
 8007c7c:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007c7e:	2302      	movs	r3, #2
 8007c80:	73fb      	strb	r3, [r7, #15]
    break;
 8007c82:	e087      	b.n	8007d94 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	791b      	ldrb	r3, [r3, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	2100      	movs	r1, #0
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8ca 	bl	8007e26 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2208      	movs	r2, #8
 8007ca2:	761a      	strb	r2, [r3, #24]

    break;
 8007ca4:	e07b      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	791b      	ldrb	r3, [r3, #4]
 8007caa:	4619      	mov	r1, r3
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 fbff 	bl	80084b0 <USBH_LL_GetURBState>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d105      	bne.n	8007cc8 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	220d      	movs	r2, #13
 8007cc0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007cc6:	e067      	b.n	8007d98 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007cc8:	7bbb      	ldrb	r3, [r7, #14]
 8007cca:	2b04      	cmp	r3, #4
 8007ccc:	d103      	bne.n	8007cd6 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	220b      	movs	r2, #11
 8007cd2:	761a      	strb	r2, [r3, #24]
    break;
 8007cd4:	e060      	b.n	8007d98 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
 8007cd8:	2b05      	cmp	r3, #5
 8007cda:	d15d      	bne.n	8007d98 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	e05a      	b.n	8007d98 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	795a      	ldrb	r2, [r3, #5]
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 f873 	bl	8007ddc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007cfc:	b29a      	uxth	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	220a      	movs	r2, #10
 8007d06:	761a      	strb	r2, [r3, #24]
    break;
 8007d08:	e049      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	795b      	ldrb	r3, [r3, #5]
 8007d0e:	4619      	mov	r1, r3
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 fbcd 	bl	80084b0 <USBH_LL_GetURBState>
 8007d16:	4603      	mov	r3, r0
 8007d18:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007d1a:	7bbb      	ldrb	r3, [r7, #14]
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d105      	bne.n	8007d2c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007d20:	2300      	movs	r3, #0
 8007d22:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	220d      	movs	r2, #13
 8007d28:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007d2a:	e037      	b.n	8007d9c <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007d2c:	7bbb      	ldrb	r3, [r7, #14]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d103      	bne.n	8007d3a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2209      	movs	r2, #9
 8007d36:	761a      	strb	r2, [r3, #24]
    break;
 8007d38:	e030      	b.n	8007d9c <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007d3a:	7bbb      	ldrb	r3, [r7, #14]
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d12d      	bne.n	8007d9c <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	220b      	movs	r2, #11
 8007d44:	761a      	strb	r2, [r3, #24]
    break;
 8007d46:	e029      	b.n	8007d9c <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	7e5b      	ldrb	r3, [r3, #25]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	b2da      	uxtb	r2, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	765a      	strb	r2, [r3, #25]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	7e5b      	ldrb	r3, [r3, #25]
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d809      	bhi.n	8007d70 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 faba 	bl	80082d6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007d6e:	e016      	b.n	8007d9e <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007d76:	2106      	movs	r1, #6
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007d82:	2302      	movs	r3, #2
 8007d84:	73fb      	strb	r3, [r7, #15]
    break;
 8007d86:	e00a      	b.n	8007d9e <USBH_HandleControl+0x2ca>

  default:
    break;
 8007d88:	bf00      	nop
 8007d8a:	e008      	b.n	8007d9e <USBH_HandleControl+0x2ca>
    break;
 8007d8c:	bf00      	nop
 8007d8e:	e006      	b.n	8007d9e <USBH_HandleControl+0x2ca>
    break;
 8007d90:	bf00      	nop
 8007d92:	e004      	b.n	8007d9e <USBH_HandleControl+0x2ca>
    break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <USBH_HandleControl+0x2ca>
    break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <USBH_HandleControl+0x2ca>
    break;
 8007d9c:	bf00      	nop
  }
  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af04      	add	r7, sp, #16
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007db6:	79f9      	ldrb	r1, [r7, #7]
 8007db8:	2300      	movs	r3, #0
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fb3e 	bl	800844e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e00:	7979      	ldrb	r1, [r7, #5]
 8007e02:	7e3b      	ldrb	r3, [r7, #24]
 8007e04:	9303      	str	r3, [sp, #12]
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	9302      	str	r3, [sp, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fb19 	bl	800844e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b088      	sub	sp, #32
 8007e2a:	af04      	add	r7, sp, #16
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	4611      	mov	r1, r2
 8007e32:	461a      	mov	r2, r3
 8007e34:	460b      	mov	r3, r1
 8007e36:	80fb      	strh	r3, [r7, #6]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e3c:	7979      	ldrb	r1, [r7, #5]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	9302      	str	r3, [sp, #8]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2201      	movs	r2, #1
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fafb 	bl	800844e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e58:	2300      	movs	r3, #0

}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af04      	add	r7, sp, #16
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	460b      	mov	r3, r1
 8007e72:	80fb      	strh	r3, [r7, #6]
 8007e74:	4613      	mov	r3, r2
 8007e76:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e86:	7979      	ldrb	r1, [r7, #5]
 8007e88:	7e3b      	ldrb	r3, [r7, #24]
 8007e8a:	9303      	str	r3, [sp, #12]
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	2301      	movs	r3, #1
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fad6 	bl	800844e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	461a      	mov	r2, r3
 8007eba:	460b      	mov	r3, r1
 8007ebc:	80fb      	strh	r3, [r7, #6]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007ec2:	7979      	ldrb	r1, [r7, #5]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fab8 	bl	800844e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af04      	add	r7, sp, #16
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	70fb      	strb	r3, [r7, #3]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70bb      	strb	r3, [r7, #2]
 8007efe:	4613      	mov	r3, r2
 8007f00:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007f02:	7878      	ldrb	r0, [r7, #1]
 8007f04:	78ba      	ldrb	r2, [r7, #2]
 8007f06:	78f9      	ldrb	r1, [r7, #3]
 8007f08:	8b3b      	ldrh	r3, [r7, #24]
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	7d3b      	ldrb	r3, [r7, #20]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	7c3b      	ldrb	r3, [r7, #16]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4603      	mov	r3, r0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa4b 	bl	80083b2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007f1c:	2300      	movs	r3, #0

}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa6a 	bl	8008410 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f3c:	2300      	movs	r3, #0

}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f831 	bl	8007fba <USBH_GetFreePipe>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f5c:	89fb      	ldrh	r3, [r7, #14]
 8007f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007f66:	78fb      	ldrb	r3, [r7, #3]
 8007f68:	89fa      	ldrh	r2, [r7, #14]
 8007f6a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	32e0      	adds	r2, #224	; 0xe0
 8007f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007f76:	89fb      	ldrh	r3, [r7, #14]
 8007f78:	b2db      	uxtb	r3, r3
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007f8e:	78fb      	ldrb	r3, [r7, #3]
 8007f90:	2b0a      	cmp	r3, #10
 8007f92:	d80b      	bhi.n	8007fac <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	32e0      	adds	r2, #224	; 0xe0
 8007f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9e:	78fa      	ldrb	r2, [r7, #3]
 8007fa0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	32e0      	adds	r2, #224	; 0xe0
 8007fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	370c      	adds	r7, #12
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b085      	sub	sp, #20
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	73fb      	strb	r3, [r7, #15]
 8007fca:	e00e      	b.n	8007fea <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007fcc:	7bfa      	ldrb	r2, [r7, #15]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32e0      	adds	r2, #224	; 0xe0
 8007fd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d102      	bne.n	8007fe4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	e007      	b.n	8007ff4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	73fb      	strb	r3, [r7, #15]
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	2b0a      	cmp	r3, #10
 8007fee:	d9ed      	bls.n	8007fcc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008004:	2201      	movs	r2, #1
 8008006:	490e      	ldr	r1, [pc, #56]	; (8008040 <MX_USB_HOST_Init+0x40>)
 8008008:	480e      	ldr	r0, [pc, #56]	; (8008044 <MX_USB_HOST_Init+0x44>)
 800800a:	f7fe fdbb 	bl	8006b84 <USBH_Init>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d001      	beq.n	8008018 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008014:	f7f9 f94c 	bl	80012b0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008018:	490b      	ldr	r1, [pc, #44]	; (8008048 <MX_USB_HOST_Init+0x48>)
 800801a:	480a      	ldr	r0, [pc, #40]	; (8008044 <MX_USB_HOST_Init+0x44>)
 800801c:	f7fe fe25 	bl	8006c6a <USBH_RegisterClass>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008026:	f7f9 f943 	bl	80012b0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800802a:	4806      	ldr	r0, [pc, #24]	; (8008044 <MX_USB_HOST_Init+0x44>)
 800802c:	f7fe feaa 	bl	8006d84 <USBH_Start>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008036:	f7f9 f93b 	bl	80012b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800803a:	bf00      	nop
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	08008061 	.word	0x08008061
 8008044:	200001f8 	.word	0x200001f8
 8008048:	2000000c 	.word	0x2000000c

0800804c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008050:	4802      	ldr	r0, [pc, #8]	; (800805c <MX_USB_HOST_Process+0x10>)
 8008052:	f7fe fea7 	bl	8006da4 <USBH_Process>
}
 8008056:	bf00      	nop
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	200001f8 	.word	0x200001f8

08008060 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	3b01      	subs	r3, #1
 8008070:	2b04      	cmp	r3, #4
 8008072:	d819      	bhi.n	80080a8 <USBH_UserProcess+0x48>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <USBH_UserProcess+0x1c>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	080080a9 	.word	0x080080a9
 8008080:	08008099 	.word	0x08008099
 8008084:	080080a9 	.word	0x080080a9
 8008088:	080080a1 	.word	0x080080a1
 800808c:	08008091 	.word	0x08008091
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008090:	4b09      	ldr	r3, [pc, #36]	; (80080b8 <USBH_UserProcess+0x58>)
 8008092:	2203      	movs	r2, #3
 8008094:	701a      	strb	r2, [r3, #0]
  break;
 8008096:	e008      	b.n	80080aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008098:	4b07      	ldr	r3, [pc, #28]	; (80080b8 <USBH_UserProcess+0x58>)
 800809a:	2202      	movs	r2, #2
 800809c:	701a      	strb	r2, [r3, #0]
  break;
 800809e:	e004      	b.n	80080aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <USBH_UserProcess+0x58>)
 80080a2:	2201      	movs	r2, #1
 80080a4:	701a      	strb	r2, [r3, #0]
  break;
 80080a6:	e000      	b.n	80080aa <USBH_UserProcess+0x4a>

  default:
  break;
 80080a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080aa:	bf00      	nop
 80080ac:	370c      	adds	r7, #12
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	200000b4 	.word	0x200000b4

080080bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b08a      	sub	sp, #40	; 0x28
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080c4:	f107 0314 	add.w	r3, r7, #20
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]
 80080cc:	605a      	str	r2, [r3, #4]
 80080ce:	609a      	str	r2, [r3, #8]
 80080d0:	60da      	str	r2, [r3, #12]
 80080d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080dc:	d147      	bne.n	800816e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080de:	2300      	movs	r3, #0
 80080e0:	613b      	str	r3, [r7, #16]
 80080e2:	4b25      	ldr	r3, [pc, #148]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 80080e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e6:	4a24      	ldr	r2, [pc, #144]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 80080e8:	f043 0301 	orr.w	r3, r3, #1
 80080ec:	6313      	str	r3, [r2, #48]	; 0x30
 80080ee:	4b22      	ldr	r3, [pc, #136]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80080fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008108:	f107 0314 	add.w	r3, r7, #20
 800810c:	4619      	mov	r1, r3
 800810e:	481b      	ldr	r0, [pc, #108]	; (800817c <HAL_HCD_MspInit+0xc0>)
 8008110:	f7f9 fc88 	bl	8001a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008114:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800811a:	2302      	movs	r3, #2
 800811c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800811e:	2300      	movs	r3, #0
 8008120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008122:	2300      	movs	r3, #0
 8008124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008126:	230a      	movs	r3, #10
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800812a:	f107 0314 	add.w	r3, r7, #20
 800812e:	4619      	mov	r1, r3
 8008130:	4812      	ldr	r0, [pc, #72]	; (800817c <HAL_HCD_MspInit+0xc0>)
 8008132:	f7f9 fc77 	bl	8001a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008136:	4b10      	ldr	r3, [pc, #64]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 8008138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813a:	4a0f      	ldr	r2, [pc, #60]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 800813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008140:	6353      	str	r3, [r2, #52]	; 0x34
 8008142:	2300      	movs	r3, #0
 8008144:	60fb      	str	r3, [r7, #12]
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 8008148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800814a:	4a0b      	ldr	r2, [pc, #44]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 800814c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008150:	6453      	str	r3, [r2, #68]	; 0x44
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <HAL_HCD_MspInit+0xbc>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800815a:	60fb      	str	r3, [r7, #12]
 800815c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800815e:	2200      	movs	r2, #0
 8008160:	2100      	movs	r1, #0
 8008162:	2043      	movs	r0, #67	; 0x43
 8008164:	f7f9 fc27 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008168:	2043      	movs	r0, #67	; 0x43
 800816a:	f7f9 fc40 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800816e:	bf00      	nop
 8008170:	3728      	adds	r7, #40	; 0x28
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	40023800 	.word	0x40023800
 800817c:	40020000 	.word	0x40020000

08008180 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800818e:	4618      	mov	r0, r3
 8008190:	f7ff f8b9 	bl	8007306 <USBH_LL_IncTimer>
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f8fe 	bl	80073ac <USBH_LL_Connect>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff f916 	bl	80073f8 <USBH_LL_Disconnect>
}
 80081cc:	bf00      	nop
 80081ce:	3708      	adds	r7, #8
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}

080081d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b083      	sub	sp, #12
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	460b      	mov	r3, r1
 80081de:	70fb      	strb	r3, [r7, #3]
 80081e0:	4613      	mov	r3, r2
 80081e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff f8ab 	bl	800735a <USBH_LL_PortEnabled>
} 
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff f8ab 	bl	8007376 <USBH_LL_PortDisabled>
} 
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008236:	2b01      	cmp	r3, #1
 8008238:	d12a      	bne.n	8008290 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800823a:	4a18      	ldr	r2, [pc, #96]	; (800829c <USBH_LL_Init+0x74>)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a15      	ldr	r2, [pc, #84]	; (800829c <USBH_LL_Init+0x74>)
 8008246:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800824a:	4b14      	ldr	r3, [pc, #80]	; (800829c <USBH_LL_Init+0x74>)
 800824c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008250:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008252:	4b12      	ldr	r3, [pc, #72]	; (800829c <USBH_LL_Init+0x74>)
 8008254:	2208      	movs	r2, #8
 8008256:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008258:	4b10      	ldr	r3, [pc, #64]	; (800829c <USBH_LL_Init+0x74>)
 800825a:	2201      	movs	r2, #1
 800825c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800825e:	4b0f      	ldr	r3, [pc, #60]	; (800829c <USBH_LL_Init+0x74>)
 8008260:	2200      	movs	r2, #0
 8008262:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008264:	4b0d      	ldr	r3, [pc, #52]	; (800829c <USBH_LL_Init+0x74>)
 8008266:	2202      	movs	r2, #2
 8008268:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800826a:	4b0c      	ldr	r3, [pc, #48]	; (800829c <USBH_LL_Init+0x74>)
 800826c:	2200      	movs	r2, #0
 800826e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008270:	480a      	ldr	r0, [pc, #40]	; (800829c <USBH_LL_Init+0x74>)
 8008272:	f7f9 fda2 	bl	8001dba <HAL_HCD_Init>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800827c:	f7f9 f818 	bl	80012b0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008280:	4806      	ldr	r0, [pc, #24]	; (800829c <USBH_LL_Init+0x74>)
 8008282:	f7fa f99d 	bl	80025c0 <HAL_HCD_GetCurrentFrame>
 8008286:	4603      	mov	r3, r0
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff f82c 	bl	80072e8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	200005c4 	.word	0x200005c4

080082a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ac:	2300      	movs	r3, #0
 80082ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082b6:	4618      	mov	r0, r3
 80082b8:	f7fa f90a 	bl	80024d0 <HAL_HCD_Start>
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f000 f95c 	bl	8008580 <USBH_Get_USB_Status>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80082cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80082d6:	b580      	push	{r7, lr}
 80082d8:	b084      	sub	sp, #16
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e2:	2300      	movs	r3, #0
 80082e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fa f912 	bl	8002516 <HAL_HCD_Stop>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f000 f941 	bl	8008580 <USBH_Get_USB_Status>
 80082fe:	4603      	mov	r3, r0
 8008300:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008302:	7bbb      	ldrb	r3, [r7, #14]
}
 8008304:	4618      	mov	r0, r3
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008314:	2301      	movs	r3, #1
 8008316:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800831e:	4618      	mov	r0, r3
 8008320:	f7fa f95c 	bl	80025dc <HAL_HCD_GetCurrentSpeed>
 8008324:	4603      	mov	r3, r0
 8008326:	2b01      	cmp	r3, #1
 8008328:	d007      	beq.n	800833a <USBH_LL_GetSpeed+0x2e>
 800832a:	2b01      	cmp	r3, #1
 800832c:	d302      	bcc.n	8008334 <USBH_LL_GetSpeed+0x28>
 800832e:	2b02      	cmp	r3, #2
 8008330:	d006      	beq.n	8008340 <USBH_LL_GetSpeed+0x34>
 8008332:	e008      	b.n	8008346 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	e008      	b.n	800834c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
    break;
 800833e:	e005      	b.n	800834c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008340:	2302      	movs	r3, #2
 8008342:	73fb      	strb	r3, [r7, #15]
    break;
 8008344:	e002      	b.n	800834c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008346:	2301      	movs	r3, #1
 8008348:	73fb      	strb	r3, [r7, #15]
    break;
 800834a:	bf00      	nop
  }
  return  speed;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800835e:	2300      	movs	r3, #0
 8008360:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008362:	2300      	movs	r3, #0
 8008364:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800836c:	4618      	mov	r0, r3
 800836e:	f7fa f8ef 	bl	8002550 <HAL_HCD_ResetPort>
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8008376:	7bfb      	ldrb	r3, [r7, #15]
 8008378:	4618      	mov	r0, r3
 800837a:	f000 f901 	bl	8008580 <USBH_Get_USB_Status>
 800837e:	4603      	mov	r3, r0
 8008380:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008382:	7bbb      	ldrb	r3, [r7, #14]
}
 8008384:	4618      	mov	r0, r3
 8008386:	3710      	adds	r7, #16
 8008388:	46bd      	mov	sp, r7
 800838a:	bd80      	pop	{r7, pc}

0800838c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	460b      	mov	r3, r1
 8008396:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800839e:	78fa      	ldrb	r2, [r7, #3]
 80083a0:	4611      	mov	r1, r2
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fa f8f7 	bl	8002596 <HAL_HCD_HC_GetXferCount>
 80083a8:	4603      	mov	r3, r0
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3708      	adds	r7, #8
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083b2:	b590      	push	{r4, r7, lr}
 80083b4:	b089      	sub	sp, #36	; 0x24
 80083b6:	af04      	add	r7, sp, #16
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	4608      	mov	r0, r1
 80083bc:	4611      	mov	r1, r2
 80083be:	461a      	mov	r2, r3
 80083c0:	4603      	mov	r3, r0
 80083c2:	70fb      	strb	r3, [r7, #3]
 80083c4:	460b      	mov	r3, r1
 80083c6:	70bb      	strb	r3, [r7, #2]
 80083c8:	4613      	mov	r3, r2
 80083ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80083da:	787c      	ldrb	r4, [r7, #1]
 80083dc:	78ba      	ldrb	r2, [r7, #2]
 80083de:	78f9      	ldrb	r1, [r7, #3]
 80083e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083e2:	9302      	str	r3, [sp, #8]
 80083e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083e8:	9301      	str	r3, [sp, #4]
 80083ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4623      	mov	r3, r4
 80083f2:	f7f9 fd44 	bl	8001e7e <HAL_HCD_HC_Init>
 80083f6:	4603      	mov	r3, r0
 80083f8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80083fa:	7bfb      	ldrb	r3, [r7, #15]
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 f8bf 	bl	8008580 <USBH_Get_USB_Status>
 8008402:	4603      	mov	r3, r0
 8008404:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008406:	7bbb      	ldrb	r3, [r7, #14]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3714      	adds	r7, #20
 800840c:	46bd      	mov	sp, r7
 800840e:	bd90      	pop	{r4, r7, pc}

08008410 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	460b      	mov	r3, r1
 800841a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f7f9 fdbd 	bl	8001fae <HAL_HCD_HC_Halt>
 8008434:	4603      	mov	r3, r0
 8008436:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f8a0 	bl	8008580 <USBH_Get_USB_Status>
 8008440:	4603      	mov	r3, r0
 8008442:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008444:	7bbb      	ldrb	r3, [r7, #14]
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800844e:	b590      	push	{r4, r7, lr}
 8008450:	b089      	sub	sp, #36	; 0x24
 8008452:	af04      	add	r7, sp, #16
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	461a      	mov	r2, r3
 800845c:	4603      	mov	r3, r0
 800845e:	70fb      	strb	r3, [r7, #3]
 8008460:	460b      	mov	r3, r1
 8008462:	70bb      	strb	r3, [r7, #2]
 8008464:	4613      	mov	r3, r2
 8008466:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008468:	2300      	movs	r3, #0
 800846a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8008476:	787c      	ldrb	r4, [r7, #1]
 8008478:	78ba      	ldrb	r2, [r7, #2]
 800847a:	78f9      	ldrb	r1, [r7, #3]
 800847c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008480:	9303      	str	r3, [sp, #12]
 8008482:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008484:	9302      	str	r3, [sp, #8]
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	9301      	str	r3, [sp, #4]
 800848a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800848e:	9300      	str	r3, [sp, #0]
 8008490:	4623      	mov	r3, r4
 8008492:	f7f9 fdaf 	bl	8001ff4 <HAL_HCD_HC_SubmitRequest>
 8008496:	4603      	mov	r3, r0
 8008498:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	4618      	mov	r0, r3
 800849e:	f000 f86f 	bl	8008580 <USBH_Get_USB_Status>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80084a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	3714      	adds	r7, #20
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd90      	pop	{r4, r7, pc}

080084b0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80084c2:	78fa      	ldrb	r2, [r7, #3]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fa f850 	bl	800256c <HAL_HCD_HC_GetURBState>
 80084cc:	4603      	mov	r3, r0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b082      	sub	sp, #8
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	460b      	mov	r3, r1
 80084e0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d103      	bne.n	80084f4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80084ec:	78fb      	ldrb	r3, [r7, #3]
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 f872 	bl	80085d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80084f4:	20c8      	movs	r0, #200	; 0xc8
 80084f6:	f7f9 f961 	bl	80017bc <HAL_Delay>
  return USBH_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	460b      	mov	r3, r1
 800850e:	70fb      	strb	r3, [r7, #3]
 8008510:	4613      	mov	r3, r2
 8008512:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800851a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800851c:	78fa      	ldrb	r2, [r7, #3]
 800851e:	68f9      	ldr	r1, [r7, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	00db      	lsls	r3, r3, #3
 8008528:	440b      	add	r3, r1
 800852a:	333b      	adds	r3, #59	; 0x3b
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008532:	78fa      	ldrb	r2, [r7, #3]
 8008534:	68f9      	ldr	r1, [r7, #12]
 8008536:	4613      	mov	r3, r2
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	00db      	lsls	r3, r3, #3
 800853e:	440b      	add	r3, r1
 8008540:	3350      	adds	r3, #80	; 0x50
 8008542:	78ba      	ldrb	r2, [r7, #2]
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e009      	b.n	800855c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	4613      	mov	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	4413      	add	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	440b      	add	r3, r1
 8008556:	3351      	adds	r3, #81	; 0x51
 8008558:	78ba      	ldrb	r2, [r7, #2]
 800855a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3714      	adds	r7, #20
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b082      	sub	sp, #8
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f9 f922 	bl	80017bc <HAL_Delay>
}
 8008578:	bf00      	nop
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}

08008580 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008580:	b480      	push	{r7}
 8008582:	b085      	sub	sp, #20
 8008584:	af00      	add	r7, sp, #0
 8008586:	4603      	mov	r3, r0
 8008588:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800858a:	2300      	movs	r3, #0
 800858c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800858e:	79fb      	ldrb	r3, [r7, #7]
 8008590:	2b03      	cmp	r3, #3
 8008592:	d817      	bhi.n	80085c4 <USBH_Get_USB_Status+0x44>
 8008594:	a201      	add	r2, pc, #4	; (adr r2, 800859c <USBH_Get_USB_Status+0x1c>)
 8008596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800859a:	bf00      	nop
 800859c:	080085ad 	.word	0x080085ad
 80085a0:	080085b3 	.word	0x080085b3
 80085a4:	080085b9 	.word	0x080085b9
 80085a8:	080085bf 	.word	0x080085bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085ac:	2300      	movs	r3, #0
 80085ae:	73fb      	strb	r3, [r7, #15]
    break;
 80085b0:	e00b      	b.n	80085ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085b2:	2302      	movs	r3, #2
 80085b4:	73fb      	strb	r3, [r7, #15]
    break;
 80085b6:	e008      	b.n	80085ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085b8:	2301      	movs	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
    break;
 80085bc:	e005      	b.n	80085ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	73fb      	strb	r3, [r7, #15]
    break;
 80085c2:	e002      	b.n	80085ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085c4:	2302      	movs	r3, #2
 80085c6:	73fb      	strb	r3, [r7, #15]
    break;
 80085c8:	bf00      	nop
  }
  return usb_status;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 80085d8:	b580      	push	{r7, lr}
 80085da:	b084      	sub	sp, #16
 80085dc:	af00      	add	r7, sp, #0
 80085de:	4603      	mov	r3, r0
 80085e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d102      	bne.n	80085f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e001      	b.n	80085f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 80085f2:	2300      	movs	r3, #0
 80085f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80085f6:	7bfb      	ldrb	r3, [r7, #15]
 80085f8:	461a      	mov	r2, r3
 80085fa:	2101      	movs	r1, #1
 80085fc:	4803      	ldr	r0, [pc, #12]	; (800860c <MX_DriverVbusFS+0x34>)
 80085fe:	f7f9 fbc3 	bl	8001d88 <HAL_GPIO_WritePin>
}
 8008602:	bf00      	nop
 8008604:	3710      	adds	r7, #16
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	40020800 	.word	0x40020800

08008610 <__errno>:
 8008610:	4b01      	ldr	r3, [pc, #4]	; (8008618 <__errno+0x8>)
 8008612:	6818      	ldr	r0, [r3, #0]
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	2000002c 	.word	0x2000002c

0800861c <__libc_init_array>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	4e0d      	ldr	r6, [pc, #52]	; (8008654 <__libc_init_array+0x38>)
 8008620:	4c0d      	ldr	r4, [pc, #52]	; (8008658 <__libc_init_array+0x3c>)
 8008622:	1ba4      	subs	r4, r4, r6
 8008624:	10a4      	asrs	r4, r4, #2
 8008626:	2500      	movs	r5, #0
 8008628:	42a5      	cmp	r5, r4
 800862a:	d109      	bne.n	8008640 <__libc_init_array+0x24>
 800862c:	4e0b      	ldr	r6, [pc, #44]	; (800865c <__libc_init_array+0x40>)
 800862e:	4c0c      	ldr	r4, [pc, #48]	; (8008660 <__libc_init_array+0x44>)
 8008630:	f000 f8ea 	bl	8008808 <_init>
 8008634:	1ba4      	subs	r4, r4, r6
 8008636:	10a4      	asrs	r4, r4, #2
 8008638:	2500      	movs	r5, #0
 800863a:	42a5      	cmp	r5, r4
 800863c:	d105      	bne.n	800864a <__libc_init_array+0x2e>
 800863e:	bd70      	pop	{r4, r5, r6, pc}
 8008640:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008644:	4798      	blx	r3
 8008646:	3501      	adds	r5, #1
 8008648:	e7ee      	b.n	8008628 <__libc_init_array+0xc>
 800864a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800864e:	4798      	blx	r3
 8008650:	3501      	adds	r5, #1
 8008652:	e7f2      	b.n	800863a <__libc_init_array+0x1e>
 8008654:	08008844 	.word	0x08008844
 8008658:	08008844 	.word	0x08008844
 800865c:	08008844 	.word	0x08008844
 8008660:	08008848 	.word	0x08008848

08008664 <malloc>:
 8008664:	4b02      	ldr	r3, [pc, #8]	; (8008670 <malloc+0xc>)
 8008666:	4601      	mov	r1, r0
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	f000 b861 	b.w	8008730 <_malloc_r>
 800866e:	bf00      	nop
 8008670:	2000002c 	.word	0x2000002c

08008674 <free>:
 8008674:	4b02      	ldr	r3, [pc, #8]	; (8008680 <free+0xc>)
 8008676:	4601      	mov	r1, r0
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	f000 b80b 	b.w	8008694 <_free_r>
 800867e:	bf00      	nop
 8008680:	2000002c 	.word	0x2000002c

08008684 <memset>:
 8008684:	4402      	add	r2, r0
 8008686:	4603      	mov	r3, r0
 8008688:	4293      	cmp	r3, r2
 800868a:	d100      	bne.n	800868e <memset+0xa>
 800868c:	4770      	bx	lr
 800868e:	f803 1b01 	strb.w	r1, [r3], #1
 8008692:	e7f9      	b.n	8008688 <memset+0x4>

08008694 <_free_r>:
 8008694:	b538      	push	{r3, r4, r5, lr}
 8008696:	4605      	mov	r5, r0
 8008698:	2900      	cmp	r1, #0
 800869a:	d045      	beq.n	8008728 <_free_r+0x94>
 800869c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086a0:	1f0c      	subs	r4, r1, #4
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfb8      	it	lt
 80086a6:	18e4      	addlt	r4, r4, r3
 80086a8:	f000 f8ac 	bl	8008804 <__malloc_lock>
 80086ac:	4a1f      	ldr	r2, [pc, #124]	; (800872c <_free_r+0x98>)
 80086ae:	6813      	ldr	r3, [r2, #0]
 80086b0:	4610      	mov	r0, r2
 80086b2:	b933      	cbnz	r3, 80086c2 <_free_r+0x2e>
 80086b4:	6063      	str	r3, [r4, #4]
 80086b6:	6014      	str	r4, [r2, #0]
 80086b8:	4628      	mov	r0, r5
 80086ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80086be:	f000 b8a2 	b.w	8008806 <__malloc_unlock>
 80086c2:	42a3      	cmp	r3, r4
 80086c4:	d90c      	bls.n	80086e0 <_free_r+0x4c>
 80086c6:	6821      	ldr	r1, [r4, #0]
 80086c8:	1862      	adds	r2, r4, r1
 80086ca:	4293      	cmp	r3, r2
 80086cc:	bf04      	itt	eq
 80086ce:	681a      	ldreq	r2, [r3, #0]
 80086d0:	685b      	ldreq	r3, [r3, #4]
 80086d2:	6063      	str	r3, [r4, #4]
 80086d4:	bf04      	itt	eq
 80086d6:	1852      	addeq	r2, r2, r1
 80086d8:	6022      	streq	r2, [r4, #0]
 80086da:	6004      	str	r4, [r0, #0]
 80086dc:	e7ec      	b.n	80086b8 <_free_r+0x24>
 80086de:	4613      	mov	r3, r2
 80086e0:	685a      	ldr	r2, [r3, #4]
 80086e2:	b10a      	cbz	r2, 80086e8 <_free_r+0x54>
 80086e4:	42a2      	cmp	r2, r4
 80086e6:	d9fa      	bls.n	80086de <_free_r+0x4a>
 80086e8:	6819      	ldr	r1, [r3, #0]
 80086ea:	1858      	adds	r0, r3, r1
 80086ec:	42a0      	cmp	r0, r4
 80086ee:	d10b      	bne.n	8008708 <_free_r+0x74>
 80086f0:	6820      	ldr	r0, [r4, #0]
 80086f2:	4401      	add	r1, r0
 80086f4:	1858      	adds	r0, r3, r1
 80086f6:	4282      	cmp	r2, r0
 80086f8:	6019      	str	r1, [r3, #0]
 80086fa:	d1dd      	bne.n	80086b8 <_free_r+0x24>
 80086fc:	6810      	ldr	r0, [r2, #0]
 80086fe:	6852      	ldr	r2, [r2, #4]
 8008700:	605a      	str	r2, [r3, #4]
 8008702:	4401      	add	r1, r0
 8008704:	6019      	str	r1, [r3, #0]
 8008706:	e7d7      	b.n	80086b8 <_free_r+0x24>
 8008708:	d902      	bls.n	8008710 <_free_r+0x7c>
 800870a:	230c      	movs	r3, #12
 800870c:	602b      	str	r3, [r5, #0]
 800870e:	e7d3      	b.n	80086b8 <_free_r+0x24>
 8008710:	6820      	ldr	r0, [r4, #0]
 8008712:	1821      	adds	r1, r4, r0
 8008714:	428a      	cmp	r2, r1
 8008716:	bf04      	itt	eq
 8008718:	6811      	ldreq	r1, [r2, #0]
 800871a:	6852      	ldreq	r2, [r2, #4]
 800871c:	6062      	str	r2, [r4, #4]
 800871e:	bf04      	itt	eq
 8008720:	1809      	addeq	r1, r1, r0
 8008722:	6021      	streq	r1, [r4, #0]
 8008724:	605c      	str	r4, [r3, #4]
 8008726:	e7c7      	b.n	80086b8 <_free_r+0x24>
 8008728:	bd38      	pop	{r3, r4, r5, pc}
 800872a:	bf00      	nop
 800872c:	200000b8 	.word	0x200000b8

08008730 <_malloc_r>:
 8008730:	b570      	push	{r4, r5, r6, lr}
 8008732:	1ccd      	adds	r5, r1, #3
 8008734:	f025 0503 	bic.w	r5, r5, #3
 8008738:	3508      	adds	r5, #8
 800873a:	2d0c      	cmp	r5, #12
 800873c:	bf38      	it	cc
 800873e:	250c      	movcc	r5, #12
 8008740:	2d00      	cmp	r5, #0
 8008742:	4606      	mov	r6, r0
 8008744:	db01      	blt.n	800874a <_malloc_r+0x1a>
 8008746:	42a9      	cmp	r1, r5
 8008748:	d903      	bls.n	8008752 <_malloc_r+0x22>
 800874a:	230c      	movs	r3, #12
 800874c:	6033      	str	r3, [r6, #0]
 800874e:	2000      	movs	r0, #0
 8008750:	bd70      	pop	{r4, r5, r6, pc}
 8008752:	f000 f857 	bl	8008804 <__malloc_lock>
 8008756:	4a21      	ldr	r2, [pc, #132]	; (80087dc <_malloc_r+0xac>)
 8008758:	6814      	ldr	r4, [r2, #0]
 800875a:	4621      	mov	r1, r4
 800875c:	b991      	cbnz	r1, 8008784 <_malloc_r+0x54>
 800875e:	4c20      	ldr	r4, [pc, #128]	; (80087e0 <_malloc_r+0xb0>)
 8008760:	6823      	ldr	r3, [r4, #0]
 8008762:	b91b      	cbnz	r3, 800876c <_malloc_r+0x3c>
 8008764:	4630      	mov	r0, r6
 8008766:	f000 f83d 	bl	80087e4 <_sbrk_r>
 800876a:	6020      	str	r0, [r4, #0]
 800876c:	4629      	mov	r1, r5
 800876e:	4630      	mov	r0, r6
 8008770:	f000 f838 	bl	80087e4 <_sbrk_r>
 8008774:	1c43      	adds	r3, r0, #1
 8008776:	d124      	bne.n	80087c2 <_malloc_r+0x92>
 8008778:	230c      	movs	r3, #12
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f842 	bl	8008806 <__malloc_unlock>
 8008782:	e7e4      	b.n	800874e <_malloc_r+0x1e>
 8008784:	680b      	ldr	r3, [r1, #0]
 8008786:	1b5b      	subs	r3, r3, r5
 8008788:	d418      	bmi.n	80087bc <_malloc_r+0x8c>
 800878a:	2b0b      	cmp	r3, #11
 800878c:	d90f      	bls.n	80087ae <_malloc_r+0x7e>
 800878e:	600b      	str	r3, [r1, #0]
 8008790:	50cd      	str	r5, [r1, r3]
 8008792:	18cc      	adds	r4, r1, r3
 8008794:	4630      	mov	r0, r6
 8008796:	f000 f836 	bl	8008806 <__malloc_unlock>
 800879a:	f104 000b 	add.w	r0, r4, #11
 800879e:	1d23      	adds	r3, r4, #4
 80087a0:	f020 0007 	bic.w	r0, r0, #7
 80087a4:	1ac3      	subs	r3, r0, r3
 80087a6:	d0d3      	beq.n	8008750 <_malloc_r+0x20>
 80087a8:	425a      	negs	r2, r3
 80087aa:	50e2      	str	r2, [r4, r3]
 80087ac:	e7d0      	b.n	8008750 <_malloc_r+0x20>
 80087ae:	428c      	cmp	r4, r1
 80087b0:	684b      	ldr	r3, [r1, #4]
 80087b2:	bf16      	itet	ne
 80087b4:	6063      	strne	r3, [r4, #4]
 80087b6:	6013      	streq	r3, [r2, #0]
 80087b8:	460c      	movne	r4, r1
 80087ba:	e7eb      	b.n	8008794 <_malloc_r+0x64>
 80087bc:	460c      	mov	r4, r1
 80087be:	6849      	ldr	r1, [r1, #4]
 80087c0:	e7cc      	b.n	800875c <_malloc_r+0x2c>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d005      	beq.n	80087d8 <_malloc_r+0xa8>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 f808 	bl	80087e4 <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d0cf      	beq.n	8008778 <_malloc_r+0x48>
 80087d8:	6025      	str	r5, [r4, #0]
 80087da:	e7db      	b.n	8008794 <_malloc_r+0x64>
 80087dc:	200000b8 	.word	0x200000b8
 80087e0:	200000bc 	.word	0x200000bc

080087e4 <_sbrk_r>:
 80087e4:	b538      	push	{r3, r4, r5, lr}
 80087e6:	4c06      	ldr	r4, [pc, #24]	; (8008800 <_sbrk_r+0x1c>)
 80087e8:	2300      	movs	r3, #0
 80087ea:	4605      	mov	r5, r0
 80087ec:	4608      	mov	r0, r1
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	f7f8 ff06 	bl	8001600 <_sbrk>
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	d102      	bne.n	80087fe <_sbrk_r+0x1a>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	b103      	cbz	r3, 80087fe <_sbrk_r+0x1a>
 80087fc:	602b      	str	r3, [r5, #0]
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20000888 	.word	0x20000888

08008804 <__malloc_lock>:
 8008804:	4770      	bx	lr

08008806 <__malloc_unlock>:
 8008806:	4770      	bx	lr

08008808 <_init>:
 8008808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800880a:	bf00      	nop
 800880c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800880e:	bc08      	pop	{r3}
 8008810:	469e      	mov	lr, r3
 8008812:	4770      	bx	lr

08008814 <_fini>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	bf00      	nop
 8008818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800881a:	bc08      	pop	{r3}
 800881c:	469e      	mov	lr, r3
 800881e:	4770      	bx	lr
