
ultrasonicc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008870  08008870  00018870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800888c  0800888c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800888c  0800888c  0001888c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008894  08008894  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008894  08008894  00018894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008898  08008898  00018898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800889c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000090  0800892c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000088c  0800892c  0002088c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019e20  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000391b  00000000  00000000  00039ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001318  00000000  00000000  0003d800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001190  00000000  00000000  0003eb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002401b  00000000  00000000  0003fca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012871  00000000  00000000  00063cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ccb95  00000000  00000000  00076534  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001430c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051ec  00000000  00000000  00143144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008858 	.word	0x08008858

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008858 	.word	0x08008858

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b972 	b.w	8000ca0 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9e08      	ldr	r6, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	4688      	mov	r8, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14b      	bne.n	8000a7a <__udivmoddi4+0xa6>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4615      	mov	r5, r2
 80009e6:	d967      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0720 	rsb	r7, r2, #32
 80009f2:	fa01 f302 	lsl.w	r3, r1, r2
 80009f6:	fa20 f707 	lsr.w	r7, r0, r7
 80009fa:	4095      	lsls	r5, r2
 80009fc:	ea47 0803 	orr.w	r8, r7, r3
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a0c:	fa1f fc85 	uxth.w	ip, r5
 8000a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a18:	fb07 f10c 	mul.w	r1, r7, ip
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18eb      	adds	r3, r5, r3
 8000a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a26:	f080 811b 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8118 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a30:	3f02      	subs	r7, #2
 8000a32:	442b      	add	r3, r5
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a48:	45a4      	cmp	ip, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	192c      	adds	r4, r5, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8107 	bcs.w	8000c64 <__udivmoddi4+0x290>
 8000a56:	45a4      	cmp	ip, r4
 8000a58:	f240 8104 	bls.w	8000c64 <__udivmoddi4+0x290>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	442c      	add	r4, r5
 8000a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a64:	eba4 040c 	sub.w	r4, r4, ip
 8000a68:	2700      	movs	r7, #0
 8000a6a:	b11e      	cbz	r6, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c6 4300 	strd	r4, r3, [r6]
 8000a74:	4639      	mov	r1, r7
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	428b      	cmp	r3, r1
 8000a7c:	d909      	bls.n	8000a92 <__udivmoddi4+0xbe>
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	f000 80eb 	beq.w	8000c5a <__udivmoddi4+0x286>
 8000a84:	2700      	movs	r7, #0
 8000a86:	e9c6 0100 	strd	r0, r1, [r6]
 8000a8a:	4638      	mov	r0, r7
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	fab3 f783 	clz	r7, r3
 8000a96:	2f00      	cmp	r7, #0
 8000a98:	d147      	bne.n	8000b2a <__udivmoddi4+0x156>
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d302      	bcc.n	8000aa4 <__udivmoddi4+0xd0>
 8000a9e:	4282      	cmp	r2, r0
 8000aa0:	f200 80fa 	bhi.w	8000c98 <__udivmoddi4+0x2c4>
 8000aa4:	1a84      	subs	r4, r0, r2
 8000aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aaa:	2001      	movs	r0, #1
 8000aac:	4698      	mov	r8, r3
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e0      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ab6:	e7dd      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000ab8:	b902      	cbnz	r2, 8000abc <__udivmoddi4+0xe8>
 8000aba:	deff      	udf	#255	; 0xff
 8000abc:	fab2 f282 	clz	r2, r2
 8000ac0:	2a00      	cmp	r2, #0
 8000ac2:	f040 808f 	bne.w	8000be4 <__udivmoddi4+0x210>
 8000ac6:	1b49      	subs	r1, r1, r5
 8000ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000acc:	fa1f f885 	uxth.w	r8, r5
 8000ad0:	2701      	movs	r7, #1
 8000ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000ad6:	0c23      	lsrs	r3, r4, #16
 8000ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d907      	bls.n	8000af8 <__udivmoddi4+0x124>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aee:	d202      	bcs.n	8000af6 <__udivmoddi4+0x122>
 8000af0:	4299      	cmp	r1, r3
 8000af2:	f200 80cd 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000af6:	4684      	mov	ip, r0
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	b2a3      	uxth	r3, r4
 8000afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b08:	fb08 f800 	mul.w	r8, r8, r0
 8000b0c:	45a0      	cmp	r8, r4
 8000b0e:	d907      	bls.n	8000b20 <__udivmoddi4+0x14c>
 8000b10:	192c      	adds	r4, r5, r4
 8000b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x14a>
 8000b18:	45a0      	cmp	r8, r4
 8000b1a:	f200 80b6 	bhi.w	8000c8a <__udivmoddi4+0x2b6>
 8000b1e:	4618      	mov	r0, r3
 8000b20:	eba4 0408 	sub.w	r4, r4, r8
 8000b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b28:	e79f      	b.n	8000a6a <__udivmoddi4+0x96>
 8000b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b2e:	40bb      	lsls	r3, r7
 8000b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b38:	fa01 f407 	lsl.w	r4, r1, r7
 8000b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b48:	4325      	orrs	r5, r4
 8000b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b4e:	0c2c      	lsrs	r4, r5, #16
 8000b50:	fb08 3319 	mls	r3, r8, r9, r3
 8000b54:	fa1f fa8e 	uxth.w	sl, lr
 8000b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b60:	429c      	cmp	r4, r3
 8000b62:	fa02 f207 	lsl.w	r2, r2, r7
 8000b66:	fa00 f107 	lsl.w	r1, r0, r7
 8000b6a:	d90b      	bls.n	8000b84 <__udivmoddi4+0x1b0>
 8000b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b74:	f080 8087 	bcs.w	8000c86 <__udivmoddi4+0x2b2>
 8000b78:	429c      	cmp	r4, r3
 8000b7a:	f240 8084 	bls.w	8000c86 <__udivmoddi4+0x2b2>
 8000b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000b82:	4473      	add	r3, lr
 8000b84:	1b1b      	subs	r3, r3, r4
 8000b86:	b2ad      	uxth	r5, r5
 8000b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8000b98:	45a2      	cmp	sl, r4
 8000b9a:	d908      	bls.n	8000bae <__udivmoddi4+0x1da>
 8000b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8000ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ba4:	d26b      	bcs.n	8000c7e <__udivmoddi4+0x2aa>
 8000ba6:	45a2      	cmp	sl, r4
 8000ba8:	d969      	bls.n	8000c7e <__udivmoddi4+0x2aa>
 8000baa:	3802      	subs	r0, #2
 8000bac:	4474      	add	r4, lr
 8000bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bb6:	eba4 040a 	sub.w	r4, r4, sl
 8000bba:	454c      	cmp	r4, r9
 8000bbc:	46c2      	mov	sl, r8
 8000bbe:	464b      	mov	r3, r9
 8000bc0:	d354      	bcc.n	8000c6c <__udivmoddi4+0x298>
 8000bc2:	d051      	beq.n	8000c68 <__udivmoddi4+0x294>
 8000bc4:	2e00      	cmp	r6, #0
 8000bc6:	d069      	beq.n	8000c9c <__udivmoddi4+0x2c8>
 8000bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8000bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bd4:	40fd      	lsrs	r5, r7
 8000bd6:	40fc      	lsrs	r4, r7
 8000bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8000be0:	2700      	movs	r7, #0
 8000be2:	e747      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000be4:	f1c2 0320 	rsb	r3, r2, #32
 8000be8:	fa20 f703 	lsr.w	r7, r0, r3
 8000bec:	4095      	lsls	r5, r2
 8000bee:	fa01 f002 	lsl.w	r0, r1, r2
 8000bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8000bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bfa:	4338      	orrs	r0, r7
 8000bfc:	0c01      	lsrs	r1, r0, #16
 8000bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c02:	fa1f f885 	uxth.w	r8, r5
 8000c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c0e:	fb07 f308 	mul.w	r3, r7, r8
 8000c12:	428b      	cmp	r3, r1
 8000c14:	fa04 f402 	lsl.w	r4, r4, r2
 8000c18:	d907      	bls.n	8000c2a <__udivmoddi4+0x256>
 8000c1a:	1869      	adds	r1, r5, r1
 8000c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c20:	d22f      	bcs.n	8000c82 <__udivmoddi4+0x2ae>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d92d      	bls.n	8000c82 <__udivmoddi4+0x2ae>
 8000c26:	3f02      	subs	r7, #2
 8000c28:	4429      	add	r1, r5
 8000c2a:	1acb      	subs	r3, r1, r3
 8000c2c:	b281      	uxth	r1, r0
 8000c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c3a:	fb00 f308 	mul.w	r3, r0, r8
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d907      	bls.n	8000c52 <__udivmoddi4+0x27e>
 8000c42:	1869      	adds	r1, r5, r1
 8000c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c48:	d217      	bcs.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d915      	bls.n	8000c7a <__udivmoddi4+0x2a6>
 8000c4e:	3802      	subs	r0, #2
 8000c50:	4429      	add	r1, r5
 8000c52:	1ac9      	subs	r1, r1, r3
 8000c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c58:	e73b      	b.n	8000ad2 <__udivmoddi4+0xfe>
 8000c5a:	4637      	mov	r7, r6
 8000c5c:	4630      	mov	r0, r6
 8000c5e:	e709      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c60:	4607      	mov	r7, r0
 8000c62:	e6e7      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c64:	4618      	mov	r0, r3
 8000c66:	e6fb      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c68:	4541      	cmp	r1, r8
 8000c6a:	d2ab      	bcs.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c70:	eb69 020e 	sbc.w	r2, r9, lr
 8000c74:	3801      	subs	r0, #1
 8000c76:	4613      	mov	r3, r2
 8000c78:	e7a4      	b.n	8000bc4 <__udivmoddi4+0x1f0>
 8000c7a:	4660      	mov	r0, ip
 8000c7c:	e7e9      	b.n	8000c52 <__udivmoddi4+0x27e>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e795      	b.n	8000bae <__udivmoddi4+0x1da>
 8000c82:	4667      	mov	r7, ip
 8000c84:	e7d1      	b.n	8000c2a <__udivmoddi4+0x256>
 8000c86:	4681      	mov	r9, r0
 8000c88:	e77c      	b.n	8000b84 <__udivmoddi4+0x1b0>
 8000c8a:	3802      	subs	r0, #2
 8000c8c:	442c      	add	r4, r5
 8000c8e:	e747      	b.n	8000b20 <__udivmoddi4+0x14c>
 8000c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c94:	442b      	add	r3, r5
 8000c96:	e72f      	b.n	8000af8 <__udivmoddi4+0x124>
 8000c98:	4638      	mov	r0, r7
 8000c9a:	e708      	b.n	8000aae <__udivmoddi4+0xda>
 8000c9c:	4637      	mov	r7, r6
 8000c9e:	e6e9      	b.n	8000a74 <__udivmoddi4+0xa0>

08000ca0 <__aeabi_idiv0>:
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop

08000ca4 <DWT_Delay>:
 * No need to check an overflow. Let it just tick :)
 *
 * @param uint32_t us  Number of microseconds to delay for
 */
void DWT_Delay(uint32_t us) // microseconds
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
    uint32_t startTick = DWT->CYCCNT,
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <DWT_Delay+0x40>)
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	60fb      	str	r3, [r7, #12]
             delayTicks = us * (SystemCoreClock/1000000);
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <DWT_Delay+0x44>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <DWT_Delay+0x48>)
 8000cb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cbc:	0c9a      	lsrs	r2, r3, #18
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	fb02 f303 	mul.w	r3, r2, r3
 8000cc4:	60bb      	str	r3, [r7, #8]

    while (DWT->CYCCNT - startTick < delayTicks);
 8000cc6:	bf00      	nop
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <DWT_Delay+0x40>)
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	68ba      	ldr	r2, [r7, #8]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d8f8      	bhi.n	8000cc8 <DWT_Delay+0x24>
}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e0001000 	.word	0xe0001000
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	431bde83 	.word	0x431bde83

08000cf0 <us_read>:
	for(int k=0;k<i;k++){
		x = 0;
	}
}

uint32_t us_read(){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
	uint16_t localtime = 0;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4813      	ldr	r0, [pc, #76]	; (8000d4c <us_read+0x5c>)
 8000d00:	f001 f86a 	bl	8001dd8 <HAL_GPIO_WritePin>
	DWT_Delay(10);
 8000d04:	200a      	movs	r0, #10
 8000d06:	f7ff ffcd 	bl	8000ca4 <DWT_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	480f      	ldr	r0, [pc, #60]	; (8000d4c <us_read+0x5c>)
 8000d10:	f001 f862 	bl	8001dd8 <HAL_GPIO_WritePin>
//	HAL_UART_Transmit(&huart2, "s", sizeof("s"), HAL_MAX_DELAY);
	while(!HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3));
 8000d14:	bf00      	nop
 8000d16:	2108      	movs	r1, #8
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <us_read+0x5c>)
 8000d1a:	f001 f845 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d0f8      	beq.n	8000d16 <us_read+0x26>
//	HAL_UART_Transmit(&huart2, "e", sizeof("e"), HAL_MAX_DELAY);
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8000d24:	e005      	b.n	8000d32 <us_read+0x42>
		localtime++;
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	80fb      	strh	r3, [r7, #6]
		DWT_Delay(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ffb9 	bl	8000ca4 <DWT_Delay>
	while(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3)){
 8000d32:	2108      	movs	r1, #8
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <us_read+0x5c>)
 8000d36:	f001 f837 	bl	8001da8 <HAL_GPIO_ReadPin>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f2      	bne.n	8000d26 <us_read+0x36>
	}
	return localtime*2;
 8000d40:	88fb      	ldrh	r3, [r7, #6]
 8000d42:	005b      	lsls	r3, r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40020c00 	.word	0x40020c00

08000d50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d56:	f000 fce7 	bl	8001728 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5a:	f000 f893 	bl	8000e84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d5e:	f000 f9d1 	bl	8001104 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d62:	f000 f911 	bl	8000f88 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d66:	f000 f93d 	bl	8000fe4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d6a:	f000 f96b 	bl	8001044 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d6e:	f007 f96f 	bl	8008050 <MX_USB_HOST_Init>
  MX_USART2_UART_Init();
 8000d72:	f000 f99d 	bl	80010b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint32_t sensortime;
   uint16_t distance;
   char buffer[7];

   const uint16_t threshold = 50;
 8000d76:	2332      	movs	r3, #50	; 0x32
 8000d78:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000d7a:	f007 f98f 	bl	800809c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    sensortime = us_read();
 8000d7e:	f7ff ffb7 	bl	8000cf0 <us_read>
 8000d82:	60b8      	str	r0, [r7, #8]
        distance = sensortime * 0.034/2;
 8000d84:	68b8      	ldr	r0, [r7, #8]
 8000d86:	f7ff fb61 	bl	800044c <__aeabi_ui2d>
 8000d8a:	a33b      	add	r3, pc, #236	; (adr r3, 8000e78 <main+0x128>)
 8000d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d90:	f7ff fbd6 	bl	8000540 <__aeabi_dmul>
 8000d94:	4603      	mov	r3, r0
 8000d96:	460c      	mov	r4, r1
 8000d98:	4618      	mov	r0, r3
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000da4:	f7ff fcf6 	bl	8000794 <__aeabi_ddiv>
 8000da8:	4603      	mov	r3, r0
 8000daa:	460c      	mov	r4, r1
 8000dac:	4618      	mov	r0, r3
 8000dae:	4621      	mov	r1, r4
 8000db0:	f7ff fdd8 	bl	8000964 <__aeabi_d2uiz>
 8000db4:	4603      	mov	r3, r0
 8000db6:	81fb      	strh	r3, [r7, #14]
//        sprintf(buffer, "%d", distance);
//              buffer[5] = (char)13;
//             buffer[6] = (char)10;
//              HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), HAL_MAX_DELAY);
        while ( distance < threshold ){
 8000db8:	e03c      	b.n	8000e34 <main+0xe4>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_SET);
 8000dba:	2201      	movs	r2, #1
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	4830      	ldr	r0, [pc, #192]	; (8000e80 <main+0x130>)
 8000dc0:	f001 f80a 	bl	8001dd8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dca:	482d      	ldr	r0, [pc, #180]	; (8000e80 <main+0x130>)
 8000dcc:	f001 f804 	bl	8001dd8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dd6:	482a      	ldr	r0, [pc, #168]	; (8000e80 <main+0x130>)
 8000dd8:	f000 fffe 	bl	8001dd8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de2:	4827      	ldr	r0, [pc, #156]	; (8000e80 <main+0x130>)
 8000de4:	f000 fff8 	bl	8001dd8 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dee:	4824      	ldr	r0, [pc, #144]	; (8000e80 <main+0x130>)
 8000df0:	f000 fff2 	bl	8001dd8 <HAL_GPIO_WritePin>
        	HAL_Delay(100);
 8000df4:	2064      	movs	r0, #100	; 0x64
 8000df6:	f000 fd09 	bl	800180c <HAL_Delay>
        	sensortime = us_read();
 8000dfa:	f7ff ff79 	bl	8000cf0 <us_read>
 8000dfe:	60b8      	str	r0, [r7, #8]
        	distance = sensortime * 0.034/2;
 8000e00:	68b8      	ldr	r0, [r7, #8]
 8000e02:	f7ff fb23 	bl	800044c <__aeabi_ui2d>
 8000e06:	a31c      	add	r3, pc, #112	; (adr r3, 8000e78 <main+0x128>)
 8000e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0c:	f7ff fb98 	bl	8000540 <__aeabi_dmul>
 8000e10:	4603      	mov	r3, r0
 8000e12:	460c      	mov	r4, r1
 8000e14:	4618      	mov	r0, r3
 8000e16:	4621      	mov	r1, r4
 8000e18:	f04f 0200 	mov.w	r2, #0
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	f7ff fcb8 	bl	8000794 <__aeabi_ddiv>
 8000e24:	4603      	mov	r3, r0
 8000e26:	460c      	mov	r4, r1
 8000e28:	4618      	mov	r0, r3
 8000e2a:	4621      	mov	r1, r4
 8000e2c:	f7ff fd9a 	bl	8000964 <__aeabi_d2uiz>
 8000e30:	4603      	mov	r3, r0
 8000e32:	81fb      	strh	r3, [r7, #14]
        while ( distance < threshold ){
 8000e34:	89fa      	ldrh	r2, [r7, #14]
 8000e36:	89bb      	ldrh	r3, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d3be      	bcc.n	8000dba <main+0x6a>
        }
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e42:	480f      	ldr	r0, [pc, #60]	; (8000e80 <main+0x130>)
 8000e44:	f000 ffc8 	bl	8001dd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e4e:	480c      	ldr	r0, [pc, #48]	; (8000e80 <main+0x130>)
 8000e50:	f000 ffc2 	bl	8001dd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5a:	4809      	ldr	r0, [pc, #36]	; (8000e80 <main+0x130>)
 8000e5c:	f000 ffbc 	bl	8001dd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e60:	2200      	movs	r2, #0
 8000e62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e66:	4806      	ldr	r0, [pc, #24]	; (8000e80 <main+0x130>)
 8000e68:	f000 ffb6 	bl	8001dd8 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2102      	movs	r1, #2
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <main+0x130>)
 8000e72:	f000 ffb1 	bl	8001dd8 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 8000e76:	e780      	b.n	8000d7a <main+0x2a>
 8000e78:	b020c49c 	.word	0xb020c49c
 8000e7c:	3fa16872 	.word	0x3fa16872
 8000e80:	40020c00 	.word	0x40020c00

08000e84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b098      	sub	sp, #96	; 0x60
 8000e88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e8e:	2230      	movs	r2, #48	; 0x30
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f007 fc1e 	bl	80086d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ea8:	f107 030c 	add.w	r3, r7, #12
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	4b31      	ldr	r3, [pc, #196]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	4a30      	ldr	r2, [pc, #192]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <SystemClock_Config+0xfc>)
 8000ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	607b      	str	r3, [r7, #4]
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	; (8000f84 <SystemClock_Config+0x100>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a2a      	ldr	r2, [pc, #168]	; (8000f84 <SystemClock_Config+0x100>)
 8000edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee0:	6013      	str	r3, [r2, #0]
 8000ee2:	4b28      	ldr	r3, [pc, #160]	; (8000f84 <SystemClock_Config+0x100>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ef2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000efc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f02:	2308      	movs	r3, #8
 8000f04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f06:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f10:	2307      	movs	r3, #7
 8000f12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f003 f9b5 	bl	8004288 <HAL_RCC_OscConfig>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000f24:	f000 f9ec 	bl	8001300 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f28:	230f      	movs	r3, #15
 8000f2a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f30:	2300      	movs	r3, #0
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	2105      	movs	r1, #5
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 fc0e 	bl	8004768 <HAL_RCC_ClockConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000f52:	f000 f9d5 	bl	8001300 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f56:	2301      	movs	r3, #1
 8000f58:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f5a:	23c0      	movs	r3, #192	; 0xc0
 8000f5c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f5e:	2302      	movs	r3, #2
 8000f60:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f62:	f107 030c 	add.w	r3, r7, #12
 8000f66:	4618      	mov	r0, r3
 8000f68:	f003 fdf0 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000f72:	f000 f9c5 	bl	8001300 <Error_Handler>
  }
}
 8000f76:	bf00      	nop
 8000f78:	3760      	adds	r7, #96	; 0x60
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40007000 	.word	0x40007000

08000f88 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <MX_I2C1_Init+0x54>)
 8000f90:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f94:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x58>)
 8000f96:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fa6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000faa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fac:	4b0a      	ldr	r3, [pc, #40]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fb8:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fc4:	4804      	ldr	r0, [pc, #16]	; (8000fd8 <MX_I2C1_Init+0x50>)
 8000fc6:	f002 fb87 	bl	80036d8 <HAL_I2C_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fd0:	f000 f996 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	200000c0 	.word	0x200000c0
 8000fdc:	40005400 	.word	0x40005400
 8000fe0:	000186a0 	.word	0x000186a0

08000fe4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000fe8:	4b13      	ldr	r3, [pc, #76]	; (8001038 <MX_I2S3_Init+0x54>)
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <MX_I2S3_Init+0x58>)
 8000fec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <MX_I2S3_Init+0x54>)
 8000ff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ff4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	; (8001038 <MX_I2S3_Init+0x54>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <MX_I2S3_Init+0x54>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001002:	4b0d      	ldr	r3, [pc, #52]	; (8001038 <MX_I2S3_Init+0x54>)
 8001004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001008:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <MX_I2S3_Init+0x54>)
 800100c:	4a0c      	ldr	r2, [pc, #48]	; (8001040 <MX_I2S3_Init+0x5c>)
 800100e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <MX_I2S3_Init+0x54>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <MX_I2S3_Init+0x54>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <MX_I2S3_Init+0x54>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_I2S3_Init+0x54>)
 8001024:	f002 fc90 	bl	8003948 <HAL_I2S_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800102e:	f000 f967 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	200001ac 	.word	0x200001ac
 800103c:	40003c00 	.word	0x40003c00
 8001040:	00017700 	.word	0x00017700

08001044 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <MX_SPI1_Init+0x64>)
 800104a:	4a18      	ldr	r2, [pc, #96]	; (80010ac <MX_SPI1_Init+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001058:	2200      	movs	r2, #0
 800105a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_SPI1_Init+0x64>)
 800105e:	2200      	movs	r2, #0
 8001060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001064:	2200      	movs	r2, #0
 8001066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_SPI1_Init+0x64>)
 800106a:	2200      	movs	r2, #0
 800106c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001078:	2200      	movs	r2, #0
 800107a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_SPI1_Init+0x64>)
 800107e:	2200      	movs	r2, #0
 8001080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_SPI1_Init+0x64>)
 800108a:	2200      	movs	r2, #0
 800108c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001090:	220a      	movs	r2, #10
 8001092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_SPI1_Init+0x64>)
 8001096:	f003 fe97 	bl	8004dc8 <HAL_SPI_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80010a0:	f000 f92e 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000114 	.word	0x20000114
 80010ac:	40013000 	.word	0x40013000

080010b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART2_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART2_UART_Init+0x4c>)
 80010e8:	f003 fed2 	bl	8004e90 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f905 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000016c 	.word	0x2000016c
 8001100:	40004400 	.word	0x40004400

08001104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08c      	sub	sp, #48	; 0x30
 8001108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
 800111e:	4b71      	ldr	r3, [pc, #452]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a70      	ldr	r2, [pc, #448]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001124:	f043 0310 	orr.w	r3, r3, #16
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b6e      	ldr	r3, [pc, #440]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0310 	and.w	r3, r3, #16
 8001132:	61bb      	str	r3, [r7, #24]
 8001134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
 800113a:	4b6a      	ldr	r3, [pc, #424]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a69      	ldr	r2, [pc, #420]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b67      	ldr	r3, [pc, #412]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	617b      	str	r3, [r7, #20]
 8001150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b63      	ldr	r3, [pc, #396]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a62      	ldr	r2, [pc, #392]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b60      	ldr	r3, [pc, #384]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b5c      	ldr	r3, [pc, #368]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a5b      	ldr	r2, [pc, #364]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b59      	ldr	r3, [pc, #356]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b55      	ldr	r3, [pc, #340]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a54      	ldr	r2, [pc, #336]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b52      	ldr	r3, [pc, #328]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b4e      	ldr	r3, [pc, #312]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a4d      	ldr	r2, [pc, #308]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 80011b0:	f043 0308 	orr.w	r3, r3, #8
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b4b      	ldr	r3, [pc, #300]	; (80012e4 <MX_GPIO_Init+0x1e0>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2108      	movs	r1, #8
 80011c6:	4848      	ldr	r0, [pc, #288]	; (80012e8 <MX_GPIO_Init+0x1e4>)
 80011c8:	f000 fe06 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2101      	movs	r1, #1
 80011d0:	4846      	ldr	r0, [pc, #280]	; (80012ec <MX_GPIO_Init+0x1e8>)
 80011d2:	f000 fe01 	bl	8001dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80011d6:	2200      	movs	r2, #0
 80011d8:	f24f 0116 	movw	r1, #61462	; 0xf016
 80011dc:	4844      	ldr	r0, [pc, #272]	; (80012f0 <MX_GPIO_Init+0x1ec>)
 80011de:	f000 fdfb 	bl	8001dd8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80011e2:	2308      	movs	r3, #8
 80011e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e6:	2301      	movs	r3, #1
 80011e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	4619      	mov	r1, r3
 80011f8:	483b      	ldr	r0, [pc, #236]	; (80012e8 <MX_GPIO_Init+0x1e4>)
 80011fa:	f000 fc3b 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80011fe:	2301      	movs	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001202:	2301      	movs	r3, #1
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001206:	2300      	movs	r3, #0
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120a:	2300      	movs	r3, #0
 800120c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4835      	ldr	r0, [pc, #212]	; (80012ec <MX_GPIO_Init+0x1e8>)
 8001216:	f000 fc2d 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800121a:	2308      	movs	r3, #8
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800122a:	2305      	movs	r3, #5
 800122c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	482d      	ldr	r0, [pc, #180]	; (80012ec <MX_GPIO_Init+0x1e8>)
 8001236:	f000 fc1d 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800123a:	2301      	movs	r3, #1
 800123c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800123e:	4b2d      	ldr	r3, [pc, #180]	; (80012f4 <MX_GPIO_Init+0x1f0>)
 8001240:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	482a      	ldr	r0, [pc, #168]	; (80012f8 <MX_GPIO_Init+0x1f4>)
 800124e:	f000 fc11 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001252:	2304      	movs	r3, #4
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4825      	ldr	r0, [pc, #148]	; (80012fc <MX_GPIO_Init+0x1f8>)
 8001266:	f000 fc05 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800126a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800126e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800127c:	2305      	movs	r3, #5
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	481d      	ldr	r0, [pc, #116]	; (80012fc <MX_GPIO_Init+0x1f8>)
 8001288:	f000 fbf4 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           PD1 PD2 Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800128c:	f24f 0316 	movw	r3, #61462	; 0xf016
 8001290:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001292:	2301      	movs	r3, #1
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129a:	2300      	movs	r3, #0
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4812      	ldr	r0, [pc, #72]	; (80012f0 <MX_GPIO_Init+0x1ec>)
 80012a6:	f000 fbe5 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|OTG_FS_OverCurrent_Pin;
 80012aa:	2328      	movs	r3, #40	; 0x28
 80012ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	480c      	ldr	r0, [pc, #48]	; (80012f0 <MX_GPIO_Init+0x1ec>)
 80012be:	f000 fbd9 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <MX_GPIO_Init+0x1f0>)
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	; (80012e8 <MX_GPIO_Init+0x1e4>)
 80012d6:	f000 fbcd 	bl	8001a74 <HAL_GPIO_Init>

}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40020800 	.word	0x40020800
 80012f0:	40020c00 	.word	0x40020c00
 80012f4:	10120000 	.word	0x10120000
 80012f8:	40020000 	.word	0x40020000
 80012fc:	40020400 	.word	0x40020400

08001300 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <HAL_MspInit+0x4c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a0f      	ldr	r2, [pc, #60]	; (800135c <HAL_MspInit+0x4c>)
 8001320:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b0d      	ldr	r3, [pc, #52]	; (800135c <HAL_MspInit+0x4c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08a      	sub	sp, #40	; 0x28
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a19      	ldr	r2, [pc, #100]	; (80013e4 <HAL_I2C_MspInit+0x84>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d12c      	bne.n	80013dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	613b      	str	r3, [r7, #16]
 800139c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800139e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80013a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a4:	2312      	movs	r3, #18
 80013a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b0:	2304      	movs	r3, #4
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	4619      	mov	r1, r3
 80013ba:	480c      	ldr	r0, [pc, #48]	; (80013ec <HAL_I2C_MspInit+0x8c>)
 80013bc:	f000 fb5a 	bl	8001a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c8:	4a07      	ldr	r2, [pc, #28]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013ce:	6413      	str	r3, [r2, #64]	; 0x40
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <HAL_I2C_MspInit+0x88>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40005400 	.word	0x40005400
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020400 	.word	0x40020400

080013f0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a28      	ldr	r2, [pc, #160]	; (80014b0 <HAL_I2S_MspInit+0xc0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d14a      	bne.n	80014a8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a26      	ldr	r2, [pc, #152]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 800141c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b20      	ldr	r3, [pc, #128]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1f      	ldr	r2, [pc, #124]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b19      	ldr	r3, [pc, #100]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a18      	ldr	r2, [pc, #96]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b16      	ldr	r3, [pc, #88]	; (80014b4 <HAL_I2S_MspInit+0xc4>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001466:	2310      	movs	r3, #16
 8001468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001476:	2306      	movs	r3, #6
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <HAL_I2S_MspInit+0xc8>)
 8001482:	f000 faf7 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001486:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800148a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148c:	2302      	movs	r3, #2
 800148e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001498:	2306      	movs	r3, #6
 800149a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	; (80014bc <HAL_I2S_MspInit+0xcc>)
 80014a4:	f000 fae6 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	3728      	adds	r7, #40	; 0x28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40003c00 	.word	0x40003c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	; 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	; (8001544 <HAL_SPI_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12b      	bne.n	800153a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b0e      	ldr	r3, [pc, #56]	; (8001548 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800151a:	23e0      	movs	r3, #224	; 0xe0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152a:	2305      	movs	r3, #5
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <HAL_SPI_MspInit+0x8c>)
 8001536:	f000 fa9d 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	; 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013000 	.word	0x40013000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a19      	ldr	r2, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0x84>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d12b      	bne.n	80015ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0x88>)
 800157c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001580:	6413      	str	r3, [r2, #64]	; 0x40
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_UART_MspInit+0x88>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_UART_MspInit+0x88>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b6:	2303      	movs	r3, #3
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ba:	2307      	movs	r3, #7
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_UART_MspInit+0x8c>)
 80015c6:	f000 fa55 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40004400 	.word	0x40004400
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f8ca 	bl	80017cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <OTG_FS_IRQHandler+0x10>)
 8001642:	f000 fe67 	bl	8002314 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200005c4 	.word	0x200005c4

08001650 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x50>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d102      	bne.n	8001666 <_sbrk+0x16>
		heap_end = &end;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <_sbrk+0x50>)
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <_sbrk+0x54>)
 8001664:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <_sbrk+0x50>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800166c:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <_sbrk+0x50>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4413      	add	r3, r2
 8001674:	466a      	mov	r2, sp
 8001676:	4293      	cmp	r3, r2
 8001678:	d907      	bls.n	800168a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800167a:	f006 fff1 	bl	8008660 <__errno>
 800167e:	4602      	mov	r2, r0
 8001680:	230c      	movs	r3, #12
 8001682:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	e006      	b.n	8001698 <_sbrk+0x48>
	}

	heap_end += incr;
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <_sbrk+0x50>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4413      	add	r3, r2
 8001692:	4a03      	ldr	r2, [pc, #12]	; (80016a0 <_sbrk+0x50>)
 8001694:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001696:	68fb      	ldr	r3, [r7, #12]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200000ac 	.word	0x200000ac
 80016a4:	20000890 	.word	0x20000890

080016a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <SystemInit+0x28>)
 80016ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <SystemInit+0x28>)
 80016b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <SystemInit+0x28>)
 80016be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c2:	609a      	str	r2, [r3, #8]
#endif
}
 80016c4:	bf00      	nop
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80016d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800170c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016da:	e003      	b.n	80016e4 <LoopCopyDataInit>

080016dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016e2:	3104      	adds	r1, #4

080016e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016e6:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016ec:	d3f6      	bcc.n	80016dc <CopyDataInit>
  ldr  r2, =_sbss
 80016ee:	4a0b      	ldr	r2, [pc, #44]	; (800171c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80016f0:	e002      	b.n	80016f8 <LoopFillZerobss>

080016f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016f4:	f842 3b04 	str.w	r3, [r2], #4

080016f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016f8:	4b09      	ldr	r3, [pc, #36]	; (8001720 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80016fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016fc:	d3f9      	bcc.n	80016f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016fe:	f7ff ffd3 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001702:	f006 ffb3 	bl	800866c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001706:	f7ff fb23 	bl	8000d50 <main>
  bx  lr    
 800170a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800170c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001710:	0800889c 	.word	0x0800889c
  ldr  r0, =_sdata
 8001714:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001718:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 800171c:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8001720:	2000088c 	.word	0x2000088c

08001724 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001724:	e7fe      	b.n	8001724 <ADC_IRQHandler>
	...

08001728 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <HAL_Init+0x40>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0d      	ldr	r2, [pc, #52]	; (8001768 <HAL_Init+0x40>)
 8001732:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001736:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <HAL_Init+0x40>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a0a      	ldr	r2, [pc, #40]	; (8001768 <HAL_Init+0x40>)
 800173e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001742:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <HAL_Init+0x40>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a07      	ldr	r2, [pc, #28]	; (8001768 <HAL_Init+0x40>)
 800174a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800174e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001750:	2003      	movs	r0, #3
 8001752:	f000 f94d 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001756:	2000      	movs	r0, #0
 8001758:	f000 f808 	bl	800176c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800175c:	f7ff fdd8 	bl	8001310 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023c00 	.word	0x40023c00

0800176c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <HAL_InitTick+0x54>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <HAL_InitTick+0x58>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001782:	fbb3 f3f1 	udiv	r3, r3, r1
 8001786:	fbb2 f3f3 	udiv	r3, r2, r3
 800178a:	4618      	mov	r0, r3
 800178c:	f000 f965 	bl	8001a5a <HAL_SYSTICK_Config>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e00e      	b.n	80017b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d80a      	bhi.n	80017b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	f04f 30ff 	mov.w	r0, #4294967295
 80017a8:	f000 f92d 	bl	8001a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017ac:	4a06      	ldr	r2, [pc, #24]	; (80017c8 <HAL_InitTick+0x5c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
 80017b4:	e000      	b.n	80017b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000000 	.word	0x20000000
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000004 	.word	0x20000004

080017cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_IncTick+0x20>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	461a      	mov	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HAL_IncTick+0x24>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4413      	add	r3, r2
 80017dc:	4a04      	ldr	r2, [pc, #16]	; (80017f0 <HAL_IncTick+0x24>)
 80017de:	6013      	str	r3, [r2, #0]
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	20000008 	.word	0x20000008
 80017f0:	200001f4 	.word	0x200001f4

080017f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return uwTick;
 80017f8:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_GetTick+0x14>)
 80017fa:	681b      	ldr	r3, [r3, #0]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	200001f4 	.word	0x200001f4

0800180c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff ffee 	bl	80017f4 <HAL_GetTick>
 8001818:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001824:	d005      	beq.n	8001832 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_Delay+0x40>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001832:	bf00      	nop
 8001834:	f7ff ffde 	bl	80017f4 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	429a      	cmp	r2, r3
 8001842:	d8f7      	bhi.n	8001834 <HAL_Delay+0x28>
  {
  }
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000008 	.word	0x20000008

08001850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001860:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001866:	68ba      	ldr	r2, [r7, #8]
 8001868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800186c:	4013      	ands	r3, r2
 800186e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001882:	4a04      	ldr	r2, [pc, #16]	; (8001894 <__NVIC_SetPriorityGrouping+0x44>)
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	60d3      	str	r3, [r2, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <__NVIC_GetPriorityGrouping+0x18>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	0a1b      	lsrs	r3, r3, #8
 80018a2:	f003 0307 	and.w	r3, r3, #7
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	db0b      	blt.n	80018de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	f003 021f 	and.w	r2, r3, #31
 80018cc:	4907      	ldr	r1, [pc, #28]	; (80018ec <__NVIC_EnableIRQ+0x38>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	095b      	lsrs	r3, r3, #5
 80018d4:	2001      	movs	r0, #1
 80018d6:	fa00 f202 	lsl.w	r2, r0, r2
 80018da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	e000e100 	.word	0xe000e100

080018f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001900:	2b00      	cmp	r3, #0
 8001902:	db0a      	blt.n	800191a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	b2da      	uxtb	r2, r3
 8001908:	490c      	ldr	r1, [pc, #48]	; (800193c <__NVIC_SetPriority+0x4c>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	0112      	lsls	r2, r2, #4
 8001910:	b2d2      	uxtb	r2, r2
 8001912:	440b      	add	r3, r1
 8001914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001918:	e00a      	b.n	8001930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	b2da      	uxtb	r2, r3
 800191e:	4908      	ldr	r1, [pc, #32]	; (8001940 <__NVIC_SetPriority+0x50>)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	3b04      	subs	r3, #4
 8001928:	0112      	lsls	r2, r2, #4
 800192a:	b2d2      	uxtb	r2, r2
 800192c:	440b      	add	r3, r1
 800192e:	761a      	strb	r2, [r3, #24]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	e000e100 	.word	0xe000e100
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f1c3 0307 	rsb	r3, r3, #7
 800195e:	2b04      	cmp	r3, #4
 8001960:	bf28      	it	cs
 8001962:	2304      	movcs	r3, #4
 8001964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	3304      	adds	r3, #4
 800196a:	2b06      	cmp	r3, #6
 800196c:	d902      	bls.n	8001974 <NVIC_EncodePriority+0x30>
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	3b03      	subs	r3, #3
 8001972:	e000      	b.n	8001976 <NVIC_EncodePriority+0x32>
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001978:	f04f 32ff 	mov.w	r2, #4294967295
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	401a      	ands	r2, r3
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800198c:	f04f 31ff 	mov.w	r1, #4294967295
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	fa01 f303 	lsl.w	r3, r1, r3
 8001996:	43d9      	mvns	r1, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800199c:	4313      	orrs	r3, r2
         );
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3724      	adds	r7, #36	; 0x24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
	...

080019ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019bc:	d301      	bcc.n	80019c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019be:	2301      	movs	r3, #1
 80019c0:	e00f      	b.n	80019e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019c2:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <SysTick_Config+0x40>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ca:	210f      	movs	r1, #15
 80019cc:	f04f 30ff 	mov.w	r0, #4294967295
 80019d0:	f7ff ff8e 	bl	80018f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <SysTick_Config+0x40>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <SysTick_Config+0x40>)
 80019dc:	2207      	movs	r2, #7
 80019de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	e000e010 	.word	0xe000e010

080019f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff29 	bl	8001850 <__NVIC_SetPriorityGrouping>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b086      	sub	sp, #24
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	60b9      	str	r1, [r7, #8]
 8001a10:	607a      	str	r2, [r7, #4]
 8001a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a18:	f7ff ff3e 	bl	8001898 <__NVIC_GetPriorityGrouping>
 8001a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	6978      	ldr	r0, [r7, #20]
 8001a24:	f7ff ff8e 	bl	8001944 <NVIC_EncodePriority>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a2e:	4611      	mov	r1, r2
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff5d 	bl	80018f0 <__NVIC_SetPriority>
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff ff31 	bl	80018b4 <__NVIC_EnableIRQ>
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b082      	sub	sp, #8
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ffa2 	bl	80019ac <SysTick_Config>
 8001a68:	4603      	mov	r3, r0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	; 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
 8001a8e:	e16b      	b.n	8001d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a90:	2201      	movs	r2, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa4:	693a      	ldr	r2, [r7, #16]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	f040 815a 	bne.w	8001d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d00b      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ac2:	2b11      	cmp	r3, #17
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b12      	cmp	r3, #18
 8001acc:	d130      	bne.n	8001b30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	2203      	movs	r2, #3
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	091b      	lsrs	r3, r3, #4
 8001b1a:	f003 0201 	and.w	r2, r3, #1
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0xfc>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	2b12      	cmp	r3, #18
 8001b6e:	d123      	bne.n	8001bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	08da      	lsrs	r2, r3, #3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3208      	adds	r2, #8
 8001b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	009b      	lsls	r3, r3, #2
 8001b86:	220f      	movs	r2, #15
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	08da      	lsrs	r2, r3, #3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3208      	adds	r2, #8
 8001bb2:	69b9      	ldr	r1, [r7, #24]
 8001bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 80b4 	beq.w	8001d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b5f      	ldr	r3, [pc, #380]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a5e      	ldr	r2, [pc, #376]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b5c      	ldr	r3, [pc, #368]	; (8001d7c <HAL_GPIO_Init+0x308>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c16:	4a5a      	ldr	r2, [pc, #360]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	089b      	lsrs	r3, r3, #2
 8001c1c:	3302      	adds	r3, #2
 8001c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	009b      	lsls	r3, r3, #2
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	; (8001d84 <HAL_GPIO_Init+0x310>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d02b      	beq.n	8001c9a <HAL_GPIO_Init+0x226>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a50      	ldr	r2, [pc, #320]	; (8001d88 <HAL_GPIO_Init+0x314>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d025      	beq.n	8001c96 <HAL_GPIO_Init+0x222>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4f      	ldr	r2, [pc, #316]	; (8001d8c <HAL_GPIO_Init+0x318>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d01f      	beq.n	8001c92 <HAL_GPIO_Init+0x21e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4e      	ldr	r2, [pc, #312]	; (8001d90 <HAL_GPIO_Init+0x31c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d019      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4a4d      	ldr	r2, [pc, #308]	; (8001d94 <HAL_GPIO_Init+0x320>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d013      	beq.n	8001c8a <HAL_GPIO_Init+0x216>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	4a4c      	ldr	r2, [pc, #304]	; (8001d98 <HAL_GPIO_Init+0x324>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00d      	beq.n	8001c86 <HAL_GPIO_Init+0x212>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a4b      	ldr	r2, [pc, #300]	; (8001d9c <HAL_GPIO_Init+0x328>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d007      	beq.n	8001c82 <HAL_GPIO_Init+0x20e>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a4a      	ldr	r2, [pc, #296]	; (8001da0 <HAL_GPIO_Init+0x32c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d101      	bne.n	8001c7e <HAL_GPIO_Init+0x20a>
 8001c7a:	2307      	movs	r3, #7
 8001c7c:	e00e      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c7e:	2308      	movs	r3, #8
 8001c80:	e00c      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c82:	2306      	movs	r3, #6
 8001c84:	e00a      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c86:	2305      	movs	r3, #5
 8001c88:	e008      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	e006      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e004      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e002      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c96:	2301      	movs	r3, #1
 8001c98:	e000      	b.n	8001c9c <HAL_GPIO_Init+0x228>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	69fa      	ldr	r2, [r7, #28]
 8001c9e:	f002 0203 	and.w	r2, r2, #3
 8001ca2:	0092      	lsls	r2, r2, #2
 8001ca4:	4093      	lsls	r3, r2
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cac:	4934      	ldr	r1, [pc, #208]	; (8001d80 <HAL_GPIO_Init+0x30c>)
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cba:	4b3a      	ldr	r3, [pc, #232]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cde:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ce4:	4b2f      	ldr	r3, [pc, #188]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d08:	4a26      	ldr	r2, [pc, #152]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d32:	4a1c      	ldr	r2, [pc, #112]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d38:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d5c:	4a11      	ldr	r2, [pc, #68]	; (8001da4 <HAL_GPIO_Init+0x330>)
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3301      	adds	r3, #1
 8001d66:	61fb      	str	r3, [r7, #28]
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	2b0f      	cmp	r3, #15
 8001d6c:	f67f ae90 	bls.w	8001a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d70:	bf00      	nop
 8001d72:	3724      	adds	r7, #36	; 0x24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40013800 	.word	0x40013800
 8001d84:	40020000 	.word	0x40020000
 8001d88:	40020400 	.word	0x40020400
 8001d8c:	40020800 	.word	0x40020800
 8001d90:	40020c00 	.word	0x40020c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40021400 	.word	0x40021400
 8001d9c:	40021800 	.word	0x40021800
 8001da0:	40021c00 	.word	0x40021c00
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	460b      	mov	r3, r1
 8001db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691a      	ldr	r2, [r3, #16]
 8001db8:	887b      	ldrh	r3, [r7, #2]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	73fb      	strb	r3, [r7, #15]
 8001dc4:	e001      	b.n	8001dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	807b      	strh	r3, [r7, #2]
 8001de4:	4613      	mov	r3, r2
 8001de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001de8:	787b      	ldrb	r3, [r7, #1]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df4:	e003      	b.n	8001dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001df6:	887b      	ldrh	r3, [r7, #2]
 8001df8:	041a      	lsls	r2, r3, #16
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	619a      	str	r2, [r3, #24]
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e0c:	b08f      	sub	sp, #60	; 0x3c
 8001e0e:	af0a      	add	r7, sp, #40	; 0x28
 8001e10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e054      	b.n	8001ec6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f006 f968 	bl	800810c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2203      	movs	r2, #3
 8001e40:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d102      	bne.n	8001e56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f003 fc54 	bl	8005708 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	603b      	str	r3, [r7, #0]
 8001e66:	687e      	ldr	r6, [r7, #4]
 8001e68:	466d      	mov	r5, sp
 8001e6a:	f106 0410 	add.w	r4, r6, #16
 8001e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e7e:	1d33      	adds	r3, r6, #4
 8001e80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e82:	6838      	ldr	r0, [r7, #0]
 8001e84:	f003 fbce 	bl	8005624 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 fc4b 	bl	800572a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	603b      	str	r3, [r7, #0]
 8001e9a:	687e      	ldr	r6, [r7, #4]
 8001e9c:	466d      	mov	r5, sp
 8001e9e:	f106 0410 	add.w	r4, r6, #16
 8001ea2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eae:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb2:	1d33      	adds	r3, r6, #4
 8001eb4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb6:	6838      	ldr	r0, [r7, #0]
 8001eb8:	f003 fd5e 	bl	8005978 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ece <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ece:	b590      	push	{r4, r7, lr}
 8001ed0:	b089      	sub	sp, #36	; 0x24
 8001ed2:	af04      	add	r7, sp, #16
 8001ed4:	6078      	str	r0, [r7, #4]
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	4611      	mov	r1, r2
 8001eda:	461a      	mov	r2, r3
 8001edc:	4603      	mov	r3, r0
 8001ede:	70fb      	strb	r3, [r7, #3]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	70bb      	strb	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_HCD_HC_Init+0x28>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e07f      	b.n	8001ff6 <HAL_HCD_HC_Init+0x128>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	440b      	add	r3, r1
 8001f0c:	333d      	adds	r3, #61	; 0x3d
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f12:	78fa      	ldrb	r2, [r7, #3]
 8001f14:	6879      	ldr	r1, [r7, #4]
 8001f16:	4613      	mov	r3, r2
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	4413      	add	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	440b      	add	r3, r1
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	6879      	ldr	r1, [r7, #4]
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4413      	add	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	440b      	add	r3, r1
 8001f34:	3340      	adds	r3, #64	; 0x40
 8001f36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f38:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	6879      	ldr	r1, [r7, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	440b      	add	r3, r1
 8001f48:	3339      	adds	r3, #57	; 0x39
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f4e:	78fa      	ldrb	r2, [r7, #3]
 8001f50:	6879      	ldr	r1, [r7, #4]
 8001f52:	4613      	mov	r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4413      	add	r3, r2
 8001f58:	00db      	lsls	r3, r3, #3
 8001f5a:	440b      	add	r3, r1
 8001f5c:	333f      	adds	r3, #63	; 0x3f
 8001f5e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f64:	78fa      	ldrb	r2, [r7, #3]
 8001f66:	78bb      	ldrb	r3, [r7, #2]
 8001f68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f6c:	b2d8      	uxtb	r0, r3
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	440b      	add	r3, r1
 8001f7a:	333a      	adds	r3, #58	; 0x3a
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f80:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	da0a      	bge.n	8001f9e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f88:	78fa      	ldrb	r2, [r7, #3]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	333b      	adds	r3, #59	; 0x3b
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
 8001f9c:	e009      	b.n	8001fb2 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f9e:	78fa      	ldrb	r2, [r7, #3]
 8001fa0:	6879      	ldr	r1, [r7, #4]
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	333b      	adds	r3, #59	; 0x3b
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	333c      	adds	r3, #60	; 0x3c
 8001fc2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fc6:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6818      	ldr	r0, [r3, #0]
 8001fcc:	787c      	ldrb	r4, [r7, #1]
 8001fce:	78ba      	ldrb	r2, [r7, #2]
 8001fd0:	78f9      	ldrb	r1, [r7, #3]
 8001fd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fd4:	9302      	str	r3, [sp, #8]
 8001fd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	4623      	mov	r3, r4
 8001fe4:	f003 fe4a 	bl	8005c7c <USB_HC_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3714      	adds	r7, #20
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd90      	pop	{r4, r7, pc}

08001ffe <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b084      	sub	sp, #16
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
 8002006:	460b      	mov	r3, r1
 8002008:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800200a:	2300      	movs	r3, #0
 800200c:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_HCD_HC_Halt+0x1e>
 8002018:	2302      	movs	r3, #2
 800201a:	e00f      	b.n	800203c <HAL_HCD_HC_Halt+0x3e>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	78fa      	ldrb	r2, [r7, #3]
 800202a:	4611      	mov	r1, r2
 800202c:	4618      	mov	r0, r3
 800202e:	f004 f884 	bl	800613a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800203a:	7bfb      	ldrb	r3, [r7, #15]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3710      	adds	r7, #16
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	4608      	mov	r0, r1
 800204e:	4611      	mov	r1, r2
 8002050:	461a      	mov	r2, r3
 8002052:	4603      	mov	r3, r0
 8002054:	70fb      	strb	r3, [r7, #3]
 8002056:	460b      	mov	r3, r1
 8002058:	70bb      	strb	r3, [r7, #2]
 800205a:	4613      	mov	r3, r2
 800205c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	440b      	add	r3, r1
 800206c:	333b      	adds	r3, #59	; 0x3b
 800206e:	78ba      	ldrb	r2, [r7, #2]
 8002070:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002072:	78fa      	ldrb	r2, [r7, #3]
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	440b      	add	r3, r1
 8002080:	333f      	adds	r3, #63	; 0x3f
 8002082:	787a      	ldrb	r2, [r7, #1]
 8002084:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002086:	7c3b      	ldrb	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d10a      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	440b      	add	r3, r1
 800209a:	3342      	adds	r3, #66	; 0x42
 800209c:	2203      	movs	r2, #3
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e009      	b.n	80020b6 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a2:	78fa      	ldrb	r2, [r7, #3]
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	440b      	add	r3, r1
 80020b0:	3342      	adds	r3, #66	; 0x42
 80020b2:	2202      	movs	r2, #2
 80020b4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020b6:	787b      	ldrb	r3, [r7, #1]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	f200 80d6 	bhi.w	800226a <HAL_HCD_HC_SubmitRequest+0x226>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_HCD_HC_SubmitRequest+0x80>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	08002255 	.word	0x08002255
 80020cc:	08002141 	.word	0x08002141
 80020d0:	080021cb 	.word	0x080021cb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020d4:	7c3b      	ldrb	r3, [r7, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f040 80c9 	bne.w	800226e <HAL_HCD_HC_SubmitRequest+0x22a>
 80020dc:	78bb      	ldrb	r3, [r7, #2]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80c5 	bne.w	800226e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 80020e4:	8b3b      	ldrh	r3, [r7, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020ea:	78fa      	ldrb	r2, [r7, #3]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	440b      	add	r3, r1
 80020f8:	3351      	adds	r3, #81	; 0x51
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	3351      	adds	r3, #81	; 0x51
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10a      	bne.n	800212a <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	440b      	add	r3, r1
 8002122:	3342      	adds	r3, #66	; 0x42
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002128:	e0a1      	b.n	800226e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	440b      	add	r3, r1
 8002138:	3342      	adds	r3, #66	; 0x42
 800213a:	2202      	movs	r2, #2
 800213c:	701a      	strb	r2, [r3, #0]
      break;
 800213e:	e096      	b.n	800226e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002140:	78bb      	ldrb	r3, [r7, #2]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d120      	bne.n	8002188 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	440b      	add	r3, r1
 8002154:	3351      	adds	r3, #81	; 0x51
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d10a      	bne.n	8002172 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	3342      	adds	r3, #66	; 0x42
 800216c:	2200      	movs	r2, #0
 800216e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002170:	e07e      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4413      	add	r3, r2
 800217c:	00db      	lsls	r3, r3, #3
 800217e:	440b      	add	r3, r1
 8002180:	3342      	adds	r3, #66	; 0x42
 8002182:	2202      	movs	r2, #2
 8002184:	701a      	strb	r2, [r3, #0]
      break;
 8002186:	e073      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4413      	add	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	440b      	add	r3, r1
 8002196:	3350      	adds	r3, #80	; 0x50
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10a      	bne.n	80021b4 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800219e:	78fa      	ldrb	r2, [r7, #3]
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	4613      	mov	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	4413      	add	r3, r2
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	440b      	add	r3, r1
 80021ac:	3342      	adds	r3, #66	; 0x42
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e05d      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	440b      	add	r3, r1
 80021c2:	3342      	adds	r3, #66	; 0x42
 80021c4:	2202      	movs	r2, #2
 80021c6:	701a      	strb	r2, [r3, #0]
      break;
 80021c8:	e052      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021ca:	78bb      	ldrb	r3, [r7, #2]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d120      	bne.n	8002212 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	3351      	adds	r3, #81	; 0x51
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	3342      	adds	r3, #66	; 0x42
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021fa:	e039      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	3342      	adds	r3, #66	; 0x42
 800220c:	2202      	movs	r2, #2
 800220e:	701a      	strb	r2, [r3, #0]
      break;
 8002210:	e02e      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	440b      	add	r3, r1
 8002220:	3350      	adds	r3, #80	; 0x50
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10a      	bne.n	800223e <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	00db      	lsls	r3, r3, #3
 8002234:	440b      	add	r3, r1
 8002236:	3342      	adds	r3, #66	; 0x42
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
      break;
 800223c:	e018      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223e:	78fa      	ldrb	r2, [r7, #3]
 8002240:	6879      	ldr	r1, [r7, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	440b      	add	r3, r1
 800224c:	3342      	adds	r3, #66	; 0x42
 800224e:	2202      	movs	r2, #2
 8002250:	701a      	strb	r2, [r3, #0]
      break;
 8002252:	e00d      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	4413      	add	r3, r2
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	440b      	add	r3, r1
 8002262:	3342      	adds	r3, #66	; 0x42
 8002264:	2200      	movs	r2, #0
 8002266:	701a      	strb	r2, [r3, #0]
      break;
 8002268:	e002      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800226e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002270:	78fa      	ldrb	r2, [r7, #3]
 8002272:	6879      	ldr	r1, [r7, #4]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	3344      	adds	r3, #68	; 0x44
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002284:	78fa      	ldrb	r2, [r7, #3]
 8002286:	8b39      	ldrh	r1, [r7, #24]
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4613      	mov	r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4413      	add	r3, r2
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	4403      	add	r3, r0
 8002294:	3348      	adds	r3, #72	; 0x48
 8002296:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	4413      	add	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	440b      	add	r3, r1
 80022a6:	335c      	adds	r3, #92	; 0x5c
 80022a8:	2200      	movs	r2, #0
 80022aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80022ac:	78fa      	ldrb	r2, [r7, #3]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	440b      	add	r3, r1
 80022ba:	334c      	adds	r3, #76	; 0x4c
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4413      	add	r3, r2
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	440b      	add	r3, r1
 80022ce:	3339      	adds	r3, #57	; 0x39
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4413      	add	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	440b      	add	r3, r1
 80022e2:	335d      	adds	r3, #93	; 0x5d
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	00db      	lsls	r3, r3, #3
 80022f6:	3338      	adds	r3, #56	; 0x38
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	18d1      	adds	r1, r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	461a      	mov	r2, r3
 8002304:	f003 fdc4 	bl	8005e90 <USB_HC_StartXfer>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop

08002314 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f003 fae1 	bl	80058f2 <USB_GetMode>
 8002330:	4603      	mov	r3, r0
 8002332:	2b01      	cmp	r3, #1
 8002334:	f040 80f1 	bne.w	800251a <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f003 fac5 	bl	80058cc <USB_ReadInterrupts>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 80e7 	beq.w	8002518 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f003 fabc 	bl	80058cc <USB_ReadInterrupts>
 8002354:	4603      	mov	r3, r0
 8002356:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800235a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800235e:	d104      	bne.n	800236a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002368:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f003 faac 	bl	80058cc <USB_ReadInterrupts>
 8002374:	4603      	mov	r3, r0
 8002376:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800237a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800237e:	d104      	bne.n	800238a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002388:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fa9c 	bl	80058cc <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800239a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800239e:	d104      	bne.n	80023aa <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fa8c 	bl	80058cc <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d103      	bne.n	80023c6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2202      	movs	r2, #2
 80023c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f003 fa7e 	bl	80058cc <USB_ReadInterrupts>
 80023d0:	4603      	mov	r3, r0
 80023d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023da:	d117      	bne.n	800240c <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80023ea:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023ee:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f005 ff09 	bl	8008208 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2101      	movs	r1, #1
 80023fc:	4618      	mov	r0, r3
 80023fe:	f003 fb77 	bl	8005af0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800240a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fa5b 	bl	80058cc <USB_ReadInterrupts>
 8002416:	4603      	mov	r3, r0
 8002418:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800241c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002420:	d102      	bne.n	8002428 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f001 f8c8 	bl	80035b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4618      	mov	r0, r3
 800242e:	f003 fa4d 	bl	80058cc <USB_ReadInterrupts>
 8002432:	4603      	mov	r3, r0
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d106      	bne.n	800244a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f005 fec7 	bl	80081d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2208      	movs	r2, #8
 8002448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4618      	mov	r0, r3
 8002450:	f003 fa3c 	bl	80058cc <USB_ReadInterrupts>
 8002454:	4603      	mov	r3, r0
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800245e:	d138      	bne.n	80024d2 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f003 fe57 	bl	8006118 <USB_HC_ReadInterrupt>
 800246a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	617b      	str	r3, [r7, #20]
 8002470:	e025      	b.n	80024be <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	f003 0301 	and.w	r3, r3, #1
 8002482:	2b00      	cmp	r3, #0
 8002484:	d018      	beq.n	80024b8 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	015a      	lsls	r2, r3, #5
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	4413      	add	r3, r2
 800248e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800249c:	d106      	bne.n	80024ac <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	4619      	mov	r1, r3
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f8cf 	bl	8002648 <HCD_HC_IN_IRQHandler>
 80024aa:	e005      	b.n	80024b8 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	4619      	mov	r1, r3
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fc5f 	bl	8002d76 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d3d4      	bcc.n	8002472 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f003 f9f8 	bl	80058cc <USB_ReadInterrupts>
 80024dc:	4603      	mov	r3, r0
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b10      	cmp	r3, #16
 80024e4:	d101      	bne.n	80024ea <HAL_HCD_IRQHandler+0x1d6>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_HCD_IRQHandler+0x1d8>
 80024ea:	2300      	movs	r3, #0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d014      	beq.n	800251a <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0210 	bic.w	r2, r2, #16
 80024fe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 ffad 	bl	8003460 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699a      	ldr	r2, [r3, #24]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f042 0210 	orr.w	r2, r2, #16
 8002514:	619a      	str	r2, [r3, #24]
 8002516:	e000      	b.n	800251a <HAL_HCD_IRQHandler+0x206>
      return;
 8002518:	bf00      	nop
    }
  }
}
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800252e:	2b01      	cmp	r3, #1
 8002530:	d101      	bne.n	8002536 <HAL_HCD_Start+0x16>
 8002532:	2302      	movs	r3, #2
 8002534:	e013      	b.n	800255e <HAL_HCD_Start+0x3e>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 f8cf 	bl	80056e6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2101      	movs	r1, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f003 fb32 	bl	8005bb8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_HCD_Stop+0x16>
 8002578:	2302      	movs	r3, #2
 800257a:	e00d      	b.n	8002598 <HAL_HCD_Stop+0x32>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f003 ff11 	bl	80063b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f003 fad9 	bl	8005b64 <USB_ResetPort>
 80025b2:	4603      	mov	r3, r0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	440b      	add	r3, r1
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	781b      	ldrb	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	460b      	mov	r3, r1
 80025f0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	440b      	add	r3, r1
 8002600:	334c      	adds	r3, #76	; 0x4c
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 fb1b 	bl	8005c58 <USB_GetCurrentFrame>
 8002622:	4603      	mov	r3, r0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4618      	mov	r0, r3
 800263a:	f003 faf6 	bl	8005c2a <USB_GetHostSpeed>
 800263e:	4603      	mov	r3, r0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	460b      	mov	r3, r1
 8002652:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800265e:	78fb      	ldrb	r3, [r7, #3]
 8002660:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	015a      	lsls	r2, r3, #5
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4413      	add	r3, r2
 800266a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b04      	cmp	r3, #4
 8002676:	d119      	bne.n	80026ac <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	015a      	lsls	r2, r3, #5
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4413      	add	r3, r2
 8002680:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002684:	461a      	mov	r2, r3
 8002686:	2304      	movs	r3, #4
 8002688:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	4413      	add	r3, r2
 8002692:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	0151      	lsls	r1, r2, #5
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	440a      	add	r2, r1
 80026a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026a4:	f043 0302 	orr.w	r3, r3, #2
 80026a8:	60d3      	str	r3, [r2, #12]
 80026aa:	e095      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d109      	bne.n	80026d6 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	015a      	lsls	r2, r3, #5
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	4413      	add	r3, r2
 80026ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ce:	461a      	mov	r2, r3
 80026d0:	2320      	movs	r3, #32
 80026d2:	6093      	str	r3, [r2, #8]
 80026d4:	e080      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0308 	and.w	r3, r3, #8
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d134      	bne.n	8002756 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	0151      	lsls	r1, r2, #5
 80026fe:	693a      	ldr	r2, [r7, #16]
 8002700:	440a      	add	r2, r1
 8002702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002706:	f043 0302 	orr.w	r3, r3, #2
 800270a:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	68fa      	ldr	r2, [r7, #12]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	440b      	add	r3, r1
 800271a:	335d      	adds	r3, #93	; 0x5d
 800271c:	2205      	movs	r2, #5
 800271e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	015a      	lsls	r2, r3, #5
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	4413      	add	r3, r2
 8002728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800272c:	461a      	mov	r2, r3
 800272e:	2310      	movs	r3, #16
 8002730:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	015a      	lsls	r2, r3, #5
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4413      	add	r3, r2
 800273a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800273e:	461a      	mov	r2, r3
 8002740:	2308      	movs	r3, #8
 8002742:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f003 fcf3 	bl	800613a <USB_HC_Halt>
 8002754:	e040      	b.n	80027d8 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	015a      	lsls	r2, r3, #5
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	4413      	add	r3, r2
 800275e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002768:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276c:	d134      	bne.n	80027d8 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	015a      	lsls	r2, r3, #5
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4413      	add	r3, r2
 8002776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	0151      	lsls	r1, r2, #5
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	440a      	add	r2, r1
 8002784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002788:	f043 0302 	orr.w	r3, r3, #2
 800278c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f003 fcce 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027aa:	461a      	mov	r2, r3
 80027ac:	2310      	movs	r3, #16
 80027ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80027b0:	6879      	ldr	r1, [r7, #4]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4613      	mov	r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	440b      	add	r3, r1
 80027be:	335d      	adds	r3, #93	; 0x5d
 80027c0:	2208      	movs	r2, #8
 80027c2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	015a      	lsls	r2, r3, #5
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027d0:	461a      	mov	r2, r3
 80027d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027d6:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	015a      	lsls	r2, r3, #5
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	4413      	add	r3, r2
 80027e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ee:	d122      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	4413      	add	r3, r2
 80027f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	0151      	lsls	r1, r2, #5
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	440a      	add	r2, r1
 8002806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800280a:	f043 0302 	orr.w	r3, r3, #2
 800280e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fc8d 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	015a      	lsls	r2, r3, #5
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4413      	add	r3, r2
 8002828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282c:	461a      	mov	r2, r3
 800282e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002832:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002834:	e29b      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	015a      	lsls	r2, r3, #5
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4413      	add	r3, r2
 800283e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b01      	cmp	r3, #1
 800284a:	f040 80c1 	bne.w	80029d0 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01b      	beq.n	800288e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	68fa      	ldr	r2, [r7, #12]
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	440b      	add	r3, r1
 8002864:	3348      	adds	r3, #72	; 0x48
 8002866:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	0159      	lsls	r1, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	440b      	add	r3, r1
 8002870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800287a:	1ad1      	subs	r1, r2, r3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4613      	mov	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	4413      	add	r3, r2
 8002886:	00db      	lsls	r3, r3, #3
 8002888:	4403      	add	r3, r0
 800288a:	334c      	adds	r3, #76	; 0x4c
 800288c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	440b      	add	r3, r1
 800289c:	335d      	adds	r3, #93	; 0x5d
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	440b      	add	r3, r1
 80028b0:	3358      	adds	r3, #88	; 0x58
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	00db      	lsls	r3, r3, #3
 80028d4:	440b      	add	r3, r1
 80028d6:	333f      	adds	r3, #63	; 0x3f
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4613      	mov	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4413      	add	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	440b      	add	r3, r1
 80028ec:	333f      	adds	r3, #63	; 0x3f
 80028ee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d121      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	0151      	lsls	r1, r2, #5
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	440a      	add	r2, r1
 800290a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	b2d2      	uxtb	r2, r2
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f003 fc0b 	bl	800613a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	015a      	lsls	r2, r3, #5
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	4413      	add	r3, r2
 800292c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002930:	461a      	mov	r2, r3
 8002932:	2310      	movs	r3, #16
 8002934:	6093      	str	r3, [r2, #8]
 8002936:	e034      	b.n	80029a2 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	440b      	add	r3, r1
 8002946:	333f      	adds	r3, #63	; 0x3f
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d129      	bne.n	80029a2 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	015a      	lsls	r2, r3, #5
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4413      	add	r3, r2
 8002956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	0151      	lsls	r1, r2, #5
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	440a      	add	r2, r1
 8002964:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002968:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800296c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	440b      	add	r3, r1
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	b2d8      	uxtb	r0, r3
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	00db      	lsls	r3, r3, #3
 8002992:	440b      	add	r3, r1
 8002994:	335c      	adds	r3, #92	; 0x5c
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	461a      	mov	r2, r3
 800299a:	4601      	mov	r1, r0
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f005 fc41 	bl	8008224 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80029a2:	6879      	ldr	r1, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	3350      	adds	r3, #80	; 0x50
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2d8      	uxtb	r0, r3
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4613      	mov	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4413      	add	r3, r2
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	440b      	add	r3, r1
 80029c8:	3350      	adds	r3, #80	; 0x50
 80029ca:	4602      	mov	r2, r0
 80029cc:	701a      	strb	r2, [r3, #0]
}
 80029ce:	e1ce      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	015a      	lsls	r2, r3, #5
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4413      	add	r3, r2
 80029d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	f040 80f1 	bne.w	8002bca <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	015a      	lsls	r2, r3, #5
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4413      	add	r3, r2
 80029f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	0151      	lsls	r1, r2, #5
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	440a      	add	r2, r1
 80029fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a02:	f023 0302 	bic.w	r3, r3, #2
 8002a06:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	335d      	adds	r3, #93	; 0x5d
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d10a      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	335c      	adds	r3, #92	; 0x5c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e0b0      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a34:	6879      	ldr	r1, [r7, #4]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	440b      	add	r3, r1
 8002a42:	335d      	adds	r3, #93	; 0x5d
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b05      	cmp	r3, #5
 8002a48:	d10a      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4413      	add	r3, r2
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	440b      	add	r3, r1
 8002a58:	335c      	adds	r3, #92	; 0x5c
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e09a      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a60:	6879      	ldr	r1, [r7, #4]
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	440b      	add	r3, r1
 8002a6e:	335d      	adds	r3, #93	; 0x5d
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d00a      	beq.n	8002a8c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	335d      	adds	r3, #93	; 0x5d
 8002a86:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a88:	2b08      	cmp	r3, #8
 8002a8a:	d156      	bne.n	8002b3a <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8002a8c:	6879      	ldr	r1, [r7, #4]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4613      	mov	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	440b      	add	r3, r1
 8002a9a:	3358      	adds	r3, #88	; 0x58
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	1c59      	adds	r1, r3, #1
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4403      	add	r3, r0
 8002aae:	3358      	adds	r3, #88	; 0x58
 8002ab0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	440b      	add	r3, r1
 8002ac0:	3358      	adds	r3, #88	; 0x58
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d914      	bls.n	8002af2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ac8:	6879      	ldr	r1, [r7, #4]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	440b      	add	r3, r1
 8002ad6:	3358      	adds	r3, #88	; 0x58
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	440b      	add	r3, r1
 8002aea:	335c      	adds	r3, #92	; 0x5c
 8002aec:	2204      	movs	r2, #4
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	e009      	b.n	8002b06 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	335c      	adds	r3, #92	; 0x5c
 8002b02:	2202      	movs	r2, #2
 8002b04:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	015a      	lsls	r2, r3, #5
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b1c:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b24:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	015a      	lsls	r2, r3, #5
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	e02d      	b.n	8002b96 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68fa      	ldr	r2, [r7, #12]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	440b      	add	r3, r1
 8002b48:	335d      	adds	r3, #93	; 0x5d
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d122      	bne.n	8002b96 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	440b      	add	r3, r1
 8002b5e:	335c      	adds	r3, #92	; 0x5c
 8002b60:	2202      	movs	r2, #2
 8002b62:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	015a      	lsls	r2, r3, #5
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b82:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	015a      	lsls	r2, r3, #5
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	b2d8      	uxtb	r0, r3
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	440b      	add	r3, r1
 8002bba:	335c      	adds	r3, #92	; 0x5c
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4601      	mov	r1, r0
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f005 fb2e 	bl	8008224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bc8:	e0d1      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d13e      	bne.n	8002c5e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	015a      	lsls	r2, r3, #5
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	0151      	lsls	r1, r2, #5
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	440a      	add	r2, r1
 8002bf6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bfa:	f043 0302 	orr.w	r3, r3, #2
 8002bfe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	4613      	mov	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4413      	add	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3358      	adds	r3, #88	; 0x58
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	1c59      	adds	r1, r3, #1
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4403      	add	r3, r0
 8002c22:	3358      	adds	r3, #88	; 0x58
 8002c24:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	4413      	add	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	440b      	add	r3, r1
 8002c34:	335d      	adds	r3, #93	; 0x5d
 8002c36:	2206      	movs	r2, #6
 8002c38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68fa      	ldr	r2, [r7, #12]
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	4611      	mov	r1, r2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f003 fa78 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	015a      	lsls	r2, r3, #5
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	4413      	add	r3, r2
 8002c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c56:	461a      	mov	r2, r3
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	6093      	str	r3, [r2, #8]
}
 8002c5c:	e087      	b.n	8002d6e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	015a      	lsls	r2, r3, #5
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b10      	cmp	r3, #16
 8002c72:	d17c      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	00db      	lsls	r3, r3, #3
 8002c80:	440b      	add	r3, r1
 8002c82:	333f      	adds	r3, #63	; 0x3f
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d122      	bne.n	8002cd0 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	440b      	add	r3, r1
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002cb8:	f043 0302 	orr.w	r3, r3, #2
 8002cbc:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	b2d2      	uxtb	r2, r2
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f003 fa36 	bl	800613a <USB_HC_Halt>
 8002cce:	e045      	b.n	8002d5c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4413      	add	r3, r2
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	440b      	add	r3, r1
 8002cde:	333f      	adds	r3, #63	; 0x3f
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	440b      	add	r3, r1
 8002cf4:	333f      	adds	r3, #63	; 0x3f
 8002cf6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d12f      	bne.n	8002d5c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	440b      	add	r3, r1
 8002d0a:	3358      	adds	r3, #88	; 0x58
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d121      	bne.n	8002d5c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	335d      	adds	r3, #93	; 0x5d
 8002d28:	2203      	movs	r2, #3
 8002d2a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	0151      	lsls	r1, r2, #5
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	440a      	add	r2, r1
 8002d42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f003 f9ef 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	015a      	lsls	r2, r3, #5
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	4413      	add	r3, r2
 8002d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d68:	461a      	mov	r2, r3
 8002d6a:	2310      	movs	r3, #16
 8002d6c:	6093      	str	r3, [r2, #8]
}
 8002d6e:	bf00      	nop
 8002d70:	3718      	adds	r7, #24
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b086      	sub	sp, #24
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	460b      	mov	r3, r1
 8002d80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002d8c:	78fb      	ldrb	r3, [r7, #3]
 8002d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	015a      	lsls	r2, r3, #5
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	4413      	add	r3, r2
 8002d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b04      	cmp	r3, #4
 8002da4:	d119      	bne.n	8002dda <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	015a      	lsls	r2, r3, #5
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	4413      	add	r3, r2
 8002dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db2:	461a      	mov	r2, r3
 8002db4:	2304      	movs	r3, #4
 8002db6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	0151      	lsls	r1, r2, #5
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	440a      	add	r2, r1
 8002dce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002dd2:	f043 0302 	orr.w	r3, r3, #2
 8002dd6:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8002dd8:	e33e      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	015a      	lsls	r2, r3, #5
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d141      	bne.n	8002e74 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	015a      	lsls	r2, r3, #5
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	4413      	add	r3, r2
 8002df8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	2320      	movs	r3, #32
 8002e00:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	68fa      	ldr	r2, [r7, #12]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	440b      	add	r3, r1
 8002e10:	333d      	adds	r3, #61	; 0x3d
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 831f 	bne.w	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002e1a:	6879      	ldr	r1, [r7, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	333d      	adds	r3, #61	; 0x3d
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	440b      	add	r3, r1
 8002e3c:	335c      	adds	r3, #92	; 0x5c
 8002e3e:	2202      	movs	r2, #2
 8002e40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	0151      	lsls	r1, r2, #5
 8002e54:	693a      	ldr	r2, [r7, #16]
 8002e56:	440a      	add	r2, r1
 8002e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002e5c:	f043 0302 	orr.w	r3, r3, #2
 8002e60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 f964 	bl	800613a <USB_HC_Halt>
}
 8002e72:	e2f1      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b40      	cmp	r3, #64	; 0x40
 8002e88:	d13f      	bne.n	8002f0a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	440b      	add	r3, r1
 8002e98:	335d      	adds	r3, #93	; 0x5d
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	440b      	add	r3, r1
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3358      	adds	r3, #88	; 0x58
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	0151      	lsls	r1, r2, #5
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	440a      	add	r2, r1
 8002edc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ee0:	f043 0302 	orr.w	r3, r3, #2
 8002ee4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	4611      	mov	r1, r2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f003 f922 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2340      	movs	r3, #64	; 0x40
 8002f06:	6093      	str	r3, [r2, #8]
}
 8002f08:	e2a6      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f20:	d122      	bne.n	8002f68 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	015a      	lsls	r2, r3, #5
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4413      	add	r3, r2
 8002f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	0151      	lsls	r1, r2, #5
 8002f34:	693a      	ldr	r2, [r7, #16]
 8002f36:	440a      	add	r2, r1
 8002f38:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f003 f8f4 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f64:	6093      	str	r3, [r2, #8]
}
 8002f66:	e277      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	015a      	lsls	r2, r3, #5
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	4413      	add	r3, r2
 8002f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d135      	bne.n	8002fea <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	440b      	add	r3, r1
 8002f8c:	3358      	adds	r3, #88	; 0x58
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	0151      	lsls	r1, r2, #5
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	440a      	add	r2, r1
 8002fa8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f003 f8bc 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	440b      	add	r3, r1
 8002fe2:	335d      	adds	r3, #93	; 0x5d
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	701a      	strb	r2, [r3, #0]
}
 8002fe8:	e236      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d12b      	bne.n	8003058 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	2308      	movs	r3, #8
 8003010:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	0151      	lsls	r1, r2, #5
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	440a      	add	r2, r1
 8003028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800302c:	f043 0302 	orr.w	r3, r3, #2
 8003030:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	4611      	mov	r1, r2
 800303c:	4618      	mov	r0, r3
 800303e:	f003 f87c 	bl	800613a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	335d      	adds	r3, #93	; 0x5d
 8003052:	2205      	movs	r2, #5
 8003054:	701a      	strb	r2, [r3, #0]
}
 8003056:	e1ff      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	015a      	lsls	r2, r3, #5
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4413      	add	r3, r2
 8003060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 0310 	and.w	r3, r3, #16
 800306a:	2b10      	cmp	r3, #16
 800306c:	d155      	bne.n	800311a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	68fa      	ldr	r2, [r7, #12]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3358      	adds	r3, #88	; 0x58
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	440b      	add	r3, r1
 8003090:	335d      	adds	r3, #93	; 0x5d
 8003092:	2203      	movs	r2, #3
 8003094:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	333d      	adds	r3, #61	; 0x3d
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d114      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	333c      	adds	r3, #60	; 0x3c
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	4613      	mov	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	333d      	adds	r3, #61	; 0x3d
 80030d2:	2201      	movs	r2, #1
 80030d4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	015a      	lsls	r2, r3, #5
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	4413      	add	r3, r2
 80030de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	0151      	lsls	r1, r2, #5
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	440a      	add	r2, r1
 80030ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80030f0:	f043 0302 	orr.w	r3, r3, #2
 80030f4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f003 f81a 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	015a      	lsls	r2, r3, #5
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	4413      	add	r3, r2
 800310e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003112:	461a      	mov	r2, r3
 8003114:	2310      	movs	r3, #16
 8003116:	6093      	str	r3, [r2, #8]
}
 8003118:	e19e      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312c:	2b80      	cmp	r3, #128	; 0x80
 800312e:	d12b      	bne.n	8003188 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	0151      	lsls	r1, r2, #5
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	440a      	add	r2, r1
 8003146:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800314a:	f043 0302 	orr.w	r3, r3, #2
 800314e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	b2d2      	uxtb	r2, r2
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f002 ffed 	bl	800613a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4613      	mov	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	335d      	adds	r3, #93	; 0x5d
 8003170:	2206      	movs	r2, #6
 8003172:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	015a      	lsls	r2, r3, #5
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4413      	add	r3, r2
 800317c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003180:	461a      	mov	r2, r3
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	6093      	str	r3, [r2, #8]
}
 8003186:	e167      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	d135      	bne.n	800320c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031ba:	f043 0302 	orr.w	r3, r3, #2
 80031be:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f002 ffb5 	bl	800613a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	015a      	lsls	r2, r3, #5
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	4413      	add	r3, r2
 80031d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031dc:	461a      	mov	r2, r3
 80031de:	2310      	movs	r3, #16
 80031e0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ee:	461a      	mov	r2, r3
 80031f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	68fa      	ldr	r2, [r7, #12]
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	440b      	add	r3, r1
 8003204:	335d      	adds	r3, #93	; 0x5d
 8003206:	2208      	movs	r2, #8
 8003208:	701a      	strb	r2, [r3, #0]
}
 800320a:	e125      	b.n	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	015a      	lsls	r2, r3, #5
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	4413      	add	r3, r2
 8003214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b02      	cmp	r3, #2
 8003220:	f040 811a 	bne.w	8003458 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	015a      	lsls	r2, r3, #5
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4413      	add	r3, r2
 800322c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	0151      	lsls	r1, r2, #5
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	440a      	add	r2, r1
 800323a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800323e:	f023 0302 	bic.w	r3, r3, #2
 8003242:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	00db      	lsls	r3, r3, #3
 8003250:	440b      	add	r3, r1
 8003252:	335d      	adds	r3, #93	; 0x5d
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d137      	bne.n	80032ca <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4613      	mov	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	440b      	add	r3, r1
 8003268:	335c      	adds	r3, #92	; 0x5c
 800326a:	2201      	movs	r2, #1
 800326c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	4613      	mov	r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	440b      	add	r3, r1
 800327c:	333f      	adds	r3, #63	; 0x3f
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b02      	cmp	r3, #2
 8003282:	d00b      	beq.n	800329c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003284:	6879      	ldr	r1, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	333f      	adds	r3, #63	; 0x3f
 8003294:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003296:	2b03      	cmp	r3, #3
 8003298:	f040 80c5 	bne.w	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	00db      	lsls	r3, r3, #3
 80032a8:	440b      	add	r3, r1
 80032aa:	3351      	adds	r3, #81	; 0x51
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	f083 0301 	eor.w	r3, r3, #1
 80032b2:	b2d8      	uxtb	r0, r3
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4613      	mov	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	00db      	lsls	r3, r3, #3
 80032c0:	440b      	add	r3, r1
 80032c2:	3351      	adds	r3, #81	; 0x51
 80032c4:	4602      	mov	r2, r0
 80032c6:	701a      	strb	r2, [r3, #0]
 80032c8:	e0ad      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	4613      	mov	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	335d      	adds	r3, #93	; 0x5d
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b03      	cmp	r3, #3
 80032de:	d10a      	bne.n	80032f6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	4613      	mov	r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	4413      	add	r3, r2
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	440b      	add	r3, r1
 80032ee:	335c      	adds	r3, #92	; 0x5c
 80032f0:	2202      	movs	r2, #2
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e097      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	335d      	adds	r3, #93	; 0x5d
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d10a      	bne.n	8003322 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	00db      	lsls	r3, r3, #3
 8003318:	440b      	add	r3, r1
 800331a:	335c      	adds	r3, #92	; 0x5c
 800331c:	2202      	movs	r2, #2
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e081      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	4413      	add	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	440b      	add	r3, r1
 8003330:	335d      	adds	r3, #93	; 0x5d
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d10a      	bne.n	800334e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	4613      	mov	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	440b      	add	r3, r1
 8003346:	335c      	adds	r3, #92	; 0x5c
 8003348:	2205      	movs	r2, #5
 800334a:	701a      	strb	r2, [r3, #0]
 800334c:	e06b      	b.n	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	440b      	add	r3, r1
 800335c:	335d      	adds	r3, #93	; 0x5d
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b06      	cmp	r3, #6
 8003362:	d00a      	beq.n	800337a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4613      	mov	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	440b      	add	r3, r1
 8003372:	335d      	adds	r3, #93	; 0x5d
 8003374:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003376:	2b08      	cmp	r3, #8
 8003378:	d155      	bne.n	8003426 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	440b      	add	r3, r1
 8003388:	3358      	adds	r3, #88	; 0x58
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	1c59      	adds	r1, r3, #1
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	4403      	add	r3, r0
 800339c:	3358      	adds	r3, #88	; 0x58
 800339e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	440b      	add	r3, r1
 80033ae:	3358      	adds	r3, #88	; 0x58
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	d914      	bls.n	80033e0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	440b      	add	r3, r1
 80033c4:	3358      	adds	r3, #88	; 0x58
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	335c      	adds	r3, #92	; 0x5c
 80033da:	2204      	movs	r2, #4
 80033dc:	701a      	strb	r2, [r3, #0]
 80033de:	e009      	b.n	80033f4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	00db      	lsls	r3, r3, #3
 80033ec:	440b      	add	r3, r1
 80033ee:	335c      	adds	r3, #92	; 0x5c
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	015a      	lsls	r2, r3, #5
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4413      	add	r3, r2
 80033fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800340a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003412:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4413      	add	r3, r2
 800341c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003420:	461a      	mov	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	015a      	lsls	r2, r3, #5
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4413      	add	r3, r2
 800342e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003432:	461a      	mov	r2, r3
 8003434:	2302      	movs	r3, #2
 8003436:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	b2d8      	uxtb	r0, r3
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	440b      	add	r3, r1
 800344a:	335c      	adds	r3, #92	; 0x5c
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	4601      	mov	r1, r0
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f004 fee6 	bl	8008224 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003458:	bf00      	nop
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08a      	sub	sp, #40	; 0x28
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800346e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003470:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	0c5b      	lsrs	r3, r3, #17
 8003486:	f003 030f 	and.w	r3, r3, #15
 800348a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	091b      	lsrs	r3, r3, #4
 8003490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003494:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d003      	beq.n	80034a4 <HCD_RXQLVL_IRQHandler+0x44>
 800349c:	2b05      	cmp	r3, #5
 800349e:	f000 8082 	beq.w	80035a6 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80034a2:	e083      	b.n	80035ac <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d07f      	beq.n	80035aa <HCD_RXQLVL_IRQHandler+0x14a>
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4613      	mov	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	440b      	add	r3, r1
 80034b8:	3344      	adds	r3, #68	; 0x44
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d074      	beq.n	80035aa <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	3344      	adds	r3, #68	; 0x44
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	b292      	uxth	r2, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f002 f9cd 	bl	800587a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	440b      	add	r3, r1
 80034ee:	3344      	adds	r3, #68	; 0x44
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	18d1      	adds	r1, r2, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	00db      	lsls	r3, r3, #3
 8003502:	4403      	add	r3, r0
 8003504:	3344      	adds	r3, #68	; 0x44
 8003506:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4613      	mov	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	440b      	add	r3, r1
 8003516:	334c      	adds	r3, #76	; 0x4c
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	18d1      	adds	r1, r2, r3
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	4403      	add	r3, r0
 800352c:	334c      	adds	r3, #76	; 0x4c
 800352e:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HCD_RXQLVL_IRQHandler+0x154>)
 8003540:	4013      	ands	r3, r2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d031      	beq.n	80035aa <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	6a3b      	ldr	r3, [r7, #32]
 800354c:	4413      	add	r3, r2
 800354e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800355c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003564:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	015a      	lsls	r2, r3, #5
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	4413      	add	r3, r2
 800356e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003572:	461a      	mov	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	69ba      	ldr	r2, [r7, #24]
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	440b      	add	r3, r1
 8003586:	3350      	adds	r3, #80	; 0x50
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	f083 0301 	eor.w	r3, r3, #1
 800358e:	b2d8      	uxtb	r0, r3
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	440b      	add	r3, r1
 800359e:	3350      	adds	r3, #80	; 0x50
 80035a0:	4602      	mov	r2, r0
 80035a2:	701a      	strb	r2, [r3, #0]
      break;
 80035a4:	e001      	b.n	80035aa <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 80035a6:	bf00      	nop
 80035a8:	e000      	b.n	80035ac <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80035aa:	bf00      	nop
  }
}
 80035ac:	bf00      	nop
 80035ae:	3728      	adds	r7, #40	; 0x28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	1ff80000 	.word	0x1ff80000

080035b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80035e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d113      	bne.n	8003618 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d10a      	bne.n	8003610 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699a      	ldr	r2, [r3, #24]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8003608:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f004 fdee 	bl	80081ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f043 0302 	orr.w	r3, r3, #2
 8003616:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b08      	cmp	r3, #8
 8003620:	d147      	bne.n	80036b2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f043 0308 	orr.w	r3, r3, #8
 8003628:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b04      	cmp	r3, #4
 8003632:	d129      	bne.n	8003688 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	2b02      	cmp	r3, #2
 800363a:	d113      	bne.n	8003664 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003642:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003646:	d106      	bne.n	8003656 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f002 fa4e 	bl	8005af0 <USB_InitFSLSPClkSel>
 8003654:	e011      	b.n	800367a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2101      	movs	r1, #1
 800365c:	4618      	mov	r0, r3
 800365e:	f002 fa47 	bl	8005af0 <USB_InitFSLSPClkSel>
 8003662:	e00a      	b.n	800367a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003672:	461a      	mov	r2, r3
 8003674:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003678:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f004 fde0 	bl	8008240 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f004 fdb3 	bl	80081ec <HAL_HCD_Connect_Callback>
 8003686:	e014      	b.n	80036b2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f004 fde7 	bl	800825c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800369c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80036a0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80036b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f003 0320 	and.w	r3, r3, #32
 80036b8:	2b20      	cmp	r3, #32
 80036ba:	d103      	bne.n	80036c4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ca:	461a      	mov	r2, r3
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	6013      	str	r3, [r2, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e11f      	b.n	800392a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fd fe2e 	bl	8001360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800373c:	f001 f9de 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8003740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a7b      	ldr	r2, [pc, #492]	; (8003934 <HAL_I2C_Init+0x25c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d807      	bhi.n	800375c <HAL_I2C_Init+0x84>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a7a      	ldr	r2, [pc, #488]	; (8003938 <HAL_I2C_Init+0x260>)
 8003750:	4293      	cmp	r3, r2
 8003752:	bf94      	ite	ls
 8003754:	2301      	movls	r3, #1
 8003756:	2300      	movhi	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e006      	b.n	800376a <HAL_I2C_Init+0x92>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a77      	ldr	r2, [pc, #476]	; (800393c <HAL_I2C_Init+0x264>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0db      	b.n	800392a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a72      	ldr	r2, [pc, #456]	; (8003940 <HAL_I2C_Init+0x268>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0c9b      	lsrs	r3, r3, #18
 800377c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a64      	ldr	r2, [pc, #400]	; (8003934 <HAL_I2C_Init+0x25c>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <HAL_I2C_Init+0xd4>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	e009      	b.n	80037c0 <HAL_I2C_Init+0xe8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	4a63      	ldr	r2, [pc, #396]	; (8003944 <HAL_I2C_Init+0x26c>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	3301      	adds	r3, #1
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4956      	ldr	r1, [pc, #344]	; (8003934 <HAL_I2C_Init+0x25c>)
 80037dc:	428b      	cmp	r3, r1
 80037de:	d80d      	bhi.n	80037fc <HAL_I2C_Init+0x124>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e59      	subs	r1, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ee:	3301      	adds	r3, #1
 80037f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	bf38      	it	cc
 80037f8:	2304      	movcc	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1c4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x150>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x176>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x17e>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1c4>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1a4>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1c4>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e128      	b.n	8003bac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003960:	b2db      	uxtb	r3, r3
 8003962:	2b00      	cmp	r3, #0
 8003964:	d109      	bne.n	800397a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <HAL_I2S_Init+0x26c>)
 8003972:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7fd fd3b 	bl	80013f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2202      	movs	r2, #2
 800397e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69db      	ldr	r3, [r3, #28]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	6812      	ldr	r2, [r2, #0]
 800398c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003990:	f023 030f 	bic.w	r3, r3, #15
 8003994:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2202      	movs	r2, #2
 800399c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d060      	beq.n	8003a68 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80039ae:	2310      	movs	r3, #16
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e001      	b.n	80039b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d802      	bhi.n	80039c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f001 f9a2 	bl	8004d10 <HAL_RCCEx_GetPeriphCLKFreq>
 80039cc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d6:	d125      	bne.n	8003a24 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d010      	beq.n	8003a02 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4413      	add	r3, r2
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	461a      	mov	r2, r3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	3305      	adds	r3, #5
 80039fe:	613b      	str	r3, [r7, #16]
 8003a00:	e01f      	b.n	8003a42 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	461a      	mov	r2, r3
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	3305      	adds	r3, #5
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e00e      	b.n	8003a42 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	461a      	mov	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3e:	3305      	adds	r3, #5
 8003a40:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	4a5c      	ldr	r2, [pc, #368]	; (8003bb8 <HAL_I2S_Init+0x270>)
 8003a46:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4a:	08db      	lsrs	r3, r3, #3
 8003a4c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	085b      	lsrs	r3, r3, #1
 8003a5e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	021b      	lsls	r3, r3, #8
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	e003      	b.n	8003a70 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a68:	2302      	movs	r3, #2
 8003a6a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d902      	bls.n	8003a7c <HAL_I2S_Init+0x134>
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	2bff      	cmp	r3, #255	; 0xff
 8003a7a:	d907      	bls.n	8003a8c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f043 0210 	orr.w	r2, r3, #16
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e08f      	b.n	8003bac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691a      	ldr	r2, [r3, #16]
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	ea42 0103 	orr.w	r1, r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69fa      	ldr	r2, [r7, #28]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	69db      	ldr	r3, [r3, #28]
 8003aa6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003aaa:	f023 030f 	bic.w	r3, r3, #15
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6851      	ldr	r1, [r2, #4]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6892      	ldr	r2, [r2, #8]
 8003ab6:	4311      	orrs	r1, r2
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	68d2      	ldr	r2, [r2, #12]
 8003abc:	4311      	orrs	r1, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6992      	ldr	r2, [r2, #24]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	431a      	orrs	r2, r3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ace:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d161      	bne.n	8003b9c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a38      	ldr	r2, [pc, #224]	; (8003bbc <HAL_I2S_Init+0x274>)
 8003adc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a37      	ldr	r2, [pc, #220]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d101      	bne.n	8003aec <HAL_I2S_Init+0x1a4>
 8003ae8:	4b36      	ldr	r3, [pc, #216]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003aea:	e001      	b.n	8003af0 <HAL_I2S_Init+0x1a8>
 8003aec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003af0:	69db      	ldr	r3, [r3, #28]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	4932      	ldr	r1, [pc, #200]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003af8:	428a      	cmp	r2, r1
 8003afa:	d101      	bne.n	8003b00 <HAL_I2S_Init+0x1b8>
 8003afc:	4a31      	ldr	r2, [pc, #196]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003afe:	e001      	b.n	8003b04 <HAL_I2S_Init+0x1bc>
 8003b00:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003b04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003b08:	f023 030f 	bic.w	r3, r3, #15
 8003b0c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a2b      	ldr	r2, [pc, #172]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d101      	bne.n	8003b1c <HAL_I2S_Init+0x1d4>
 8003b18:	4b2a      	ldr	r3, [pc, #168]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b1a:	e001      	b.n	8003b20 <HAL_I2S_Init+0x1d8>
 8003b1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b20:	2202      	movs	r2, #2
 8003b22:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2S_Init+0x1ea>
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b30:	e001      	b.n	8003b36 <HAL_I2S_Init+0x1ee>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b42:	d003      	beq.n	8003b4c <HAL_I2S_Init+0x204>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d103      	bne.n	8003b54 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e001      	b.n	8003b58 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	b299      	uxth	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8003b6e:	4303      	orrs	r3, r0
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	430b      	orrs	r3, r1
 8003b74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8003b76:	4313      	orrs	r3, r2
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	897b      	ldrh	r3, [r7, #10]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b84:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <HAL_I2S_Init+0x278>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2S_Init+0x24c>
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <HAL_I2S_Init+0x27c>)
 8003b92:	e001      	b.n	8003b98 <HAL_I2S_Init+0x250>
 8003b94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b98:	897a      	ldrh	r2, [r7, #10]
 8003b9a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	08003cbf 	.word	0x08003cbf
 8003bb8:	cccccccd 	.word	0xcccccccd
 8003bbc:	08003dd5 	.word	0x08003dd5
 8003bc0:	40003800 	.word	0x40003800
 8003bc4:	40003400 	.word	0x40003400

08003bc8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003be4:	bf00      	nop
 8003be6:	370c      	adds	r7, #12
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	881a      	ldrh	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	1c9a      	adds	r2, r3, #2
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c26:	b29b      	uxth	r3, r3
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10e      	bne.n	8003c58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f7ff ffb8 	bl	8003bc8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c58:	bf00      	nop
 8003c5a:	3708      	adds	r7, #8
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	b292      	uxth	r2, r2
 8003c74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7a:	1c9a      	adds	r2, r3, #2
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d10e      	bne.n	8003cb6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ca6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff ff93 	bl	8003bdc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b086      	sub	sp, #24
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d13a      	bne.n	8003d50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d109      	bne.n	8003cf8 <I2S_IRQHandler+0x3a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cee:	2b40      	cmp	r3, #64	; 0x40
 8003cf0:	d102      	bne.n	8003cf8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff ffb4 	bl	8003c60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfe:	2b40      	cmp	r3, #64	; 0x40
 8003d00:	d126      	bne.n	8003d50 <I2S_IRQHandler+0x92>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f003 0320 	and.w	r3, r3, #32
 8003d0c:	2b20      	cmp	r3, #32
 8003d0e:	d11f      	bne.n	8003d50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d20:	2300      	movs	r3, #0
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	613b      	str	r3, [r7, #16]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	613b      	str	r3, [r7, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f043 0202 	orr.w	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff ff50 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d136      	bne.n	8003dca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d109      	bne.n	8003d7a <I2S_IRQHandler+0xbc>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d70:	2b80      	cmp	r3, #128	; 0x80
 8003d72:	d102      	bne.n	8003d7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff ff45 	bl	8003c04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f003 0308 	and.w	r3, r3, #8
 8003d80:	2b08      	cmp	r3, #8
 8003d82:	d122      	bne.n	8003dca <I2S_IRQHandler+0x10c>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b20      	cmp	r3, #32
 8003d90:	d11b      	bne.n	8003dca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003da0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003da2:	2300      	movs	r3, #0
 8003da4:	60fb      	str	r3, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	f043 0204 	orr.w	r2, r3, #4
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f7ff ff13 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dca:	bf00      	nop
 8003dcc:	3718      	adds	r7, #24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4aa2      	ldr	r2, [pc, #648]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d101      	bne.n	8003df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003dee:	4ba2      	ldr	r3, [pc, #648]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003df0:	e001      	b.n	8003df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a9b      	ldr	r2, [pc, #620]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e0c:	4b9a      	ldr	r3, [pc, #616]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e0e:	e001      	b.n	8003e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e20:	d004      	beq.n	8003e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 8099 	bne.w	8003f5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d107      	bne.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d002      	beq.n	8003e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f925 	bl	8004090 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d107      	bne.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d002      	beq.n	8003e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f9c8 	bl	80041f0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e66:	2b40      	cmp	r3, #64	; 0x40
 8003e68:	d13a      	bne.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0320 	and.w	r3, r3, #32
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d035      	beq.n	8003ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a7e      	ldr	r2, [pc, #504]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e7e:	4b7e      	ldr	r3, [pc, #504]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e80:	e001      	b.n	8003e86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4979      	ldr	r1, [pc, #484]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003e8e:	428b      	cmp	r3, r1
 8003e90:	d101      	bne.n	8003e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e92:	4b79      	ldr	r3, [pc, #484]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003e94:	e001      	b.n	8003e9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60fb      	str	r3, [r7, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	60fb      	str	r3, [r7, #12]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff fe88 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b08      	cmp	r3, #8
 8003ee8:	f040 80be 	bne.w	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0320 	and.w	r3, r3, #32
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80b8 	beq.w	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a59      	ldr	r2, [pc, #356]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f12:	4b59      	ldr	r3, [pc, #356]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f14:	e001      	b.n	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4954      	ldr	r1, [pc, #336]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003f22:	428b      	cmp	r3, r1
 8003f24:	d101      	bne.n	8003f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f26:	4b54      	ldr	r3, [pc, #336]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003f28:	e001      	b.n	8003f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f34:	2300      	movs	r3, #0
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	60bb      	str	r3, [r7, #8]
 8003f40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4e:	f043 0204 	orr.w	r2, r3, #4
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f7ff fe4a 	bl	8003bf0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f5c:	e084      	b.n	8004068 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d107      	bne.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f8be 	bl	80040f4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d107      	bne.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8fd 	bl	800418c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f98:	2b40      	cmp	r3, #64	; 0x40
 8003f9a:	d12f      	bne.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02a      	beq.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a2e      	ldr	r2, [pc, #184]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d101      	bne.n	8003fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003fc0:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fc2:	e001      	b.n	8003fc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4929      	ldr	r1, [pc, #164]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d101      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003fd4:	4b28      	ldr	r3, [pc, #160]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003fd6:	e001      	b.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fe0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fee:	f043 0202 	orr.w	r2, r3, #2
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff fdfa 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b08      	cmp	r3, #8
 8004004:	d131      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d02c      	beq.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a17      	ldr	r2, [pc, #92]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800401a:	4b17      	ldr	r3, [pc, #92]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800401c:	e001      	b.n	8004022 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800401e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4912      	ldr	r1, [pc, #72]	; (8004074 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800402a:	428b      	cmp	r3, r1
 800402c:	d101      	bne.n	8004032 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800402e:	4b12      	ldr	r3, [pc, #72]	; (8004078 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8004030:	e001      	b.n	8004036 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8004032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004036:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800403a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800404a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0204 	orr.w	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7ff fdc5 	bl	8003bf0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004066:	e000      	b.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004068:	bf00      	nop
}
 800406a:	bf00      	nop
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40003800 	.word	0x40003800
 8004078:	40003400 	.word	0x40003400

0800407c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	1c99      	adds	r1, r3, #2
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6251      	str	r1, [r2, #36]	; 0x24
 80040a2:	881a      	ldrh	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	3b01      	subs	r3, #1
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d113      	bne.n	80040ea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040d0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d106      	bne.n	80040ea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ffc9 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	1c99      	adds	r1, r3, #2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6251      	str	r1, [r2, #36]	; 0x24
 8004106:	8819      	ldrh	r1, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a1d      	ldr	r2, [pc, #116]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <I2SEx_TxISR_I2SExt+0x22>
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004114:	e001      	b.n	800411a <I2SEx_TxISR_I2SExt+0x26>
 8004116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411a:	460a      	mov	r2, r1
 800411c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004122:	b29b      	uxth	r3, r3
 8004124:	3b01      	subs	r3, #1
 8004126:	b29a      	uxth	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004130:	b29b      	uxth	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d121      	bne.n	800417a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a12      	ldr	r2, [pc, #72]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d101      	bne.n	8004144 <I2SEx_TxISR_I2SExt+0x50>
 8004140:	4b11      	ldr	r3, [pc, #68]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004142:	e001      	b.n	8004148 <I2SEx_TxISR_I2SExt+0x54>
 8004144:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	490d      	ldr	r1, [pc, #52]	; (8004184 <I2SEx_TxISR_I2SExt+0x90>)
 8004150:	428b      	cmp	r3, r1
 8004152:	d101      	bne.n	8004158 <I2SEx_TxISR_I2SExt+0x64>
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <I2SEx_TxISR_I2SExt+0x94>)
 8004156:	e001      	b.n	800415c <I2SEx_TxISR_I2SExt+0x68>
 8004158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800415c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004160:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d106      	bne.n	800417a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7ff ff81 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40003800 	.word	0x40003800
 8004188:	40003400 	.word	0x40003400

0800418c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d8      	ldr	r0, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	1c99      	adds	r1, r3, #2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041a4:	b282      	uxth	r2, r0
 80041a6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d113      	bne.n	80041e8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d106      	bne.n	80041e8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f7ff ff4a 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a20      	ldr	r2, [pc, #128]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <I2SEx_RxISR_I2SExt+0x16>
 8004202:	4b20      	ldr	r3, [pc, #128]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 8004204:	e001      	b.n	800420a <I2SEx_RxISR_I2SExt+0x1a>
 8004206:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800420a:	68d8      	ldr	r0, [r3, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004210:	1c99      	adds	r1, r3, #2
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004216:	b282      	uxth	r2, r0
 8004218:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a12      	ldr	r2, [pc, #72]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <I2SEx_RxISR_I2SExt+0x50>
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 800423e:	e001      	b.n	8004244 <I2SEx_RxISR_I2SExt+0x54>
 8004240:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004244:	685a      	ldr	r2, [r3, #4]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	490d      	ldr	r1, [pc, #52]	; (8004280 <I2SEx_RxISR_I2SExt+0x90>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d101      	bne.n	8004254 <I2SEx_RxISR_I2SExt+0x64>
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <I2SEx_RxISR_I2SExt+0x94>)
 8004252:	e001      	b.n	8004258 <I2SEx_RxISR_I2SExt+0x68>
 8004254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004258:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800425c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004262:	b29b      	uxth	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d106      	bne.n	8004276 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7ff ff03 	bl	800407c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004276:	bf00      	nop
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40003800 	.word	0x40003800
 8004284:	40003400 	.word	0x40003400

08004288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e25b      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0301 	and.w	r3, r3, #1
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d075      	beq.n	8004392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042a6:	4ba3      	ldr	r3, [pc, #652]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d00c      	beq.n	80042cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042b2:	4ba0      	ldr	r3, [pc, #640]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d112      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042be:	4b9d      	ldr	r3, [pc, #628]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b99      	ldr	r3, [pc, #612]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d05b      	beq.n	8004390 <HAL_RCC_OscConfig+0x108>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d157      	bne.n	8004390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e236      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x74>
 80042ee:	4b91      	ldr	r3, [pc, #580]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a90      	ldr	r2, [pc, #576]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e01d      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x98>
 8004306:	4b8b      	ldr	r3, [pc, #556]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a8a      	ldr	r2, [pc, #552]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a87      	ldr	r2, [pc, #540]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0xb0>
 8004320:	4b84      	ldr	r3, [pc, #528]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a83      	ldr	r2, [pc, #524]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004326:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a80      	ldr	r2, [pc, #512]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004332:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d013      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004340:	f7fd fa58 	bl	80017f4 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	e008      	b.n	800435a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004348:	f7fd fa54 	bl	80017f4 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	2b64      	cmp	r3, #100	; 0x64
 8004354:	d901      	bls.n	800435a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e1fb      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800435a:	4b76      	ldr	r3, [pc, #472]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d0f0      	beq.n	8004348 <HAL_RCC_OscConfig+0xc0>
 8004366:	e014      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fa44 	bl	80017f4 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fd fa40 	bl	80017f4 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b64      	cmp	r3, #100	; 0x64
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e1e7      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004382:	4b6c      	ldr	r3, [pc, #432]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0xe8>
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d063      	beq.n	8004466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800439e:	4b65      	ldr	r3, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 030c 	and.w	r3, r3, #12
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00b      	beq.n	80043c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043aa:	4b62      	ldr	r3, [pc, #392]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11c      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d116      	bne.n	80043f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043c2:	4b5c      	ldr	r3, [pc, #368]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d001      	beq.n	80043da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e1bb      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043da:	4b56      	ldr	r3, [pc, #344]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4952      	ldr	r1, [pc, #328]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ee:	e03a      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d020      	beq.n	800443a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f8:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 80043fa:	2201      	movs	r2, #1
 80043fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fd f9f9 	bl	80017f4 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004406:	f7fd f9f5 	bl	80017f4 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e19c      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004418:	4b46      	ldr	r3, [pc, #280]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0302 	and.w	r3, r3, #2
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	00db      	lsls	r3, r3, #3
 8004432:	4940      	ldr	r1, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]
 8004438:	e015      	b.n	8004466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_RCC_OscConfig+0x2b0>)
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fd f9d8 	bl	80017f4 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004448:	f7fd f9d4 	bl	80017f4 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e17b      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800445a:	4b36      	ldr	r3, [pc, #216]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1f0      	bne.n	8004448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d030      	beq.n	80044d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d016      	beq.n	80044a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800447a:	4b30      	ldr	r3, [pc, #192]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004480:	f7fd f9b8 	bl	80017f4 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004488:	f7fd f9b4 	bl	80017f4 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b02      	cmp	r3, #2
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e15b      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800449a:	4b26      	ldr	r3, [pc, #152]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 800449c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d0f0      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
 80044a6:	e015      	b.n	80044d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a8:	4b24      	ldr	r3, [pc, #144]	; (800453c <HAL_RCC_OscConfig+0x2b4>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044ae:	f7fd f9a1 	bl	80017f4 <HAL_GetTick>
 80044b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044b6:	f7fd f99d 	bl	80017f4 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e144      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f0      	bne.n	80044b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0304 	and.w	r3, r3, #4
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 80a0 	beq.w	8004622 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10f      	bne.n	8004512 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f2:	2300      	movs	r3, #0
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	; 0x40
 8004502:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_OscConfig+0x2ac>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d121      	bne.n	8004562 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800451e:	4b08      	ldr	r3, [pc, #32]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a07      	ldr	r2, [pc, #28]	; (8004540 <HAL_RCC_OscConfig+0x2b8>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fd f963 	bl	80017f4 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004530:	e011      	b.n	8004556 <HAL_RCC_OscConfig+0x2ce>
 8004532:	bf00      	nop
 8004534:	40023800 	.word	0x40023800
 8004538:	42470000 	.word	0x42470000
 800453c:	42470e80 	.word	0x42470e80
 8004540:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fd f956 	bl	80017f4 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0fd      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004556:	4b81      	ldr	r3, [pc, #516]	; (800475c <HAL_RCC_OscConfig+0x4d4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d106      	bne.n	8004578 <HAL_RCC_OscConfig+0x2f0>
 800456a:	4b7d      	ldr	r3, [pc, #500]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 800456c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456e:	4a7c      	ldr	r2, [pc, #496]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004570:	f043 0301 	orr.w	r3, r3, #1
 8004574:	6713      	str	r3, [r2, #112]	; 0x70
 8004576:	e01c      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b05      	cmp	r3, #5
 800457e:	d10c      	bne.n	800459a <HAL_RCC_OscConfig+0x312>
 8004580:	4b77      	ldr	r3, [pc, #476]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a76      	ldr	r2, [pc, #472]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	4b74      	ldr	r3, [pc, #464]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a73      	ldr	r2, [pc, #460]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004592:	f043 0301 	orr.w	r3, r3, #1
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
 8004598:	e00b      	b.n	80045b2 <HAL_RCC_OscConfig+0x32a>
 800459a:	4b71      	ldr	r3, [pc, #452]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	4a70      	ldr	r2, [pc, #448]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80045a0:	f023 0301 	bic.w	r3, r3, #1
 80045a4:	6713      	str	r3, [r2, #112]	; 0x70
 80045a6:	4b6e      	ldr	r3, [pc, #440]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80045a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045aa:	4a6d      	ldr	r2, [pc, #436]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d015      	beq.n	80045e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ba:	f7fd f91b 	bl	80017f4 <HAL_GetTick>
 80045be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c0:	e00a      	b.n	80045d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045c2:	f7fd f917 	bl	80017f4 <HAL_GetTick>
 80045c6:	4602      	mov	r2, r0
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	1ad3      	subs	r3, r2, r3
 80045cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e0bc      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d8:	4b61      	ldr	r3, [pc, #388]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80045da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0ee      	beq.n	80045c2 <HAL_RCC_OscConfig+0x33a>
 80045e4:	e014      	b.n	8004610 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045e6:	f7fd f905 	bl	80017f4 <HAL_GetTick>
 80045ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045ee:	f7fd f901 	bl	80017f4 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e0a6      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ee      	bne.n	80045ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d105      	bne.n	8004622 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004616:	4b52      	ldr	r3, [pc, #328]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461a:	4a51      	ldr	r2, [pc, #324]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 800461c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004620:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	f000 8092 	beq.w	8004750 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800462c:	4b4c      	ldr	r3, [pc, #304]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f003 030c 	and.w	r3, r3, #12
 8004634:	2b08      	cmp	r3, #8
 8004636:	d05c      	beq.n	80046f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d141      	bne.n	80046c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004640:	4b48      	ldr	r3, [pc, #288]	; (8004764 <HAL_RCC_OscConfig+0x4dc>)
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004646:	f7fd f8d5 	bl	80017f4 <HAL_GetTick>
 800464a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800464c:	e008      	b.n	8004660 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464e:	f7fd f8d1 	bl	80017f4 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d901      	bls.n	8004660 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e078      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004660:	4b3f      	ldr	r3, [pc, #252]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1f0      	bne.n	800464e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69da      	ldr	r2, [r3, #28]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	019b      	lsls	r3, r3, #6
 800467c:	431a      	orrs	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	3b01      	subs	r3, #1
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	061b      	lsls	r3, r3, #24
 8004690:	4933      	ldr	r1, [pc, #204]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004692:	4313      	orrs	r3, r2
 8004694:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004696:	4b33      	ldr	r3, [pc, #204]	; (8004764 <HAL_RCC_OscConfig+0x4dc>)
 8004698:	2201      	movs	r2, #1
 800469a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469c:	f7fd f8aa 	bl	80017f4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a4:	f7fd f8a6 	bl	80017f4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e04d      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x41c>
 80046c2:	e045      	b.n	8004750 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c4:	4b27      	ldr	r3, [pc, #156]	; (8004764 <HAL_RCC_OscConfig+0x4dc>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ca:	f7fd f893 	bl	80017f4 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d0:	e008      	b.n	80046e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d2:	f7fd f88f 	bl	80017f4 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	2b02      	cmp	r3, #2
 80046de:	d901      	bls.n	80046e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e036      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e4:	4b1e      	ldr	r3, [pc, #120]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f0      	bne.n	80046d2 <HAL_RCC_OscConfig+0x44a>
 80046f0:	e02e      	b.n	8004750 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d101      	bne.n	80046fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e029      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046fe:	4b18      	ldr	r3, [pc, #96]	; (8004760 <HAL_RCC_OscConfig+0x4d8>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69db      	ldr	r3, [r3, #28]
 800470e:	429a      	cmp	r2, r3
 8004710:	d11c      	bne.n	800474c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d115      	bne.n	800474c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800472c:	4293      	cmp	r3, r2
 800472e:	d10d      	bne.n	800474c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d106      	bne.n	800474c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004748:	429a      	cmp	r2, r3
 800474a:	d001      	beq.n	8004750 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3718      	adds	r7, #24
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	40007000 	.word	0x40007000
 8004760:	40023800 	.word	0x40023800
 8004764:	42470060 	.word	0x42470060

08004768 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d101      	bne.n	800477c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	e0cc      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800477c:	4b68      	ldr	r3, [pc, #416]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	429a      	cmp	r2, r3
 8004788:	d90c      	bls.n	80047a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478a:	4b65      	ldr	r3, [pc, #404]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004792:	4b63      	ldr	r3, [pc, #396]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	429a      	cmp	r2, r3
 800479e:	d001      	beq.n	80047a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0b8      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0302 	and.w	r3, r3, #2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d020      	beq.n	80047f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d005      	beq.n	80047c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047bc:	4b59      	ldr	r3, [pc, #356]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	4a58      	ldr	r2, [pc, #352]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80047c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0308 	and.w	r3, r3, #8
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d4:	4b53      	ldr	r3, [pc, #332]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80047de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047e0:	4b50      	ldr	r3, [pc, #320]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	494d      	ldr	r1, [pc, #308]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	4313      	orrs	r3, r2
 80047f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d044      	beq.n	8004888 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d107      	bne.n	8004816 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004806:	4b47      	ldr	r3, [pc, #284]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d119      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e07f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	2b02      	cmp	r3, #2
 800481c:	d003      	beq.n	8004826 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004822:	2b03      	cmp	r3, #3
 8004824:	d107      	bne.n	8004836 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004826:	4b3f      	ldr	r3, [pc, #252]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d109      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e06f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004836:	4b3b      	ldr	r3, [pc, #236]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e067      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f023 0203 	bic.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	4934      	ldr	r1, [pc, #208]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004854:	4313      	orrs	r3, r2
 8004856:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004858:	f7fc ffcc 	bl	80017f4 <HAL_GetTick>
 800485c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	e00a      	b.n	8004876 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004860:	f7fc ffc8 	bl	80017f4 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	f241 3288 	movw	r2, #5000	; 0x1388
 800486e:	4293      	cmp	r3, r2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e04f      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004876:	4b2b      	ldr	r3, [pc, #172]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 020c 	and.w	r2, r3, #12
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	429a      	cmp	r2, r3
 8004886:	d1eb      	bne.n	8004860 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004888:	4b25      	ldr	r3, [pc, #148]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 030f 	and.w	r3, r3, #15
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	429a      	cmp	r2, r3
 8004894:	d20c      	bcs.n	80048b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004896:	4b22      	ldr	r3, [pc, #136]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800489e:	4b20      	ldr	r3, [pc, #128]	; (8004920 <HAL_RCC_ClockConfig+0x1b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 030f 	and.w	r3, r3, #15
 80048a6:	683a      	ldr	r2, [r7, #0]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e032      	b.n	8004916 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d008      	beq.n	80048ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	4916      	ldr	r1, [pc, #88]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d009      	beq.n	80048ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048da:	4b12      	ldr	r3, [pc, #72]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	00db      	lsls	r3, r3, #3
 80048e8:	490e      	ldr	r1, [pc, #56]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048ee:	f000 f821 	bl	8004934 <HAL_RCC_GetSysClockFreq>
 80048f2:	4601      	mov	r1, r0
 80048f4:	4b0b      	ldr	r3, [pc, #44]	; (8004924 <HAL_RCC_ClockConfig+0x1bc>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	091b      	lsrs	r3, r3, #4
 80048fa:	f003 030f 	and.w	r3, r3, #15
 80048fe:	4a0a      	ldr	r2, [pc, #40]	; (8004928 <HAL_RCC_ClockConfig+0x1c0>)
 8004900:	5cd3      	ldrb	r3, [r2, r3]
 8004902:	fa21 f303 	lsr.w	r3, r1, r3
 8004906:	4a09      	ldr	r2, [pc, #36]	; (800492c <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <HAL_RCC_ClockConfig+0x1c8>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc ff2c 	bl	800176c <HAL_InitTick>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40023c00 	.word	0x40023c00
 8004924:	40023800 	.word	0x40023800
 8004928:	08008874 	.word	0x08008874
 800492c:	20000000 	.word	0x20000000
 8004930:	20000004 	.word	0x20000004

08004934 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004936:	b085      	sub	sp, #20
 8004938:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	2300      	movs	r3, #0
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004946:	2300      	movs	r3, #0
 8004948:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800494a:	4b63      	ldr	r3, [pc, #396]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f003 030c 	and.w	r3, r3, #12
 8004952:	2b04      	cmp	r3, #4
 8004954:	d007      	beq.n	8004966 <HAL_RCC_GetSysClockFreq+0x32>
 8004956:	2b08      	cmp	r3, #8
 8004958:	d008      	beq.n	800496c <HAL_RCC_GetSysClockFreq+0x38>
 800495a:	2b00      	cmp	r3, #0
 800495c:	f040 80b4 	bne.w	8004ac8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4b5e      	ldr	r3, [pc, #376]	; (8004adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004962:	60bb      	str	r3, [r7, #8]
       break;
 8004964:	e0b3      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004966:	4b5e      	ldr	r3, [pc, #376]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004968:	60bb      	str	r3, [r7, #8]
      break;
 800496a:	e0b0      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800496c:	4b5a      	ldr	r3, [pc, #360]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004974:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004976:	4b58      	ldr	r3, [pc, #352]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d04a      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004982:	4b55      	ldr	r3, [pc, #340]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	f04f 0400 	mov.w	r4, #0
 800498c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	ea03 0501 	and.w	r5, r3, r1
 8004998:	ea04 0602 	and.w	r6, r4, r2
 800499c:	4629      	mov	r1, r5
 800499e:	4632      	mov	r2, r6
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	f04f 0400 	mov.w	r4, #0
 80049a8:	0154      	lsls	r4, r2, #5
 80049aa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80049ae:	014b      	lsls	r3, r1, #5
 80049b0:	4619      	mov	r1, r3
 80049b2:	4622      	mov	r2, r4
 80049b4:	1b49      	subs	r1, r1, r5
 80049b6:	eb62 0206 	sbc.w	r2, r2, r6
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	f04f 0400 	mov.w	r4, #0
 80049c2:	0194      	lsls	r4, r2, #6
 80049c4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80049c8:	018b      	lsls	r3, r1, #6
 80049ca:	1a5b      	subs	r3, r3, r1
 80049cc:	eb64 0402 	sbc.w	r4, r4, r2
 80049d0:	f04f 0100 	mov.w	r1, #0
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	00e2      	lsls	r2, r4, #3
 80049da:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80049de:	00d9      	lsls	r1, r3, #3
 80049e0:	460b      	mov	r3, r1
 80049e2:	4614      	mov	r4, r2
 80049e4:	195b      	adds	r3, r3, r5
 80049e6:	eb44 0406 	adc.w	r4, r4, r6
 80049ea:	f04f 0100 	mov.w	r1, #0
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	0262      	lsls	r2, r4, #9
 80049f4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80049f8:	0259      	lsls	r1, r3, #9
 80049fa:	460b      	mov	r3, r1
 80049fc:	4614      	mov	r4, r2
 80049fe:	4618      	mov	r0, r3
 8004a00:	4621      	mov	r1, r4
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f04f 0400 	mov.w	r4, #0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	4623      	mov	r3, r4
 8004a0c:	f7fb ffca 	bl	80009a4 <__aeabi_uldivmod>
 8004a10:	4603      	mov	r3, r0
 8004a12:	460c      	mov	r4, r1
 8004a14:	60fb      	str	r3, [r7, #12]
 8004a16:	e049      	b.n	8004aac <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a18:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	099b      	lsrs	r3, r3, #6
 8004a1e:	f04f 0400 	mov.w	r4, #0
 8004a22:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004a26:	f04f 0200 	mov.w	r2, #0
 8004a2a:	ea03 0501 	and.w	r5, r3, r1
 8004a2e:	ea04 0602 	and.w	r6, r4, r2
 8004a32:	4629      	mov	r1, r5
 8004a34:	4632      	mov	r2, r6
 8004a36:	f04f 0300 	mov.w	r3, #0
 8004a3a:	f04f 0400 	mov.w	r4, #0
 8004a3e:	0154      	lsls	r4, r2, #5
 8004a40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004a44:	014b      	lsls	r3, r1, #5
 8004a46:	4619      	mov	r1, r3
 8004a48:	4622      	mov	r2, r4
 8004a4a:	1b49      	subs	r1, r1, r5
 8004a4c:	eb62 0206 	sbc.w	r2, r2, r6
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	0194      	lsls	r4, r2, #6
 8004a5a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004a5e:	018b      	lsls	r3, r1, #6
 8004a60:	1a5b      	subs	r3, r3, r1
 8004a62:	eb64 0402 	sbc.w	r4, r4, r2
 8004a66:	f04f 0100 	mov.w	r1, #0
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	00e2      	lsls	r2, r4, #3
 8004a70:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004a74:	00d9      	lsls	r1, r3, #3
 8004a76:	460b      	mov	r3, r1
 8004a78:	4614      	mov	r4, r2
 8004a7a:	195b      	adds	r3, r3, r5
 8004a7c:	eb44 0406 	adc.w	r4, r4, r6
 8004a80:	f04f 0100 	mov.w	r1, #0
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	02a2      	lsls	r2, r4, #10
 8004a8a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004a8e:	0299      	lsls	r1, r3, #10
 8004a90:	460b      	mov	r3, r1
 8004a92:	4614      	mov	r4, r2
 8004a94:	4618      	mov	r0, r3
 8004a96:	4621      	mov	r1, r4
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f04f 0400 	mov.w	r4, #0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	f7fb ff7f 	bl	80009a4 <__aeabi_uldivmod>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	460c      	mov	r4, r1
 8004aaa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004aac:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	005b      	lsls	r3, r3, #1
 8004aba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004abc:	68fa      	ldr	r2, [r7, #12]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac4:	60bb      	str	r3, [r7, #8]
      break;
 8004ac6:	e002      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004aca:	60bb      	str	r3, [r7, #8]
      break;
 8004acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ace:	68bb      	ldr	r3, [r7, #8]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	00f42400 	.word	0x00f42400
 8004ae0:	007a1200 	.word	0x007a1200

08004ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20000000 	.word	0x20000000

08004afc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b00:	f7ff fff0 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b04:	4601      	mov	r1, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0a9b      	lsrs	r3, r3, #10
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4a03      	ldr	r2, [pc, #12]	; (8004b20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b12:	5cd3      	ldrb	r3, [r2, r3]
 8004b14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	08008884 	.word	0x08008884

08004b24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b28:	f7ff ffdc 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b2c:	4601      	mov	r1, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0b5b      	lsrs	r3, r3, #13
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4a03      	ldr	r2, [pc, #12]	; (8004b48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b3a:	5cd3      	ldrb	r3, [r2, r3]
 8004b3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	08008884 	.word	0x08008884

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d035      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b74:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fc fe3b 	bl	80017f4 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b82:	f7fc fe37 	bl	80017f4 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0b0      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b94:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	019a      	lsls	r2, r3, #6
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	071b      	lsls	r3, r3, #28
 8004bac:	4955      	ldr	r1, [pc, #340]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb4:	4b52      	ldr	r3, [pc, #328]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fc fe1b 	bl	80017f4 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fc fe17 	bl	80017f4 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e090      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8083 	beq.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	4a43      	ldr	r2, [pc, #268]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fc fded 	bl	80017f4 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c1e:	f7fc fde9 	bl	80017f4 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e062      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c30:	4b35      	ldr	r3, [pc, #212]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3c:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c44:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d028      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6a:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c70:	4a24      	ldr	r2, [pc, #144]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c76:	4b23      	ldr	r3, [pc, #140]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d114      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc fdb7 	bl	80017f4 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc fdb3 	bl	80017f4 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e02a      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb8:	d10d      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cba:	4b12      	ldr	r3, [pc, #72]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cce:	490d      	ldr	r1, [pc, #52]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cee:	4905      	ldr	r1, [pc, #20]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	42470068 	.word	0x42470068
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	42470e40 	.word	0x42470e40

08004d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d13d      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d2e:	4b22      	ldr	r3, [pc, #136]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d36:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d004      	beq.n	8004d48 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d12f      	bne.n	8004da2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d42:	4b1e      	ldr	r3, [pc, #120]	; (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d44:	617b      	str	r3, [r7, #20]
          break;
 8004d46:	e02f      	b.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d54:	d108      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d56:	4b18      	ldr	r3, [pc, #96]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d5e:	4a18      	ldr	r2, [pc, #96]	; (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d64:	613b      	str	r3, [r7, #16]
 8004d66:	e007      	b.n	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d70:	4a14      	ldr	r2, [pc, #80]	; (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	fb02 f303 	mul.w	r3, r2, r3
 8004d8a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d92:	0f1b      	lsrs	r3, r3, #28
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	617b      	str	r3, [r7, #20]
          break;
 8004da0:	e002      	b.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
          break;
 8004da6:	bf00      	nop
        }
      }
      break;
 8004da8:	bf00      	nop
    }
  }
  return frequency;
 8004daa:	697b      	ldr	r3, [r7, #20]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	371c      	adds	r7, #28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	00bb8000 	.word	0x00bb8000
 8004dc0:	007a1200 	.word	0x007a1200
 8004dc4:	00f42400 	.word	0x00f42400

08004dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b082      	sub	sp, #8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e056      	b.n	8004e88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d106      	bne.n	8004dfa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fc fb63 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2202      	movs	r2, #2
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e36:	431a      	orrs	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	69db      	ldr	r3, [r3, #28]
 8004e3c:	431a      	orrs	r2, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	ea42 0103 	orr.w	r1, r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	f003 0104 	and.w	r1, r3, #4
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69da      	ldr	r2, [r3, #28]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e03f      	b.n	8004f22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d106      	bne.n	8004ebc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fc fb4a 	bl	8001550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2224      	movs	r2, #36	; 0x24
 8004ec0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ed2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 f829 	bl	8004f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691a      	ldr	r2, [r3, #16]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ee8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	695a      	ldr	r2, [r3, #20]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ef8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68da      	ldr	r2, [r3, #12]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f30:	b085      	sub	sp, #20
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68da      	ldr	r2, [r3, #12]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	430a      	orrs	r2, r1
 8004f4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	695b      	ldr	r3, [r3, #20]
 8004f5a:	431a      	orrs	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f6e:	f023 030c 	bic.w	r3, r3, #12
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699a      	ldr	r2, [r3, #24]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f9a:	f040 818b 	bne.w	80052b4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4ac1      	ldr	r2, [pc, #772]	; (80052a8 <UART_SetConfig+0x37c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d005      	beq.n	8004fb4 <UART_SetConfig+0x88>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4abf      	ldr	r2, [pc, #764]	; (80052ac <UART_SetConfig+0x380>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f040 80bd 	bne.w	800512e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fb4:	f7ff fdb6 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 8004fb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	461d      	mov	r5, r3
 8004fbe:	f04f 0600 	mov.w	r6, #0
 8004fc2:	46a8      	mov	r8, r5
 8004fc4:	46b1      	mov	r9, r6
 8004fc6:	eb18 0308 	adds.w	r3, r8, r8
 8004fca:	eb49 0409 	adc.w	r4, r9, r9
 8004fce:	4698      	mov	r8, r3
 8004fd0:	46a1      	mov	r9, r4
 8004fd2:	eb18 0805 	adds.w	r8, r8, r5
 8004fd6:	eb49 0906 	adc.w	r9, r9, r6
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fe6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fee:	4688      	mov	r8, r1
 8004ff0:	4691      	mov	r9, r2
 8004ff2:	eb18 0005 	adds.w	r0, r8, r5
 8004ff6:	eb49 0106 	adc.w	r1, r9, r6
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	461d      	mov	r5, r3
 8005000:	f04f 0600 	mov.w	r6, #0
 8005004:	196b      	adds	r3, r5, r5
 8005006:	eb46 0406 	adc.w	r4, r6, r6
 800500a:	461a      	mov	r2, r3
 800500c:	4623      	mov	r3, r4
 800500e:	f7fb fcc9 	bl	80009a4 <__aeabi_uldivmod>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	461a      	mov	r2, r3
 8005018:	4ba5      	ldr	r3, [pc, #660]	; (80052b0 <UART_SetConfig+0x384>)
 800501a:	fba3 2302 	umull	r2, r3, r3, r2
 800501e:	095b      	lsrs	r3, r3, #5
 8005020:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	461d      	mov	r5, r3
 8005028:	f04f 0600 	mov.w	r6, #0
 800502c:	46a9      	mov	r9, r5
 800502e:	46b2      	mov	sl, r6
 8005030:	eb19 0309 	adds.w	r3, r9, r9
 8005034:	eb4a 040a 	adc.w	r4, sl, sl
 8005038:	4699      	mov	r9, r3
 800503a:	46a2      	mov	sl, r4
 800503c:	eb19 0905 	adds.w	r9, r9, r5
 8005040:	eb4a 0a06 	adc.w	sl, sl, r6
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005050:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005054:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005058:	4689      	mov	r9, r1
 800505a:	4692      	mov	sl, r2
 800505c:	eb19 0005 	adds.w	r0, r9, r5
 8005060:	eb4a 0106 	adc.w	r1, sl, r6
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	461d      	mov	r5, r3
 800506a:	f04f 0600 	mov.w	r6, #0
 800506e:	196b      	adds	r3, r5, r5
 8005070:	eb46 0406 	adc.w	r4, r6, r6
 8005074:	461a      	mov	r2, r3
 8005076:	4623      	mov	r3, r4
 8005078:	f7fb fc94 	bl	80009a4 <__aeabi_uldivmod>
 800507c:	4603      	mov	r3, r0
 800507e:	460c      	mov	r4, r1
 8005080:	461a      	mov	r2, r3
 8005082:	4b8b      	ldr	r3, [pc, #556]	; (80052b0 <UART_SetConfig+0x384>)
 8005084:	fba3 1302 	umull	r1, r3, r3, r2
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	2164      	movs	r1, #100	; 0x64
 800508c:	fb01 f303 	mul.w	r3, r1, r3
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	3332      	adds	r3, #50	; 0x32
 8005096:	4a86      	ldr	r2, [pc, #536]	; (80052b0 <UART_SetConfig+0x384>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	005b      	lsls	r3, r3, #1
 80050a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050a4:	4498      	add	r8, r3
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	461d      	mov	r5, r3
 80050aa:	f04f 0600 	mov.w	r6, #0
 80050ae:	46a9      	mov	r9, r5
 80050b0:	46b2      	mov	sl, r6
 80050b2:	eb19 0309 	adds.w	r3, r9, r9
 80050b6:	eb4a 040a 	adc.w	r4, sl, sl
 80050ba:	4699      	mov	r9, r3
 80050bc:	46a2      	mov	sl, r4
 80050be:	eb19 0905 	adds.w	r9, r9, r5
 80050c2:	eb4a 0a06 	adc.w	sl, sl, r6
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050da:	4689      	mov	r9, r1
 80050dc:	4692      	mov	sl, r2
 80050de:	eb19 0005 	adds.w	r0, r9, r5
 80050e2:	eb4a 0106 	adc.w	r1, sl, r6
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	461d      	mov	r5, r3
 80050ec:	f04f 0600 	mov.w	r6, #0
 80050f0:	196b      	adds	r3, r5, r5
 80050f2:	eb46 0406 	adc.w	r4, r6, r6
 80050f6:	461a      	mov	r2, r3
 80050f8:	4623      	mov	r3, r4
 80050fa:	f7fb fc53 	bl	80009a4 <__aeabi_uldivmod>
 80050fe:	4603      	mov	r3, r0
 8005100:	460c      	mov	r4, r1
 8005102:	461a      	mov	r2, r3
 8005104:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <UART_SetConfig+0x384>)
 8005106:	fba3 1302 	umull	r1, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2164      	movs	r1, #100	; 0x64
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	3332      	adds	r3, #50	; 0x32
 8005118:	4a65      	ldr	r2, [pc, #404]	; (80052b0 <UART_SetConfig+0x384>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f003 0207 	and.w	r2, r3, #7
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4442      	add	r2, r8
 800512a:	609a      	str	r2, [r3, #8]
 800512c:	e26f      	b.n	800560e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800512e:	f7ff fce5 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8005132:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	461d      	mov	r5, r3
 8005138:	f04f 0600 	mov.w	r6, #0
 800513c:	46a8      	mov	r8, r5
 800513e:	46b1      	mov	r9, r6
 8005140:	eb18 0308 	adds.w	r3, r8, r8
 8005144:	eb49 0409 	adc.w	r4, r9, r9
 8005148:	4698      	mov	r8, r3
 800514a:	46a1      	mov	r9, r4
 800514c:	eb18 0805 	adds.w	r8, r8, r5
 8005150:	eb49 0906 	adc.w	r9, r9, r6
 8005154:	f04f 0100 	mov.w	r1, #0
 8005158:	f04f 0200 	mov.w	r2, #0
 800515c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005160:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005164:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005168:	4688      	mov	r8, r1
 800516a:	4691      	mov	r9, r2
 800516c:	eb18 0005 	adds.w	r0, r8, r5
 8005170:	eb49 0106 	adc.w	r1, r9, r6
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	461d      	mov	r5, r3
 800517a:	f04f 0600 	mov.w	r6, #0
 800517e:	196b      	adds	r3, r5, r5
 8005180:	eb46 0406 	adc.w	r4, r6, r6
 8005184:	461a      	mov	r2, r3
 8005186:	4623      	mov	r3, r4
 8005188:	f7fb fc0c 	bl	80009a4 <__aeabi_uldivmod>
 800518c:	4603      	mov	r3, r0
 800518e:	460c      	mov	r4, r1
 8005190:	461a      	mov	r2, r3
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <UART_SetConfig+0x384>)
 8005194:	fba3 2302 	umull	r2, r3, r3, r2
 8005198:	095b      	lsrs	r3, r3, #5
 800519a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	461d      	mov	r5, r3
 80051a2:	f04f 0600 	mov.w	r6, #0
 80051a6:	46a9      	mov	r9, r5
 80051a8:	46b2      	mov	sl, r6
 80051aa:	eb19 0309 	adds.w	r3, r9, r9
 80051ae:	eb4a 040a 	adc.w	r4, sl, sl
 80051b2:	4699      	mov	r9, r3
 80051b4:	46a2      	mov	sl, r4
 80051b6:	eb19 0905 	adds.w	r9, r9, r5
 80051ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80051be:	f04f 0100 	mov.w	r1, #0
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051d2:	4689      	mov	r9, r1
 80051d4:	4692      	mov	sl, r2
 80051d6:	eb19 0005 	adds.w	r0, r9, r5
 80051da:	eb4a 0106 	adc.w	r1, sl, r6
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	461d      	mov	r5, r3
 80051e4:	f04f 0600 	mov.w	r6, #0
 80051e8:	196b      	adds	r3, r5, r5
 80051ea:	eb46 0406 	adc.w	r4, r6, r6
 80051ee:	461a      	mov	r2, r3
 80051f0:	4623      	mov	r3, r4
 80051f2:	f7fb fbd7 	bl	80009a4 <__aeabi_uldivmod>
 80051f6:	4603      	mov	r3, r0
 80051f8:	460c      	mov	r4, r1
 80051fa:	461a      	mov	r2, r3
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <UART_SetConfig+0x384>)
 80051fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005202:	095b      	lsrs	r3, r3, #5
 8005204:	2164      	movs	r1, #100	; 0x64
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	3332      	adds	r3, #50	; 0x32
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <UART_SetConfig+0x384>)
 8005212:	fba2 2303 	umull	r2, r3, r2, r3
 8005216:	095b      	lsrs	r3, r3, #5
 8005218:	005b      	lsls	r3, r3, #1
 800521a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800521e:	4498      	add	r8, r3
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	461d      	mov	r5, r3
 8005224:	f04f 0600 	mov.w	r6, #0
 8005228:	46a9      	mov	r9, r5
 800522a:	46b2      	mov	sl, r6
 800522c:	eb19 0309 	adds.w	r3, r9, r9
 8005230:	eb4a 040a 	adc.w	r4, sl, sl
 8005234:	4699      	mov	r9, r3
 8005236:	46a2      	mov	sl, r4
 8005238:	eb19 0905 	adds.w	r9, r9, r5
 800523c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005240:	f04f 0100 	mov.w	r1, #0
 8005244:	f04f 0200 	mov.w	r2, #0
 8005248:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800524c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005250:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005254:	4689      	mov	r9, r1
 8005256:	4692      	mov	sl, r2
 8005258:	eb19 0005 	adds.w	r0, r9, r5
 800525c:	eb4a 0106 	adc.w	r1, sl, r6
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	461d      	mov	r5, r3
 8005266:	f04f 0600 	mov.w	r6, #0
 800526a:	196b      	adds	r3, r5, r5
 800526c:	eb46 0406 	adc.w	r4, r6, r6
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f7fb fb96 	bl	80009a4 <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	461a      	mov	r2, r3
 800527e:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <UART_SetConfig+0x384>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	; 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	3332      	adds	r3, #50	; 0x32
 8005292:	4a07      	ldr	r2, [pc, #28]	; (80052b0 <UART_SetConfig+0x384>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 0207 	and.w	r2, r3, #7
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4442      	add	r2, r8
 80052a4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80052a6:	e1b2      	b.n	800560e <UART_SetConfig+0x6e2>
 80052a8:	40011000 	.word	0x40011000
 80052ac:	40011400 	.word	0x40011400
 80052b0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4ad7      	ldr	r2, [pc, #860]	; (8005618 <UART_SetConfig+0x6ec>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d005      	beq.n	80052ca <UART_SetConfig+0x39e>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4ad6      	ldr	r2, [pc, #856]	; (800561c <UART_SetConfig+0x6f0>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f040 80d1 	bne.w	800546c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80052ca:	f7ff fc2b 	bl	8004b24 <HAL_RCC_GetPCLK2Freq>
 80052ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	469a      	mov	sl, r3
 80052d4:	f04f 0b00 	mov.w	fp, #0
 80052d8:	46d0      	mov	r8, sl
 80052da:	46d9      	mov	r9, fp
 80052dc:	eb18 0308 	adds.w	r3, r8, r8
 80052e0:	eb49 0409 	adc.w	r4, r9, r9
 80052e4:	4698      	mov	r8, r3
 80052e6:	46a1      	mov	r9, r4
 80052e8:	eb18 080a 	adds.w	r8, r8, sl
 80052ec:	eb49 090b 	adc.w	r9, r9, fp
 80052f0:	f04f 0100 	mov.w	r1, #0
 80052f4:	f04f 0200 	mov.w	r2, #0
 80052f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005300:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005304:	4688      	mov	r8, r1
 8005306:	4691      	mov	r9, r2
 8005308:	eb1a 0508 	adds.w	r5, sl, r8
 800530c:	eb4b 0609 	adc.w	r6, fp, r9
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	4619      	mov	r1, r3
 8005316:	f04f 0200 	mov.w	r2, #0
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	0094      	lsls	r4, r2, #2
 8005324:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005328:	008b      	lsls	r3, r1, #2
 800532a:	461a      	mov	r2, r3
 800532c:	4623      	mov	r3, r4
 800532e:	4628      	mov	r0, r5
 8005330:	4631      	mov	r1, r6
 8005332:	f7fb fb37 	bl	80009a4 <__aeabi_uldivmod>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	461a      	mov	r2, r3
 800533c:	4bb8      	ldr	r3, [pc, #736]	; (8005620 <UART_SetConfig+0x6f4>)
 800533e:	fba3 2302 	umull	r2, r3, r3, r2
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	469b      	mov	fp, r3
 800534c:	f04f 0c00 	mov.w	ip, #0
 8005350:	46d9      	mov	r9, fp
 8005352:	46e2      	mov	sl, ip
 8005354:	eb19 0309 	adds.w	r3, r9, r9
 8005358:	eb4a 040a 	adc.w	r4, sl, sl
 800535c:	4699      	mov	r9, r3
 800535e:	46a2      	mov	sl, r4
 8005360:	eb19 090b 	adds.w	r9, r9, fp
 8005364:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005374:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005378:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800537c:	4689      	mov	r9, r1
 800537e:	4692      	mov	sl, r2
 8005380:	eb1b 0509 	adds.w	r5, fp, r9
 8005384:	eb4c 060a 	adc.w	r6, ip, sl
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	4619      	mov	r1, r3
 800538e:	f04f 0200 	mov.w	r2, #0
 8005392:	f04f 0300 	mov.w	r3, #0
 8005396:	f04f 0400 	mov.w	r4, #0
 800539a:	0094      	lsls	r4, r2, #2
 800539c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053a0:	008b      	lsls	r3, r1, #2
 80053a2:	461a      	mov	r2, r3
 80053a4:	4623      	mov	r3, r4
 80053a6:	4628      	mov	r0, r5
 80053a8:	4631      	mov	r1, r6
 80053aa:	f7fb fafb 	bl	80009a4 <__aeabi_uldivmod>
 80053ae:	4603      	mov	r3, r0
 80053b0:	460c      	mov	r4, r1
 80053b2:	461a      	mov	r2, r3
 80053b4:	4b9a      	ldr	r3, [pc, #616]	; (8005620 <UART_SetConfig+0x6f4>)
 80053b6:	fba3 1302 	umull	r1, r3, r3, r2
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	2164      	movs	r1, #100	; 0x64
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	3332      	adds	r3, #50	; 0x32
 80053c8:	4a95      	ldr	r2, [pc, #596]	; (8005620 <UART_SetConfig+0x6f4>)
 80053ca:	fba2 2303 	umull	r2, r3, r2, r3
 80053ce:	095b      	lsrs	r3, r3, #5
 80053d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d4:	4498      	add	r8, r3
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	469b      	mov	fp, r3
 80053da:	f04f 0c00 	mov.w	ip, #0
 80053de:	46d9      	mov	r9, fp
 80053e0:	46e2      	mov	sl, ip
 80053e2:	eb19 0309 	adds.w	r3, r9, r9
 80053e6:	eb4a 040a 	adc.w	r4, sl, sl
 80053ea:	4699      	mov	r9, r3
 80053ec:	46a2      	mov	sl, r4
 80053ee:	eb19 090b 	adds.w	r9, r9, fp
 80053f2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053f6:	f04f 0100 	mov.w	r1, #0
 80053fa:	f04f 0200 	mov.w	r2, #0
 80053fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005402:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005406:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800540a:	4689      	mov	r9, r1
 800540c:	4692      	mov	sl, r2
 800540e:	eb1b 0509 	adds.w	r5, fp, r9
 8005412:	eb4c 060a 	adc.w	r6, ip, sl
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	4619      	mov	r1, r3
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f04f 0400 	mov.w	r4, #0
 8005428:	0094      	lsls	r4, r2, #2
 800542a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800542e:	008b      	lsls	r3, r1, #2
 8005430:	461a      	mov	r2, r3
 8005432:	4623      	mov	r3, r4
 8005434:	4628      	mov	r0, r5
 8005436:	4631      	mov	r1, r6
 8005438:	f7fb fab4 	bl	80009a4 <__aeabi_uldivmod>
 800543c:	4603      	mov	r3, r0
 800543e:	460c      	mov	r4, r1
 8005440:	461a      	mov	r2, r3
 8005442:	4b77      	ldr	r3, [pc, #476]	; (8005620 <UART_SetConfig+0x6f4>)
 8005444:	fba3 1302 	umull	r1, r3, r3, r2
 8005448:	095b      	lsrs	r3, r3, #5
 800544a:	2164      	movs	r1, #100	; 0x64
 800544c:	fb01 f303 	mul.w	r3, r1, r3
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	011b      	lsls	r3, r3, #4
 8005454:	3332      	adds	r3, #50	; 0x32
 8005456:	4a72      	ldr	r2, [pc, #456]	; (8005620 <UART_SetConfig+0x6f4>)
 8005458:	fba2 2303 	umull	r2, r3, r2, r3
 800545c:	095b      	lsrs	r3, r3, #5
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4442      	add	r2, r8
 8005468:	609a      	str	r2, [r3, #8]
 800546a:	e0d0      	b.n	800560e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800546c:	f7ff fb46 	bl	8004afc <HAL_RCC_GetPCLK1Freq>
 8005470:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	469a      	mov	sl, r3
 8005476:	f04f 0b00 	mov.w	fp, #0
 800547a:	46d0      	mov	r8, sl
 800547c:	46d9      	mov	r9, fp
 800547e:	eb18 0308 	adds.w	r3, r8, r8
 8005482:	eb49 0409 	adc.w	r4, r9, r9
 8005486:	4698      	mov	r8, r3
 8005488:	46a1      	mov	r9, r4
 800548a:	eb18 080a 	adds.w	r8, r8, sl
 800548e:	eb49 090b 	adc.w	r9, r9, fp
 8005492:	f04f 0100 	mov.w	r1, #0
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800549e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a6:	4688      	mov	r8, r1
 80054a8:	4691      	mov	r9, r2
 80054aa:	eb1a 0508 	adds.w	r5, sl, r8
 80054ae:	eb4b 0609 	adc.w	r6, fp, r9
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	4619      	mov	r1, r3
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	f04f 0400 	mov.w	r4, #0
 80054c4:	0094      	lsls	r4, r2, #2
 80054c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054ca:	008b      	lsls	r3, r1, #2
 80054cc:	461a      	mov	r2, r3
 80054ce:	4623      	mov	r3, r4
 80054d0:	4628      	mov	r0, r5
 80054d2:	4631      	mov	r1, r6
 80054d4:	f7fb fa66 	bl	80009a4 <__aeabi_uldivmod>
 80054d8:	4603      	mov	r3, r0
 80054da:	460c      	mov	r4, r1
 80054dc:	461a      	mov	r2, r3
 80054de:	4b50      	ldr	r3, [pc, #320]	; (8005620 <UART_SetConfig+0x6f4>)
 80054e0:	fba3 2302 	umull	r2, r3, r3, r2
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	469b      	mov	fp, r3
 80054ee:	f04f 0c00 	mov.w	ip, #0
 80054f2:	46d9      	mov	r9, fp
 80054f4:	46e2      	mov	sl, ip
 80054f6:	eb19 0309 	adds.w	r3, r9, r9
 80054fa:	eb4a 040a 	adc.w	r4, sl, sl
 80054fe:	4699      	mov	r9, r3
 8005500:	46a2      	mov	sl, r4
 8005502:	eb19 090b 	adds.w	r9, r9, fp
 8005506:	eb4a 0a0c 	adc.w	sl, sl, ip
 800550a:	f04f 0100 	mov.w	r1, #0
 800550e:	f04f 0200 	mov.w	r2, #0
 8005512:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005516:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800551a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800551e:	4689      	mov	r9, r1
 8005520:	4692      	mov	sl, r2
 8005522:	eb1b 0509 	adds.w	r5, fp, r9
 8005526:	eb4c 060a 	adc.w	r6, ip, sl
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	4619      	mov	r1, r3
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	f04f 0400 	mov.w	r4, #0
 800553c:	0094      	lsls	r4, r2, #2
 800553e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005542:	008b      	lsls	r3, r1, #2
 8005544:	461a      	mov	r2, r3
 8005546:	4623      	mov	r3, r4
 8005548:	4628      	mov	r0, r5
 800554a:	4631      	mov	r1, r6
 800554c:	f7fb fa2a 	bl	80009a4 <__aeabi_uldivmod>
 8005550:	4603      	mov	r3, r0
 8005552:	460c      	mov	r4, r1
 8005554:	461a      	mov	r2, r3
 8005556:	4b32      	ldr	r3, [pc, #200]	; (8005620 <UART_SetConfig+0x6f4>)
 8005558:	fba3 1302 	umull	r1, r3, r3, r2
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	2164      	movs	r1, #100	; 0x64
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	3332      	adds	r3, #50	; 0x32
 800556a:	4a2d      	ldr	r2, [pc, #180]	; (8005620 <UART_SetConfig+0x6f4>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005576:	4498      	add	r8, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	469b      	mov	fp, r3
 800557c:	f04f 0c00 	mov.w	ip, #0
 8005580:	46d9      	mov	r9, fp
 8005582:	46e2      	mov	sl, ip
 8005584:	eb19 0309 	adds.w	r3, r9, r9
 8005588:	eb4a 040a 	adc.w	r4, sl, sl
 800558c:	4699      	mov	r9, r3
 800558e:	46a2      	mov	sl, r4
 8005590:	eb19 090b 	adds.w	r9, r9, fp
 8005594:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005598:	f04f 0100 	mov.w	r1, #0
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055ac:	4689      	mov	r9, r1
 80055ae:	4692      	mov	sl, r2
 80055b0:	eb1b 0509 	adds.w	r5, fp, r9
 80055b4:	eb4c 060a 	adc.w	r6, ip, sl
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4619      	mov	r1, r3
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	f04f 0400 	mov.w	r4, #0
 80055ca:	0094      	lsls	r4, r2, #2
 80055cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80055d0:	008b      	lsls	r3, r1, #2
 80055d2:	461a      	mov	r2, r3
 80055d4:	4623      	mov	r3, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	4631      	mov	r1, r6
 80055da:	f7fb f9e3 	bl	80009a4 <__aeabi_uldivmod>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	461a      	mov	r2, r3
 80055e4:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <UART_SetConfig+0x6f4>)
 80055e6:	fba3 1302 	umull	r1, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	2164      	movs	r1, #100	; 0x64
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	3332      	adds	r3, #50	; 0x32
 80055f8:	4a09      	ldr	r2, [pc, #36]	; (8005620 <UART_SetConfig+0x6f4>)
 80055fa:	fba2 2303 	umull	r2, r3, r2, r3
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4442      	add	r2, r8
 800560a:	609a      	str	r2, [r3, #8]
}
 800560c:	e7ff      	b.n	800560e <UART_SetConfig+0x6e2>
 800560e:	bf00      	nop
 8005610:	3714      	adds	r7, #20
 8005612:	46bd      	mov	sp, r7
 8005614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005618:	40011000 	.word	0x40011000
 800561c:	40011400 	.word	0x40011400
 8005620:	51eb851f 	.word	0x51eb851f

08005624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005624:	b084      	sub	sp, #16
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]
 800562e:	f107 001c 	add.w	r0, r7, #28
 8005632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	2b01      	cmp	r3, #1
 800563a:	d122      	bne.n	8005682 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005666:	2b01      	cmp	r3, #1
 8005668:	d105      	bne.n	8005676 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f94a 	bl	8005910 <USB_CoreReset>
 800567c:	4603      	mov	r3, r0
 800567e:	73fb      	strb	r3, [r7, #15]
 8005680:	e01a      	b.n	80056b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f93e 	bl	8005910 <USB_CoreReset>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800569a:	2b00      	cmp	r3, #0
 800569c:	d106      	bne.n	80056ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	639a      	str	r2, [r3, #56]	; 0x38
 80056aa:	e005      	b.n	80056b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d10b      	bne.n	80056d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f043 0206 	orr.w	r2, r3, #6
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e2:	b004      	add	sp, #16
 80056e4:	4770      	bx	lr

080056e6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f043 0201 	orr.w	r2, r3, #1
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f023 0201 	bic.w	r2, r3, #1
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800571c:	2300      	movs	r3, #0
}
 800571e:	4618      	mov	r0, r3
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
 8005732:	460b      	mov	r3, r1
 8005734:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d106      	bne.n	8005756 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	68db      	ldr	r3, [r3, #12]
 800574c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
 8005754:	e00b      	b.n	800576e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68db      	ldr	r3, [r3, #12]
 8005760:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	60da      	str	r2, [r3, #12]
 8005768:	e001      	b.n	800576e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e003      	b.n	8005776 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800576e:	2032      	movs	r0, #50	; 0x32
 8005770:	f7fc f84c 	bl	800180c <HAL_Delay>

  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
	...

08005780 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800578a:	2300      	movs	r3, #0
 800578c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	f043 0220 	orr.w	r2, r3, #32
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a09      	ldr	r2, [pc, #36]	; (80057c8 <USB_FlushTxFifo+0x48>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e006      	b.n	80057ba <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	f003 0320 	and.w	r3, r3, #32
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d0f0      	beq.n	800579a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c4:	4770      	bx	lr
 80057c6:	bf00      	nop
 80057c8:	00030d40 	.word	0x00030d40

080057cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80057d4:	2300      	movs	r3, #0
 80057d6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2210      	movs	r2, #16
 80057dc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	4a09      	ldr	r2, [pc, #36]	; (800580c <USB_FlushRxFifo+0x40>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d901      	bls.n	80057f0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b10      	cmp	r3, #16
 80057fa:	d0f0      	beq.n	80057de <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	00030d40 	.word	0x00030d40

08005810 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	; 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	4611      	mov	r1, r2
 800581c:	461a      	mov	r2, r3
 800581e:	460b      	mov	r3, r1
 8005820:	71fb      	strb	r3, [r7, #7]
 8005822:	4613      	mov	r3, r2
 8005824:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800582e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	d11a      	bne.n	800586c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005836:	88bb      	ldrh	r3, [r7, #4]
 8005838:	3303      	adds	r3, #3
 800583a:	089b      	lsrs	r3, r3, #2
 800583c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800583e:	2300      	movs	r3, #0
 8005840:	61bb      	str	r3, [r7, #24]
 8005842:	e00f      	b.n	8005864 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005844:	79fb      	ldrb	r3, [r7, #7]
 8005846:	031a      	lsls	r2, r3, #12
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	4413      	add	r3, r2
 800584c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005850:	461a      	mov	r2, r3
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005858:	69fb      	ldr	r3, [r7, #28]
 800585a:	3304      	adds	r3, #4
 800585c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	3301      	adds	r3, #1
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	69ba      	ldr	r2, [r7, #24]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	429a      	cmp	r2, r3
 800586a:	d3eb      	bcc.n	8005844 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3724      	adds	r7, #36	; 0x24
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800587a:	b480      	push	{r7}
 800587c:	b089      	sub	sp, #36	; 0x24
 800587e:	af00      	add	r7, sp, #0
 8005880:	60f8      	str	r0, [r7, #12]
 8005882:	60b9      	str	r1, [r7, #8]
 8005884:	4613      	mov	r3, r2
 8005886:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005890:	88fb      	ldrh	r3, [r7, #6]
 8005892:	3303      	adds	r3, #3
 8005894:	089b      	lsrs	r3, r3, #2
 8005896:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	e00b      	b.n	80058b6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	601a      	str	r2, [r3, #0]
    pDest++;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	3304      	adds	r3, #4
 80058ae:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	3301      	adds	r3, #1
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d3ef      	bcc.n	800589e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80058be:	69fb      	ldr	r3, [r7, #28]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3724      	adds	r7, #36	; 0x24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4013      	ands	r3, r2
 80058e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058e4:	68fb      	ldr	r3, [r7, #12]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr

080058f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0301 	and.w	r3, r3, #1
}
 8005902:	4618      	mov	r0, r3
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
	...

08005910 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005910:	b480      	push	{r7}
 8005912:	b085      	sub	sp, #20
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	4a13      	ldr	r2, [pc, #76]	; (8005974 <USB_CoreReset+0x64>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e01b      	b.n	8005966 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	2b00      	cmp	r3, #0
 8005934:	daf2      	bge.n	800591c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005936:	2300      	movs	r3, #0
 8005938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	3301      	adds	r3, #1
 800594a:	60fb      	str	r3, [r7, #12]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4a09      	ldr	r2, [pc, #36]	; (8005974 <USB_CoreReset+0x64>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d901      	bls.n	8005958 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e006      	b.n	8005966 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d0f0      	beq.n	8005946 <USB_CoreReset+0x36>

  return HAL_OK;
 8005964:	2300      	movs	r3, #0
}
 8005966:	4618      	mov	r0, r3
 8005968:	3714      	adds	r7, #20
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	00030d40 	.word	0x00030d40

08005978 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005978:	b084      	sub	sp, #16
 800597a:	b580      	push	{r7, lr}
 800597c:	b084      	sub	sp, #16
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	f107 001c 	add.w	r0, r7, #28
 8005986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005994:	461a      	mov	r2, r3
 8005996:	2300      	movs	r3, #0
 8005998:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d018      	beq.n	80059fc <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d10a      	bne.n	80059e6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e014      	b.n	8005a10 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059f4:	f023 0304 	bic.w	r3, r3, #4
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	e009      	b.n	8005a10 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a0a:	f023 0304 	bic.w	r3, r3, #4
 8005a0e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005a10:	2110      	movs	r1, #16
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f7ff feb4 	bl	8005780 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff fed7 	bl	80057cc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
 8005a22:	e015      	b.n	8005a50 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a30:	461a      	mov	r2, r3
 8005a32:	f04f 33ff 	mov.w	r3, #4294967295
 8005a36:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	015a      	lsls	r2, r3, #5
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4413      	add	r3, r2
 8005a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a44:	461a      	mov	r2, r3
 8005a46:	2300      	movs	r3, #0
 8005a48:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d3e5      	bcc.n	8005a24 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005a58:	2101      	movs	r1, #1
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f8ac 	bl	8005bb8 <USB_DriveVbus>

  HAL_Delay(200U);
 8005a60:	20c8      	movs	r0, #200	; 0xc8
 8005a62:	f7fb fed3 	bl	800180c <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a72:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d00b      	beq.n	8005a98 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a86:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a14      	ldr	r2, [pc, #80]	; (8005adc <USB_HostInit+0x164>)
 8005a8c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a13      	ldr	r2, [pc, #76]	; (8005ae0 <USB_HostInit+0x168>)
 8005a92:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005a96:	e009      	b.n	8005aac <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	4a10      	ldr	r2, [pc, #64]	; (8005ae4 <USB_HostInit+0x16c>)
 8005aa2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a10      	ldr	r2, [pc, #64]	; (8005ae8 <USB_HostInit+0x170>)
 8005aa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	f043 0210 	orr.w	r2, r3, #16
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	4b0a      	ldr	r3, [pc, #40]	; (8005aec <USB_HostInit+0x174>)
 8005ac4:	4313      	orrs	r3, r2
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ad6:	b004      	add	sp, #16
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	01000200 	.word	0x01000200
 8005ae0:	00e00300 	.word	0x00e00300
 8005ae4:	00600080 	.word	0x00600080
 8005ae8:	004000e0 	.word	0x004000e0
 8005aec:	a3200008 	.word	0xa3200008

08005af0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b0e:	f023 0303 	bic.w	r3, r3, #3
 8005b12:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b1a:	681a      	ldr	r2, [r3, #0]
 8005b1c:	78fb      	ldrb	r3, [r7, #3]
 8005b1e:	f003 0303 	and.w	r3, r3, #3
 8005b22:	68f9      	ldr	r1, [r7, #12]
 8005b24:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005b2c:	78fb      	ldrb	r3, [r7, #3]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d107      	bne.n	8005b42 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b38:	461a      	mov	r2, r3
 8005b3a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005b3e:	6053      	str	r3, [r2, #4]
 8005b40:	e009      	b.n	8005b56 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005b42:	78fb      	ldrb	r3, [r7, #3]
 8005b44:	2b02      	cmp	r3, #2
 8005b46:	d106      	bne.n	8005b56 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b4e:	461a      	mov	r2, r3
 8005b50:	f241 7370 	movw	r3, #6000	; 0x1770
 8005b54:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005b56:	2300      	movs	r3, #0
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b84:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b92:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005b94:	2064      	movs	r0, #100	; 0x64
 8005b96:	f7fb fe39 	bl	800180c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ba2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba6:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005ba8:	200a      	movs	r0, #10
 8005baa:	f7fb fe2f 	bl	800180c <HAL_Delay>

  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005bdc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d109      	bne.n	8005bfc <USB_DriveVbus+0x44>
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d106      	bne.n	8005bfc <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005bf6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bfa:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c06:	d109      	bne.n	8005c1c <USB_DriveVbus+0x64>
 8005c08:	78fb      	ldrb	r3, [r7, #3]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c1a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3714      	adds	r7, #20
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	0c5b      	lsrs	r3, r3, #17
 8005c48:	f003 0303 	and.w	r3, r3, #3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3714      	adds	r7, #20
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b085      	sub	sp, #20
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	b29b      	uxth	r3, r3
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
	...

08005c7c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	4608      	mov	r0, r1
 8005c86:	4611      	mov	r1, r2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	70fb      	strb	r3, [r7, #3]
 8005c8e:	460b      	mov	r3, r1
 8005c90:	70bb      	strb	r3, [r7, #2]
 8005c92:	4613      	mov	r3, r2
 8005c94:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c96:	2300      	movs	r3, #0
 8005c98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005caa:	461a      	mov	r2, r3
 8005cac:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005cb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005cb6:	2b03      	cmp	r3, #3
 8005cb8:	d87e      	bhi.n	8005db8 <USB_HC_Init+0x13c>
 8005cba:	a201      	add	r2, pc, #4	; (adr r2, 8005cc0 <USB_HC_Init+0x44>)
 8005cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc0:	08005cd1 	.word	0x08005cd1
 8005cc4:	08005d7b 	.word	0x08005d7b
 8005cc8:	08005cd1 	.word	0x08005cd1
 8005ccc:	08005d3d 	.word	0x08005d3d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cdc:	461a      	mov	r2, r3
 8005cde:	f240 439d 	movw	r3, #1181	; 0x49d
 8005ce2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005ce4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da10      	bge.n	8005d0e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	0151      	lsls	r1, r2, #5
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	440a      	add	r2, r1
 8005d02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0a:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005d0c:	e057      	b.n	8005dbe <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d051      	beq.n	8005dbe <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005d1a:	78fb      	ldrb	r3, [r7, #3]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	0151      	lsls	r1, r2, #5
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	440a      	add	r2, r1
 8005d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d34:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d38:	60d3      	str	r3, [r2, #12]
      break;
 8005d3a:	e040      	b.n	8005dbe <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f240 639d 	movw	r3, #1693	; 0x69d
 8005d4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da34      	bge.n	8005dc2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	78fa      	ldrb	r2, [r7, #3]
 8005d68:	0151      	lsls	r1, r2, #5
 8005d6a:	68ba      	ldr	r2, [r7, #8]
 8005d6c:	440a      	add	r2, r1
 8005d6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d76:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005d78:	e023      	b.n	8005dc2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005d7a:	78fb      	ldrb	r3, [r7, #3]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d86:	461a      	mov	r2, r3
 8005d88:	f240 2325 	movw	r3, #549	; 0x225
 8005d8c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005d8e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	da17      	bge.n	8005dc6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005d96:	78fb      	ldrb	r3, [r7, #3]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	78fa      	ldrb	r2, [r7, #3]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	68ba      	ldr	r2, [r7, #8]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005db4:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005db6:	e006      	b.n	8005dc6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e004      	b.n	8005dc8 <USB_HC_Init+0x14c>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e002      	b.n	8005dc8 <USB_HC_Init+0x14c>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e000      	b.n	8005dc8 <USB_HC_Init+0x14c>
      break;
 8005dc6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dce:	699a      	ldr	r2, [r3, #24]
 8005dd0:	78fb      	ldrb	r3, [r7, #3]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005de2:	4313      	orrs	r3, r2
 8005de4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005df2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da03      	bge.n	8005e02 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	e001      	b.n	8005e06 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8005e02:	2300      	movs	r3, #0
 8005e04:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005e06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d103      	bne.n	8005e16 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005e0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e001      	b.n	8005e1a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e1a:	787b      	ldrb	r3, [r7, #1]
 8005e1c:	059b      	lsls	r3, r3, #22
 8005e1e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e22:	78bb      	ldrb	r3, [r7, #2]
 8005e24:	02db      	lsls	r3, r3, #11
 8005e26:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e2a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e30:	049b      	lsls	r3, r3, #18
 8005e32:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005e36:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e38:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005e3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005e3e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e44:	78fb      	ldrb	r3, [r7, #3]
 8005e46:	0159      	lsls	r1, r3, #5
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	440b      	add	r3, r1
 8005e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e50:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005e56:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005e58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005e5c:	2b03      	cmp	r3, #3
 8005e5e:	d10f      	bne.n	8005e80 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e7e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08c      	sub	sp, #48	; 0x30
 8005e94:	af02      	add	r7, sp, #8
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	785b      	ldrb	r3, [r3, #1]
 8005ea6:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005ea8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005eac:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d028      	beq.n	8005f0c <USB_HC_StartXfer+0x7c>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	791b      	ldrb	r3, [r3, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d124      	bne.n	8005f0c <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8005ec2:	79fb      	ldrb	r3, [r7, #7]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <USB_HC_StartXfer+0x50>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	795b      	ldrb	r3, [r3, #5]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	785b      	ldrb	r3, [r3, #1]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fa2e 	bl	8006338 <USB_DoPing>
      return HAL_OK;
 8005edc:	2300      	movs	r3, #0
 8005ede:	e112      	b.n	8006106 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d112      	bne.n	8005f0c <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	6a3b      	ldr	r3, [r7, #32]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	0151      	lsls	r1, r2, #5
 8005ef8:	6a3a      	ldr	r2, [r7, #32]
 8005efa:	440a      	add	r2, r1
 8005efc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f00:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005f04:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	691b      	ldr	r3, [r3, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d018      	beq.n	8005f46 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	8912      	ldrh	r2, [r2, #8]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	8912      	ldrh	r2, [r2, #8]
 8005f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f28:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005f2a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f2c:	8b7b      	ldrh	r3, [r7, #26]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d90b      	bls.n	8005f4a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005f32:	8b7b      	ldrh	r3, [r7, #26]
 8005f34:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005f36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	8912      	ldrh	r2, [r2, #8]
 8005f3c:	fb02 f203 	mul.w	r2, r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	611a      	str	r2, [r3, #16]
 8005f44:	e001      	b.n	8005f4a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005f46:	2301      	movs	r3, #1
 8005f48:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	78db      	ldrb	r3, [r3, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005f52:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	8912      	ldrh	r2, [r2, #8]
 8005f58:	fb02 f203 	mul.w	r2, r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f6a:	04d9      	lsls	r1, r3, #19
 8005f6c:	4b68      	ldr	r3, [pc, #416]	; (8006110 <USB_HC_StartXfer+0x280>)
 8005f6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	7a9b      	ldrb	r3, [r3, #10]
 8005f76:	075b      	lsls	r3, r3, #29
 8005f78:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f7c:	69f9      	ldr	r1, [r7, #28]
 8005f7e:	0148      	lsls	r0, r1, #5
 8005f80:	6a39      	ldr	r1, [r7, #32]
 8005f82:	4401      	add	r1, r0
 8005f84:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	68d9      	ldr	r1, [r3, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	015a      	lsls	r2, r3, #5
 8005f9a:	6a3b      	ldr	r3, [r7, #32]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa2:	460a      	mov	r2, r1
 8005fa4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	bf0c      	ite	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	2300      	movne	r3, #0
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	69fa      	ldr	r2, [r7, #28]
 8005fce:	0151      	lsls	r1, r2, #5
 8005fd0:	6a3a      	ldr	r2, [r7, #32]
 8005fd2:	440a      	add	r2, r1
 8005fd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005fd8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	7e7b      	ldrb	r3, [r7, #25]
 8005fee:	075b      	lsls	r3, r3, #29
 8005ff0:	69f9      	ldr	r1, [r7, #28]
 8005ff2:	0148      	lsls	r0, r1, #5
 8005ff4:	6a39      	ldr	r1, [r7, #32]
 8005ff6:	4401      	add	r1, r0
 8005ff8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	4413      	add	r3, r2
 8006008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a41      	ldr	r2, [pc, #260]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006010:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006012:	4b40      	ldr	r3, [pc, #256]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800601a:	4a3e      	ldr	r2, [pc, #248]	; (8006114 <USB_HC_StartXfer+0x284>)
 800601c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	78db      	ldrb	r3, [r3, #3]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d006      	beq.n	8006034 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006026:	4b3b      	ldr	r3, [pc, #236]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800602e:	4a39      	ldr	r2, [pc, #228]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	e005      	b.n	8006040 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800603c:	4a35      	ldr	r2, [pc, #212]	; (8006114 <USB_HC_StartXfer+0x284>)
 800603e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006040:	4b34      	ldr	r3, [pc, #208]	; (8006114 <USB_HC_StartXfer+0x284>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006048:	4a32      	ldr	r2, [pc, #200]	; (8006114 <USB_HC_StartXfer+0x284>)
 800604a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	4413      	add	r3, r2
 8006054:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006058:	461a      	mov	r2, r3
 800605a:	4b2e      	ldr	r3, [pc, #184]	; (8006114 <USB_HC_StartXfer+0x284>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d14e      	bne.n	8006104 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	78db      	ldrb	r3, [r3, #3]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d14a      	bne.n	8006104 <USB_HC_StartXfer+0x274>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d046      	beq.n	8006104 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	79db      	ldrb	r3, [r3, #7]
 800607a:	2b03      	cmp	r3, #3
 800607c:	d830      	bhi.n	80060e0 <USB_HC_StartXfer+0x250>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <USB_HC_StartXfer+0x1f4>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	08006095 	.word	0x08006095
 8006088:	080060b9 	.word	0x080060b9
 800608c:	08006095 	.word	0x08006095
 8006090:	080060b9 	.word	0x080060b9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	3303      	adds	r3, #3
 800609a:	089b      	lsrs	r3, r3, #2
 800609c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800609e:	8afa      	ldrh	r2, [r7, #22]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d91c      	bls.n	80060e4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f043 0220 	orr.w	r2, r3, #32
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	619a      	str	r2, [r3, #24]
          }
          break;
 80060b6:	e015      	b.n	80060e4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	3303      	adds	r3, #3
 80060be:	089b      	lsrs	r3, r3, #2
 80060c0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80060c2:	8afa      	ldrh	r2, [r7, #22]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d90a      	bls.n	80060e8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	619a      	str	r2, [r3, #24]
          }
          break;
 80060de:	e003      	b.n	80060e8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80060e0:	bf00      	nop
 80060e2:	e002      	b.n	80060ea <USB_HC_StartXfer+0x25a>
          break;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <USB_HC_StartXfer+0x25a>
          break;
 80060e8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	68d9      	ldr	r1, [r3, #12]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785a      	ldrb	r2, [r3, #1]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	b298      	uxth	r0, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	4603      	mov	r3, r0
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	f7ff fb86 	bl	8005810 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	; 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	1ff80000 	.word	0x1ff80000
 8006114:	200000b0 	.word	0x200000b0

08006118 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800612a:	695b      	ldr	r3, [r3, #20]
 800612c:	b29b      	uxth	r3, r3
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800613a:	b480      	push	{r7}
 800613c:	b087      	sub	sp, #28
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0c9b      	lsrs	r3, r3, #18
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <USB_HC_Halt+0x3a>
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	2b02      	cmp	r3, #2
 8006172:	d16c      	bne.n	800624e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	4413      	add	r3, r2
 800617c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68fa      	ldr	r2, [r7, #12]
 8006184:	0151      	lsls	r1, r2, #5
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	440a      	add	r2, r1
 800618a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800618e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006192:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d143      	bne.n	8006228 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061be:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80061de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	68fa      	ldr	r2, [r7, #12]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80061fe:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	3301      	adds	r3, #1
 8006204:	617b      	str	r3, [r7, #20]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800620c:	d81d      	bhi.n	800624a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	015a      	lsls	r2, r3, #5
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	4413      	add	r3, r2
 8006216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006220:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006224:	d0ec      	beq.n	8006200 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006226:	e080      	b.n	800632a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	0151      	lsls	r1, r2, #5
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	440a      	add	r2, r1
 800623e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006242:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006246:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006248:	e06f      	b.n	800632a <USB_HC_Halt+0x1f0>
          break;
 800624a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800624c:	e06d      	b.n	800632a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	015a      	lsls	r2, r3, #5
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4413      	add	r3, r2
 8006256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	0151      	lsls	r1, r2, #5
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	440a      	add	r2, r1
 8006264:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800626c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d143      	bne.n	8006306 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	4413      	add	r3, r2
 8006286:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	0151      	lsls	r1, r2, #5
 8006290:	693a      	ldr	r2, [r7, #16]
 8006292:	440a      	add	r2, r1
 8006294:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006298:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800629c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	015a      	lsls	r2, r3, #5
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	4413      	add	r3, r2
 80062a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	0151      	lsls	r1, r2, #5
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	440a      	add	r2, r1
 80062b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80062d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80062dc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	3301      	adds	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ea:	d81d      	bhi.n	8006328 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006302:	d0ec      	beq.n	80062de <USB_HC_Halt+0x1a4>
 8006304:	e011      	b.n	800632a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	4413      	add	r3, r2
 800630e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68fa      	ldr	r2, [r7, #12]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	440a      	add	r2, r1
 800631c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006324:	6013      	str	r3, [r2, #0]
 8006326:	e000      	b.n	800632a <USB_HC_Halt+0x1f0>
          break;
 8006328:	bf00      	nop
    }
  }

  return HAL_OK;
 800632a:	2300      	movs	r3, #0
}
 800632c:	4618      	mov	r0, r3
 800632e:	371c      	adds	r7, #28
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800634c:	2301      	movs	r3, #1
 800634e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	04da      	lsls	r2, r3, #19
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <USB_DoPing+0x74>)
 8006356:	4013      	ands	r3, r2
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	440a      	add	r2, r1
 8006360:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006364:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006368:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	4413      	add	r3, r2
 8006372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006380:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006388:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	015a      	lsls	r2, r3, #5
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4413      	add	r3, r2
 8006392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006396:	461a      	mov	r2, r3
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	371c      	adds	r7, #28
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	1ff80000 	.word	0x1ff80000

080063b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b086      	sub	sp, #24
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f7ff f9a1 	bl	8005708 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80063c6:	2110      	movs	r1, #16
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f7ff f9d9 	bl	8005780 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80063ce:	6878      	ldr	r0, [r7, #4]
 80063d0:	f7ff f9fc 	bl	80057cc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80063d4:	2300      	movs	r3, #0
 80063d6:	613b      	str	r3, [r7, #16]
 80063d8:	e01f      	b.n	800641a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80063f0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80063f8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006400:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	015a      	lsls	r2, r3, #5
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4413      	add	r3, r2
 800640a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800640e:	461a      	mov	r2, r3
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	3301      	adds	r3, #1
 8006418:	613b      	str	r3, [r7, #16]
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b0f      	cmp	r3, #15
 800641e:	d9dc      	bls.n	80063da <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006420:	2300      	movs	r3, #0
 8006422:	613b      	str	r3, [r7, #16]
 8006424:	e034      	b.n	8006490 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	015a      	lsls	r2, r3, #5
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	4413      	add	r3, r2
 800642e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800643c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006444:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800644c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800645a:	461a      	mov	r2, r3
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3301      	adds	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800646c:	d80c      	bhi.n	8006488 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006480:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006484:	d0ec      	beq.n	8006460 <USB_StopHost+0xb0>
 8006486:	e000      	b.n	800648a <USB_StopHost+0xda>
        break;
 8006488:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	3301      	adds	r3, #1
 800648e:	613b      	str	r3, [r7, #16]
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	2b0f      	cmp	r3, #15
 8006494:	d9c7      	bls.n	8006426 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800649c:	461a      	mov	r2, r3
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f7ff f91a 	bl	80056e6 <USB_EnableGlobalInt>

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80064bc:	b590      	push	{r4, r7, lr}
 80064be:	b089      	sub	sp, #36	; 0x24
 80064c0:	af04      	add	r7, sp, #16
 80064c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80064c4:	2302      	movs	r3, #2
 80064c6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80064c8:	2301      	movs	r3, #1
 80064ca:	2202      	movs	r2, #2
 80064cc:	2102      	movs	r1, #2
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fc3a 	bl	8006d48 <USBH_FindInterface>
 80064d4:	4603      	mov	r3, r0
 80064d6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80064d8:	7bbb      	ldrb	r3, [r7, #14]
 80064da:	2bff      	cmp	r3, #255	; 0xff
 80064dc:	f000 812a 	beq.w	8006734 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80064e0:	7bbb      	ldrb	r3, [r7, #14]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fc13 	bl	8006d10 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80064f0:	2050      	movs	r0, #80	; 0x50
 80064f2:	f002 f8df 	bl	80086b4 <malloc>
 80064f6:	4603      	mov	r3, r0
 80064f8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006500:	69db      	ldr	r3, [r3, #28]
 8006502:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8006504:	7bbb      	ldrb	r3, [r7, #14]
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	211a      	movs	r1, #26
 800650a:	fb01 f303 	mul.w	r3, r1, r3
 800650e:	4413      	add	r3, r2
 8006510:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	b25b      	sxtb	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	da15      	bge.n	8006548 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800651c:	7bbb      	ldrb	r3, [r7, #14]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	211a      	movs	r1, #26
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	211a      	movs	r1, #26
 8006538:	fb01 f303 	mul.w	r3, r1, r3
 800653c:	4413      	add	r3, r2
 800653e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006542:	881a      	ldrh	r2, [r3, #0]
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	785b      	ldrb	r3, [r3, #1]
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f001 fd21 	bl	8007f96 <USBH_AllocPipe>
 8006554:	4603      	mov	r3, r0
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	7819      	ldrb	r1, [r3, #0]
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	7858      	ldrb	r0, [r3, #1]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	8952      	ldrh	r2, [r2, #10]
 8006574:	9202      	str	r2, [sp, #8]
 8006576:	2203      	movs	r2, #3
 8006578:	9201      	str	r2, [sp, #4]
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	4623      	mov	r3, r4
 800657e:	4602      	mov	r2, r0
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fcd9 	bl	8007f38 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	4619      	mov	r1, r3
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 ffe0 	bl	8008554 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8006594:	2300      	movs	r3, #0
 8006596:	2200      	movs	r2, #0
 8006598:	210a      	movs	r1, #10
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fbd4 	bl	8006d48 <USBH_FindInterface>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 80065a4:	7bbb      	ldrb	r3, [r7, #14]
 80065a6:	2bff      	cmp	r3, #255	; 0xff
 80065a8:	f000 80c4 	beq.w	8006734 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80065ac:	7bbb      	ldrb	r3, [r7, #14]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	211a      	movs	r1, #26
 80065b2:	fb01 f303 	mul.w	r3, r1, r3
 80065b6:	4413      	add	r3, r2
 80065b8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	b25b      	sxtb	r3, r3
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	da16      	bge.n	80065f2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065c4:	7bbb      	ldrb	r3, [r7, #14]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	211a      	movs	r1, #26
 80065ca:	fb01 f303 	mul.w	r3, r1, r3
 80065ce:	4413      	add	r3, r2
 80065d0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80065da:	7bbb      	ldrb	r3, [r7, #14]
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	211a      	movs	r1, #26
 80065e0:	fb01 f303 	mul.w	r3, r1, r3
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80065ea:	881a      	ldrh	r2, [r3, #0]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	835a      	strh	r2, [r3, #26]
 80065f0:	e015      	b.n	800661e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	211a      	movs	r1, #26
 80065f8:	fb01 f303 	mul.w	r3, r1, r3
 80065fc:	4413      	add	r3, r2
 80065fe:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8006602:	781a      	ldrb	r2, [r3, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	211a      	movs	r1, #26
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	4413      	add	r3, r2
 8006614:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	687a      	ldr	r2, [r7, #4]
 8006622:	211a      	movs	r1, #26
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	4413      	add	r3, r2
 800662a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	b25b      	sxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	da16      	bge.n	8006664 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006636:	7bbb      	ldrb	r3, [r7, #14]
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	211a      	movs	r1, #26
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	4413      	add	r3, r2
 8006642:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006646:	781a      	ldrb	r2, [r3, #0]
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	211a      	movs	r1, #26
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	4413      	add	r3, r2
 8006658:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800665c:	881a      	ldrh	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	835a      	strh	r2, [r3, #26]
 8006662:	e015      	b.n	8006690 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006664:	7bbb      	ldrb	r3, [r7, #14]
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	211a      	movs	r1, #26
 800666a:	fb01 f303 	mul.w	r3, r1, r3
 800666e:	4413      	add	r3, r2
 8006670:	f203 3352 	addw	r3, r3, #850	; 0x352
 8006674:	781a      	ldrb	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800667a:	7bbb      	ldrb	r3, [r7, #14]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	211a      	movs	r1, #26
 8006680:	fb01 f303 	mul.w	r3, r1, r3
 8006684:	4413      	add	r3, r2
 8006686:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	7b9b      	ldrb	r3, [r3, #14]
 8006694:	4619      	mov	r1, r3
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f001 fc7d 	bl	8007f96 <USBH_AllocPipe>
 800669c:	4603      	mov	r3, r0
 800669e:	461a      	mov	r2, r3
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	7bdb      	ldrb	r3, [r3, #15]
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f001 fc73 	bl	8007f96 <USBH_AllocPipe>
 80066b0:	4603      	mov	r3, r0
 80066b2:	461a      	mov	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	7b59      	ldrb	r1, [r3, #13]
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	7b98      	ldrb	r0, [r3, #14]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	8b12      	ldrh	r2, [r2, #24]
 80066d0:	9202      	str	r2, [sp, #8]
 80066d2:	2202      	movs	r2, #2
 80066d4:	9201      	str	r2, [sp, #4]
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4623      	mov	r3, r4
 80066da:	4602      	mov	r2, r0
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f001 fc2b 	bl	8007f38 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	7b19      	ldrb	r1, [r3, #12]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	7bd8      	ldrb	r0, [r3, #15]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	8b52      	ldrh	r2, [r2, #26]
 80066fa:	9202      	str	r2, [sp, #8]
 80066fc:	2202      	movs	r2, #2
 80066fe:	9201      	str	r2, [sp, #4]
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	4623      	mov	r3, r4
 8006704:	4602      	mov	r2, r0
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 fc16 	bl	8007f38 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	7b5b      	ldrb	r3, [r3, #13]
 8006718:	2200      	movs	r2, #0
 800671a:	4619      	mov	r1, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 ff19 	bl	8008554 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	7b1b      	ldrb	r3, [r3, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	4619      	mov	r1, r3
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f001 ff12 	bl	8008554 <USBH_LL_SetToggle>
      status = USBH_OK;
 8006730:	2300      	movs	r3, #0
 8006732:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8006734:	7bfb      	ldrb	r3, [r7, #15]
}
 8006736:	4618      	mov	r0, r3
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	bd90      	pop	{r4, r7, pc}

0800673e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b084      	sub	sp, #16
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f001 fc09 	bl	8007f76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	4619      	mov	r1, r3
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f001 fc31 	bl	8007fd2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	7b1b      	ldrb	r3, [r3, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d00e      	beq.n	800679c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	7b1b      	ldrb	r3, [r3, #12]
 8006782:	4619      	mov	r1, r3
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f001 fbf6 	bl	8007f76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	7b1b      	ldrb	r3, [r3, #12]
 800678e:	4619      	mov	r1, r3
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f001 fc1e 	bl	8007fd2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	7b5b      	ldrb	r3, [r3, #13]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00e      	beq.n	80067c2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	7b5b      	ldrb	r3, [r3, #13]
 80067a8:	4619      	mov	r1, r3
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f001 fbe3 	bl	8007f76 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	7b5b      	ldrb	r3, [r3, #13]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f001 fc0b 	bl	8007fd2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	2200      	movs	r2, #0
 80067c0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00b      	beq.n	80067e6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f001 ff74 	bl	80086c4 <free>
    phost->pActiveClass->pData = 0U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3710      	adds	r7, #16
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bd80      	pop	{r7, pc}

080067f0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 80067f8:	2302      	movs	r3, #2
 80067fa:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	3340      	adds	r3, #64	; 0x40
 800680a:	4619      	mov	r1, r3
 800680c:	6878      	ldr	r0, [r7, #4]
 800680e:	f000 f8b2 	bl	8006976 <GetLineCoding>
 8006812:	4603      	mov	r3, r0
 8006814:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006822:	2102      	movs	r1, #2
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
  }
  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
	...

08006834 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006840:	2300      	movs	r3, #0
 8006842:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800684a:	69db      	ldr	r3, [r3, #28]
 800684c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006854:	2b04      	cmp	r3, #4
 8006856:	d877      	bhi.n	8006948 <USBH_CDC_Process+0x114>
 8006858:	a201      	add	r2, pc, #4	; (adr r2, 8006860 <USBH_CDC_Process+0x2c>)
 800685a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800685e:	bf00      	nop
 8006860:	08006875 	.word	0x08006875
 8006864:	0800687b 	.word	0x0800687b
 8006868:	080068ab 	.word	0x080068ab
 800686c:	0800691f 	.word	0x0800691f
 8006870:	0800692d 	.word	0x0800692d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8006874:	2300      	movs	r3, #0
 8006876:	73fb      	strb	r3, [r7, #15]
    break;
 8006878:	e06d      	b.n	8006956 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f897 	bl	80069b4 <SetLineCoding>
 8006886:	4603      	mov	r3, r0
 8006888:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800688a:	7bbb      	ldrb	r3, [r7, #14]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d104      	bne.n	800689a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8006898:	e058      	b.n	800694c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800689a:	7bbb      	ldrb	r3, [r7, #14]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d055      	beq.n	800694c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2204      	movs	r2, #4
 80068a4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80068a8:	e050      	b.n	800694c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	3340      	adds	r3, #64	; 0x40
 80068ae:	4619      	mov	r1, r3
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f860 	bl	8006976 <GetLineCoding>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 80068ba:	7bbb      	ldrb	r3, [r7, #14]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d126      	bne.n	800690e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068d2:	791b      	ldrb	r3, [r3, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d13b      	bne.n	8006950 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068e2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d133      	bne.n	8006950 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d12b      	bne.n	8006950 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006900:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006902:	429a      	cmp	r2, r3
 8006904:	d124      	bne.n	8006950 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 f95a 	bl	8006bc0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800690c:	e020      	b.n	8006950 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b01      	cmp	r3, #1
 8006912:	d01d      	beq.n	8006950 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	2204      	movs	r2, #4
 8006918:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800691c:	e018      	b.n	8006950 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f867 	bl	80069f2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f8dc 	bl	8006ae2 <CDC_ProcessReception>
    break;
 800692a:	e014      	b.n	8006956 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800692c:	2100      	movs	r1, #0
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fece 	bl	80076d0 <USBH_ClrFeature>
 8006934:	4603      	mov	r3, r0
 8006936:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8006938:	7bbb      	ldrb	r3, [r7, #14]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2200      	movs	r2, #0
 8006942:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8006946:	e005      	b.n	8006954 <USBH_CDC_Process+0x120>

  default:
    break;
 8006948:	bf00      	nop
 800694a:	e004      	b.n	8006956 <USBH_CDC_Process+0x122>
    break;
 800694c:	bf00      	nop
 800694e:	e002      	b.n	8006956 <USBH_CDC_Process+0x122>
    break;
 8006950:	bf00      	nop
 8006952:	e000      	b.n	8006956 <USBH_CDC_Process+0x122>
    break;
 8006954:	bf00      	nop

  }

  return status;
 8006956:	7bfb      	ldrb	r3, [r7, #15]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8006968:	2300      	movs	r3, #0
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b082      	sub	sp, #8
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	22a1      	movs	r2, #161	; 0xa1
 8006984:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2221      	movs	r2, #33	; 0x21
 800698a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2207      	movs	r2, #7
 800699c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2207      	movs	r2, #7
 80069a2:	4619      	mov	r1, r3
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 f873 	bl	8007a90 <USBH_CtlReq>
 80069aa:	4603      	mov	r3, r0
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3708      	adds	r7, #8
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2221      	movs	r2, #33	; 0x21
 80069c2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2200      	movs	r2, #0
 80069d4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2207      	movs	r2, #7
 80069da:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2207      	movs	r2, #7
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 f854 	bl	8007a90 <USBH_CtlReq>
 80069e8:	4603      	mov	r3, r0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b086      	sub	sp, #24
 80069f6:	af02      	add	r7, sp, #8
 80069f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006a00:	69db      	ldr	r3, [r3, #28]
 8006a02:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006a04:	2300      	movs	r3, #0
 8006a06:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d002      	beq.n	8006a18 <CDC_ProcessTransmission+0x26>
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d025      	beq.n	8006a62 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8006a16:	e060      	b.n	8006ada <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	8b12      	ldrh	r2, [r2, #24]
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d90c      	bls.n	8006a3e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	69d9      	ldr	r1, [r3, #28]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8b1a      	ldrh	r2, [r3, #24]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	7b58      	ldrb	r0, [r3, #13]
 8006a30:	2301      	movs	r3, #1
 8006a32:	9300      	str	r3, [sp, #0]
 8006a34:	4603      	mov	r3, r0
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f001 fa3b 	bl	8007eb2 <USBH_BulkSendData>
 8006a3c:	e00c      	b.n	8006a58 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	7b58      	ldrb	r0, [r3, #13]
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	9300      	str	r3, [sp, #0]
 8006a50:	4603      	mov	r3, r0
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fa2d 	bl	8007eb2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006a60:	e03b      	b.n	8006ada <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	7b5b      	ldrb	r3, [r3, #13]
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 fd49 	bl	8008500 <USBH_LL_GetURBState>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8006a72:	7afb      	ldrb	r3, [r7, #11]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d128      	bne.n	8006aca <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	8b12      	ldrh	r2, [r2, #24]
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d90e      	bls.n	8006aa2 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	8b12      	ldrh	r2, [r2, #24]
 8006a8c:	1a9a      	subs	r2, r3, r2
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	8b12      	ldrh	r2, [r2, #24]
 8006a9a:	441a      	add	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e002      	b.n	8006aa8 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d004      	beq.n	8006aba <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006ab8:	e00e      	b.n	8006ad8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f868 	bl	8006b98 <USBH_CDC_TransmitCallback>
    break;
 8006ac8:	e006      	b.n	8006ad8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d103      	bne.n	8006ad8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8006ad8:	bf00      	nop
  }
}
 8006ada:	bf00      	nop
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d002      	beq.n	8006b08 <CDC_ProcessReception+0x26>
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	d00e      	beq.n	8006b24 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8006b06:	e043      	b.n	8006b90 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	6a19      	ldr	r1, [r3, #32]
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	8b5a      	ldrh	r2, [r3, #26]
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	7b1b      	ldrb	r3, [r3, #12]
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f9f1 	bl	8007efc <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b22:	e035      	b.n	8006b90 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	7b1b      	ldrb	r3, [r3, #12]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fce8 	bl	8008500 <USBH_LL_GetURBState>
 8006b30:	4603      	mov	r3, r0
 8006b32:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8006b34:	7cfb      	ldrb	r3, [r7, #19]
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d129      	bne.n	8006b8e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	7b1b      	ldrb	r3, [r3, #12]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fc4b 	bl	80083dc <USBH_LL_GetLastXferSize>
 8006b46:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d016      	beq.n	8006b80 <CDC_ProcessReception+0x9e>
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	8b5b      	ldrh	r3, [r3, #26]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d910      	bls.n	8006b80 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	6a1a      	ldr	r2, [r3, #32]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	441a      	add	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2203      	movs	r2, #3
 8006b7a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8006b7e:	e006      	b.n	8006b8e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f80f 	bl	8006bac <USBH_CDC_ReceiveCallback>
    break;
 8006b8e:	bf00      	nop
  }
}
 8006b90:	bf00      	nop
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]

}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	60f8      	str	r0, [r7, #12]
 8006bdc:	60b9      	str	r1, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d101      	bne.n	8006bec <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006be8:	2302      	movs	r3, #2
 8006bea:	e019      	b.n	8006c20 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	79fa      	ldrb	r2, [r7, #7]
 8006bf0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f80f 	bl	8006c28 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68ba      	ldr	r2, [r7, #8]
 8006c14:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006c18:	68f8      	ldr	r0, [r7, #12]
 8006c1a:	f001 fb2d 	bl	8008278 <USBH_LL_Init>

  return USBH_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006c34:	e008      	b.n	8006c48 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	32e0      	adds	r2, #224	; 0xe0
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	3301      	adds	r3, #1
 8006c46:	60fb      	str	r3, [r7, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2b0e      	cmp	r3, #14
 8006c4c:	d9f3      	bls.n	8006c36 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
 8006c52:	e009      	b.n	8006c68 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	4413      	add	r3, r2
 8006c5a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	3301      	adds	r3, #1
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c6e:	d3f1      	bcc.n	8006c54 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2240      	movs	r2, #64	; 0x40
 8006c94:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2200      	movs	r2, #0
 8006c9a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8006cac:	2300      	movs	r3, #0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr

08006cba <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006cba:	b480      	push	{r7}
 8006cbc:	b085      	sub	sp, #20
 8006cbe:	af00      	add	r7, sp, #0
 8006cc0:	6078      	str	r0, [r7, #4]
 8006cc2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d017      	beq.n	8006cfe <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10f      	bne.n	8006cf8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	33dc      	adds	r3, #220	; 0xdc
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	e004      	b.n	8006d02 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	73fb      	strb	r3, [r7, #15]
 8006cfc:	e001      	b.n	8006d02 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006d26:	78fa      	ldrb	r2, [r7, #3]
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d204      	bcs.n	8006d36 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006d34:	e001      	b.n	8006d3a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006d36:	2302      	movs	r3, #2
 8006d38:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3714      	adds	r7, #20
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	4608      	mov	r0, r1
 8006d52:	4611      	mov	r1, r2
 8006d54:	461a      	mov	r2, r3
 8006d56:	4603      	mov	r3, r0
 8006d58:	70fb      	strb	r3, [r7, #3]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70bb      	strb	r3, [r7, #2]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006d62:	2300      	movs	r3, #0
 8006d64:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006d70:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006d72:	e025      	b.n	8006dc0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006d74:	7dfb      	ldrb	r3, [r7, #23]
 8006d76:	221a      	movs	r2, #26
 8006d78:	fb02 f303 	mul.w	r3, r2, r3
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	3302      	adds	r3, #2
 8006d84:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	795b      	ldrb	r3, [r3, #5]
 8006d8a:	78fa      	ldrb	r2, [r7, #3]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d002      	beq.n	8006d96 <USBH_FindInterface+0x4e>
 8006d90:	78fb      	ldrb	r3, [r7, #3]
 8006d92:	2bff      	cmp	r3, #255	; 0xff
 8006d94:	d111      	bne.n	8006dba <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006d9a:	78ba      	ldrb	r2, [r7, #2]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d002      	beq.n	8006da6 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006da0:	78bb      	ldrb	r3, [r7, #2]
 8006da2:	2bff      	cmp	r3, #255	; 0xff
 8006da4:	d109      	bne.n	8006dba <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006daa:	787a      	ldrb	r2, [r7, #1]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d002      	beq.n	8006db6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006db0:	787b      	ldrb	r3, [r7, #1]
 8006db2:	2bff      	cmp	r3, #255	; 0xff
 8006db4:	d101      	bne.n	8006dba <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	e006      	b.n	8006dc8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	3301      	adds	r3, #1
 8006dbe:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006dc0:	7dfb      	ldrb	r3, [r7, #23]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d9d6      	bls.n	8006d74 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006dc6:	23ff      	movs	r3, #255	; 0xff
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	371c      	adds	r7, #28
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fa87 	bl	80082f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8006de2:	2101      	movs	r1, #1
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f001 fb9e 	bl	8008526 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006dea:	2300      	movs	r3, #0
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3708      	adds	r7, #8
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af04      	add	r7, sp, #16
 8006dfa:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 faec 	bl	80073e2 <USBH_IsPortEnabled>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10c      	bne.n	8006e2a <USBH_Process+0x36>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d007      	beq.n	8006e2a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	2b03      	cmp	r3, #3
 8006e22:	d002      	beq.n	8006e2a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2203      	movs	r2, #3
 8006e28:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b0b      	cmp	r3, #11
 8006e32:	f200 814c 	bhi.w	80070ce <USBH_Process+0x2da>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <USBH_Process+0x48>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e6d 	.word	0x08006e6d
 8006e40:	08006e8f 	.word	0x08006e8f
 8006e44:	08006ea3 	.word	0x08006ea3
 8006e48:	080070a9 	.word	0x080070a9
 8006e4c:	080070cf 	.word	0x080070cf
 8006e50:	08006f31 	.word	0x08006f31
 8006e54:	0800705f 	.word	0x0800705f
 8006e58:	08006f61 	.word	0x08006f61
 8006e5c:	08006f81 	.word	0x08006f81
 8006e60:	08006fa1 	.word	0x08006fa1
 8006e64:	08006fcf 	.word	0x08006fcf
 8006e68:	08007091 	.word	0x08007091
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	f000 812c 	beq.w	80070d2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006e80:	20c8      	movs	r0, #200	; 0xc8
 8006e82:	f001 fb9a 	bl	80085ba <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	f001 fa8d 	bl	80083a6 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006e8c:	e121      	b.n	80070d2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	f040 811e 	bne.w	80070d6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006ea0:	e119      	b.n	80070d6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006ea2:	2064      	movs	r0, #100	; 0x64
 8006ea4:	f001 fb89 	bl	80085ba <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f001 fa57 	bl	800835c <USBH_LL_GetSpeed>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2205      	movs	r2, #5
 8006ebc:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f001 f868 	bl	8007f96 <USBH_AllocPipe>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	461a      	mov	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8006ece:	2180      	movs	r1, #128	; 0x80
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f001 f860 	bl	8007f96 <USBH_AllocPipe>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	7919      	ldrb	r1, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006ef2:	b292      	uxth	r2, r2
 8006ef4:	9202      	str	r2, [sp, #8]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	9201      	str	r2, [sp, #4]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	4603      	mov	r3, r0
 8006efe:	2280      	movs	r2, #128	; 0x80
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f001 f819 	bl	8007f38 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	7959      	ldrb	r1, [r3, #5]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8006f1a:	b292      	uxth	r2, r2
 8006f1c:	9202      	str	r2, [sp, #8]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	9201      	str	r2, [sp, #4]
 8006f22:	9300      	str	r3, [sp, #0]
 8006f24:	4603      	mov	r3, r0
 8006f26:	2200      	movs	r2, #0
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f001 f805 	bl	8007f38 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f2e:	e0e3      	b.n	80070f8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f8e7 	bl	8007104 <USBH_HandleEnum>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f040 80ce 	bne.w	80070da <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d103      	bne.n	8006f58 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2208      	movs	r2, #8
 8006f54:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006f56:	e0c0      	b.n	80070da <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2207      	movs	r2, #7
 8006f5c:	701a      	strb	r2, [r3, #0]
    break;
 8006f5e:	e0bc      	b.n	80070da <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	f000 80b9 	beq.w	80070de <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006f72:	2101      	movs	r1, #1
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2208      	movs	r2, #8
 8006f7c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f7e:	e0ae      	b.n	80070de <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	4619      	mov	r1, r3
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb59 	bl	8007642 <USBH_SetCfg>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f040 80a5 	bne.w	80070e2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2209      	movs	r2, #9
 8006f9c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006f9e:	e0a0      	b.n	80070e2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006fa6:	f003 0320 	and.w	r3, r3, #32
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00b      	beq.n	8006fc6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006fae:	2101      	movs	r1, #1
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fb69 	bl	8007688 <USBH_SetFeature>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 8094 	bne.w	80070e6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	220a      	movs	r2, #10
 8006fc2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006fc4:	e08f      	b.n	80070e6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	220a      	movs	r2, #10
 8006fca:	701a      	strb	r2, [r3, #0]
    break;
 8006fcc:	e08b      	b.n	80070e6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8088 	beq.w	80070ea <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	73fb      	strb	r3, [r7, #15]
 8006fe6:	e017      	b.n	8007018 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	33dc      	adds	r3, #220	; 0xdc
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	791a      	ldrb	r2, [r3, #4]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d108      	bne.n	8007012 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	687a      	ldr	r2, [r7, #4]
 8007004:	33dc      	adds	r3, #220	; 0xdc
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	685a      	ldr	r2, [r3, #4]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3301      	adds	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0e4      	beq.n	8006fe8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007024:	2b00      	cmp	r3, #0
 8007026:	d016      	beq.n	8007056 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	4798      	blx	r3
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2206      	movs	r2, #6
 800703e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007046:	2103      	movs	r1, #3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800704c:	e04d      	b.n	80070ea <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	220d      	movs	r2, #13
 8007052:	701a      	strb	r2, [r3, #0]
    break;
 8007054:	e049      	b.n	80070ea <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	220d      	movs	r2, #13
 800705a:	701a      	strb	r2, [r3, #0]
    break;
 800705c:	e045      	b.n	80070ea <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00f      	beq.n	8007088 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	4798      	blx	r3
 8007074:	4603      	mov	r3, r0
 8007076:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	b2db      	uxtb	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d136      	bne.n	80070ee <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220b      	movs	r2, #11
 8007084:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8007086:	e032      	b.n	80070ee <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	220d      	movs	r2, #13
 800708c:	701a      	strb	r2, [r3, #0]
    break;
 800708e:	e02e      	b.n	80070ee <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007096:	2b00      	cmp	r3, #0
 8007098:	d02b      	beq.n	80070f2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	4798      	blx	r3
    }
    break;
 80070a6:	e024      	b.n	80070f2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fdbd 	bl	8006c28 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d01e      	beq.n	80070f6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80070cc:	e013      	b.n	80070f6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80070ce:	bf00      	nop
 80070d0:	e012      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070d2:	bf00      	nop
 80070d4:	e010      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070d6:	bf00      	nop
 80070d8:	e00e      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070da:	bf00      	nop
 80070dc:	e00c      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070de:	bf00      	nop
 80070e0:	e00a      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070e2:	bf00      	nop
 80070e4:	e008      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070e6:	bf00      	nop
 80070e8:	e006      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070ea:	bf00      	nop
 80070ec:	e004      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070ee:	bf00      	nop
 80070f0:	e002      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070f2:	bf00      	nop
 80070f4:	e000      	b.n	80070f8 <USBH_Process+0x304>
    break;
 80070f6:	bf00      	nop
  }
 return USBH_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3710      	adds	r7, #16
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop

08007104 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af04      	add	r7, sp, #16
 800710a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800710c:	2301      	movs	r3, #1
 800710e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	785b      	ldrb	r3, [r3, #1]
 8007114:	2b07      	cmp	r3, #7
 8007116:	f200 80f8 	bhi.w	800730a <USBH_HandleEnum+0x206>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USBH_HandleEnum+0x1c>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007141 	.word	0x08007141
 8007124:	080071b3 	.word	0x080071b3
 8007128:	080071cb 	.word	0x080071cb
 800712c:	08007241 	.word	0x08007241
 8007130:	08007257 	.word	0x08007257
 8007134:	08007273 	.word	0x08007273
 8007138:	080072a7 	.word	0x080072a7
 800713c:	080072db 	.word	0x080072db
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8007140:	2108      	movs	r1, #8
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 f9ad 	bl	80074a2 <USBH_Get_DevDesc>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	f040 80df 	bne.w	800730e <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2201      	movs	r2, #1
 800715e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	7919      	ldrb	r1, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007174:	b292      	uxth	r2, r2
 8007176:	9202      	str	r2, [sp, #8]
 8007178:	2200      	movs	r2, #0
 800717a:	9201      	str	r2, [sp, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	4603      	mov	r3, r0
 8007180:	2280      	movs	r2, #128	; 0x80
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fed8 	bl	8007f38 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	7959      	ldrb	r1, [r3, #5]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800719c:	b292      	uxth	r2, r2
 800719e:	9202      	str	r2, [sp, #8]
 80071a0:	2200      	movs	r2, #0
 80071a2:	9201      	str	r2, [sp, #4]
 80071a4:	9300      	str	r3, [sp, #0]
 80071a6:	4603      	mov	r3, r0
 80071a8:	2200      	movs	r2, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fec4 	bl	8007f38 <USBH_OpenPipe>

    }
    break;
 80071b0:	e0ad      	b.n	800730e <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80071b2:	2112      	movs	r1, #18
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f974 	bl	80074a2 <USBH_Get_DevDesc>
 80071ba:	4603      	mov	r3, r0
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f040 80a8 	bne.w	8007312 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2202      	movs	r2, #2
 80071c6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80071c8:	e0a3      	b.n	8007312 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80071ca:	2101      	movs	r1, #1
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fa14 	bl	80075fa <USBH_SetAddress>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f040 809e 	bne.w	8007316 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80071da:	2002      	movs	r0, #2
 80071dc:	f001 f9ed 	bl	80085ba <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	7919      	ldrb	r1, [r3, #4]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8007202:	b292      	uxth	r2, r2
 8007204:	9202      	str	r2, [sp, #8]
 8007206:	2200      	movs	r2, #0
 8007208:	9201      	str	r2, [sp, #4]
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4603      	mov	r3, r0
 800720e:	2280      	movs	r2, #128	; 0x80
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fe91 	bl	8007f38 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7959      	ldrb	r1, [r3, #5]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800722a:	b292      	uxth	r2, r2
 800722c:	9202      	str	r2, [sp, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	9201      	str	r2, [sp, #4]
 8007232:	9300      	str	r3, [sp, #0]
 8007234:	4603      	mov	r3, r0
 8007236:	2200      	movs	r2, #0
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 fe7d 	bl	8007f38 <USBH_OpenPipe>
    }
    break;
 800723e:	e06a      	b.n	8007316 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8007240:	2109      	movs	r1, #9
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f955 	bl	80074f2 <USBH_Get_CfgDesc>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d165      	bne.n	800731a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2204      	movs	r2, #4
 8007252:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007254:	e061      	b.n	800731a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f947 	bl	80074f2 <USBH_Get_CfgDesc>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d159      	bne.n	800731e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2205      	movs	r2, #5
 800726e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8007270:	e055      	b.n	800731e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8007278:	2b00      	cmp	r3, #0
 800727a:	d010      	beq.n	800729e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8007288:	23ff      	movs	r3, #255	; 0xff
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 f955 	bl	800753a <USBH_Get_StringDesc>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d145      	bne.n	8007322 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2206      	movs	r2, #6
 800729a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800729c:	e041      	b.n	8007322 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2206      	movs	r2, #6
 80072a2:	705a      	strb	r2, [r3, #1]
    break;
 80072a4:	e03d      	b.n	8007322 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d010      	beq.n	80072d2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072bc:	23ff      	movs	r3, #255	; 0xff
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 f93b 	bl	800753a <USBH_Get_StringDesc>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d12d      	bne.n	8007326 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2207      	movs	r2, #7
 80072ce:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80072d0:	e029      	b.n	8007326 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2207      	movs	r2, #7
 80072d6:	705a      	strb	r2, [r3, #1]
    break;
 80072d8:	e025      	b.n	8007326 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d00f      	beq.n	8007304 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80072f0:	23ff      	movs	r3, #255	; 0xff
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f921 	bl	800753a <USBH_Get_StringDesc>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d115      	bne.n	800732a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8007302:	e012      	b.n	800732a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73fb      	strb	r3, [r7, #15]
    break;
 8007308:	e00f      	b.n	800732a <USBH_HandleEnum+0x226>

  default:
    break;
 800730a:	bf00      	nop
 800730c:	e00e      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 800730e:	bf00      	nop
 8007310:	e00c      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 8007312:	bf00      	nop
 8007314:	e00a      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 8007316:	bf00      	nop
 8007318:	e008      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 800731a:	bf00      	nop
 800731c:	e006      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 800731e:	bf00      	nop
 8007320:	e004      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 8007322:	bf00      	nop
 8007324:	e002      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 8007326:	bf00      	nop
 8007328:	e000      	b.n	800732c <USBH_HandleEnum+0x228>
    break;
 800732a:	bf00      	nop
  }
  return Status;
 800732c:	7bfb      	ldrb	r3, [r7, #15]
}
 800732e:	4618      	mov	r0, r3
 8007330:	3710      	adds	r7, #16
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop

08007338 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr

08007356 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b082      	sub	sp, #8
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007364:	1c5a      	adds	r2, r3, #1
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f804 	bl	800737a <USBH_HandleSof>
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b082      	sub	sp, #8
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	b2db      	uxtb	r3, r3
 8007388:	2b0b      	cmp	r3, #11
 800738a:	d10a      	bne.n	80073a2 <USBH_HandleSof+0x28>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8007392:	2b00      	cmp	r3, #0
 8007394:	d005      	beq.n	80073a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800739c:	699b      	ldr	r3, [r3, #24]
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4798      	blx	r3
  }
}
 80073a2:	bf00      	nop
 80073a4:	3708      	adds	r7, #8
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}

080073aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80073ba:	bf00      	nop
}
 80073bc:	370c      	adds	r7, #12
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2200      	movs	r2, #0
 80073d2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80073d6:	bf00      	nop
}
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	370c      	adds	r7, #12
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr

080073fc <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10f      	bne.n	800742e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00e      	beq.n	800743e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007426:	2104      	movs	r1, #4
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	4798      	blx	r3
 800742c:	e007      	b.n	800743e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8007434:	2b01      	cmp	r3, #1
 8007436:	d102      	bne.n	800743e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2202      	movs	r2, #2
 800743c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 ff68 	bl	8008326 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4619      	mov	r1, r3
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 fdb8 	bl	8007fd2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	4619      	mov	r1, r3
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 fdb2 	bl	8007fd2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800747c:	2b00      	cmp	r3, #0
 800747e:	d005      	beq.n	800748c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007486:	2105      	movs	r1, #5
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 ff2f 	bl	80082f0 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2203      	movs	r2, #3
 8007496:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b086      	sub	sp, #24
 80074a6:	af02      	add	r7, sp, #8
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4613      	mov	r3, r2
 80074bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c0:	2100      	movs	r1, #0
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 f864 	bl	8007590 <USBH_GetDescriptor>
 80074c8:	4603      	mov	r3, r0
 80074ca:	73fb      	strb	r3, [r7, #15]
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80074de:	78fa      	ldrb	r2, [r7, #3]
 80074e0:	b292      	uxth	r2, r2
 80074e2:	4619      	mov	r1, r3
 80074e4:	f000 f918 	bl	8007718 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80074e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b086      	sub	sp, #24
 80074f6:	af02      	add	r7, sp, #8
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	460b      	mov	r3, r1
 80074fc:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	331c      	adds	r3, #28
 8007502:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 8007504:	887b      	ldrh	r3, [r7, #2]
 8007506:	9300      	str	r3, [sp, #0]
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800750e:	2100      	movs	r1, #0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 f83d 	bl	8007590 <USBH_GetDescriptor>
 8007516:	4603      	mov	r3, r0
 8007518:	72fb      	strb	r3, [r7, #11]
 800751a:	7afb      	ldrb	r3, [r7, #11]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d107      	bne.n	8007530 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8007526:	887a      	ldrh	r2, [r7, #2]
 8007528:	68f9      	ldr	r1, [r7, #12]
 800752a:	4618      	mov	r0, r3
 800752c:	f000 f964 	bl	80077f8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8007530:	7afb      	ldrb	r3, [r7, #11]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800753a:	b580      	push	{r7, lr}
 800753c:	b088      	sub	sp, #32
 800753e:	af02      	add	r7, sp, #8
 8007540:	60f8      	str	r0, [r7, #12]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	461a      	mov	r2, r3
 8007546:	460b      	mov	r3, r1
 8007548:	72fb      	strb	r3, [r7, #11]
 800754a:	4613      	mov	r3, r2
 800754c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007556:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800755e:	893b      	ldrh	r3, [r7, #8]
 8007560:	9300      	str	r3, [sp, #0]
 8007562:	460b      	mov	r3, r1
 8007564:	2100      	movs	r1, #0
 8007566:	68f8      	ldr	r0, [r7, #12]
 8007568:	f000 f812 	bl	8007590 <USBH_GetDescriptor>
 800756c:	4603      	mov	r3, r0
 800756e:	75fb      	strb	r3, [r7, #23]
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d107      	bne.n	8007586 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800757c:	893a      	ldrh	r2, [r7, #8]
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	4618      	mov	r0, r3
 8007582:	f000 fa37 	bl	80079f4 <USBH_ParseStringDesc>
  }
  return status;
 8007586:	7dfb      	ldrb	r3, [r7, #23]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	607b      	str	r3, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	72fb      	strb	r3, [r7, #11]
 800759e:	4613      	mov	r3, r2
 80075a0:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	789b      	ldrb	r3, [r3, #2]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d11c      	bne.n	80075e4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80075aa:	7afb      	ldrb	r3, [r7, #11]
 80075ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80075b0:	b2da      	uxtb	r2, r3
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2206      	movs	r2, #6
 80075ba:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	893a      	ldrh	r2, [r7, #8]
 80075c0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80075c2:	893b      	ldrh	r3, [r7, #8]
 80075c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80075c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075cc:	d104      	bne.n	80075d8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f240 4209 	movw	r2, #1033	; 0x409
 80075d4:	829a      	strh	r2, [r3, #20]
 80075d6:	e002      	b.n	80075de <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8b3a      	ldrh	r2, [r7, #24]
 80075e2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80075e4:	8b3b      	ldrh	r3, [r7, #24]
 80075e6:	461a      	mov	r2, r3
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 fa50 	bl	8007a90 <USBH_CtlReq>
 80075f0:	4603      	mov	r3, r0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b082      	sub	sp, #8
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	460b      	mov	r3, r1
 8007604:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	789b      	ldrb	r3, [r3, #2]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d10f      	bne.n	800762e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2205      	movs	r2, #5
 8007618:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800761a:	78fb      	ldrb	r3, [r7, #3]
 800761c:	b29a      	uxth	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800762e:	2200      	movs	r2, #0
 8007630:	2100      	movs	r1, #0
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f000 fa2c 	bl	8007a90 <USBH_CtlReq>
 8007638:	4603      	mov	r3, r0
}
 800763a:	4618      	mov	r0, r3
 800763c:	3708      	adds	r7, #8
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}

08007642 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007642:	b580      	push	{r7, lr}
 8007644:	b082      	sub	sp, #8
 8007646:	af00      	add	r7, sp, #0
 8007648:	6078      	str	r0, [r7, #4]
 800764a:	460b      	mov	r3, r1
 800764c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	789b      	ldrb	r3, [r3, #2]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d10e      	bne.n	8007674 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2209      	movs	r2, #9
 8007660:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	887a      	ldrh	r2, [r7, #2]
 8007666:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8007674:	2200      	movs	r2, #0
 8007676:	2100      	movs	r1, #0
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 fa09 	bl	8007a90 <USBH_CtlReq>
 800767e:	4603      	mov	r3, r0
}
 8007680:	4618      	mov	r0, r3
 8007682:	3708      	adds	r7, #8
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	789b      	ldrb	r3, [r3, #2]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d10f      	bne.n	80076bc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2203      	movs	r2, #3
 80076a6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80076a8:	78fb      	ldrb	r3, [r7, #3]
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80076bc:	2200      	movs	r2, #0
 80076be:	2100      	movs	r1, #0
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f000 f9e5 	bl	8007a90 <USBH_CtlReq>
 80076c6:	4603      	mov	r3, r0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	789b      	ldrb	r3, [r3, #2]
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d10f      	bne.n	8007704 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2202      	movs	r2, #2
 80076e8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2201      	movs	r2, #1
 80076ee:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2200      	movs	r2, #0
 80076f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	b29a      	uxth	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 8007704:	2200      	movs	r2, #0
 8007706:	2100      	movs	r1, #0
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f9c1 	bl	8007a90 <USBH_CtlReq>
 800770e:	4603      	mov	r3, r0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	4613      	mov	r3, r2
 8007724:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	781a      	ldrb	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	785a      	ldrb	r2, [r3, #1]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	3302      	adds	r3, #2
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	b29a      	uxth	r2, r3
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	3303      	adds	r3, #3
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	021b      	lsls	r3, r3, #8
 8007748:	b29b      	uxth	r3, r3
 800774a:	4313      	orrs	r3, r2
 800774c:	b29a      	uxth	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	791a      	ldrb	r2, [r3, #4]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	795a      	ldrb	r2, [r3, #5]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	799a      	ldrb	r2, [r3, #6]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	79da      	ldrb	r2, [r3, #7]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007772:	88fb      	ldrh	r3, [r7, #6]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d939      	bls.n	80077ec <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	3308      	adds	r3, #8
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b29a      	uxth	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	3309      	adds	r3, #9
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	b29b      	uxth	r3, r3
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	b29b      	uxth	r3, r3
 800778c:	4313      	orrs	r3, r2
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	330a      	adds	r3, #10
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	b29a      	uxth	r2, r3
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	330b      	adds	r3, #11
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	021b      	lsls	r3, r3, #8
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	4313      	orrs	r3, r2
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	330c      	adds	r3, #12
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	b29a      	uxth	r2, r3
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	330d      	adds	r3, #13
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	b29b      	uxth	r3, r3
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	7b9a      	ldrb	r2, [r3, #14]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	7bda      	ldrb	r2, [r3, #15]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	7c1a      	ldrb	r2, [r3, #16]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	7c5a      	ldrb	r2, [r3, #17]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	745a      	strb	r2, [r3, #17]
  }
}
 80077ec:	bf00      	nop
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007810:	2300      	movs	r3, #0
 8007812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	781a      	ldrb	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	785a      	ldrb	r2, [r3, #1]
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3302      	adds	r3, #2
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b29a      	uxth	r2, r3
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3303      	adds	r3, #3
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	b29b      	uxth	r3, r3
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	b29b      	uxth	r3, r3
 800783e:	4313      	orrs	r3, r2
 8007840:	b29a      	uxth	r2, r3
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	791a      	ldrb	r2, [r3, #4]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	795a      	ldrb	r2, [r3, #5]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	799a      	ldrb	r2, [r3, #6]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	79da      	ldrb	r2, [r3, #7]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	7a1a      	ldrb	r2, [r3, #8]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800786e:	88fb      	ldrh	r3, [r7, #6]
 8007870:	2b09      	cmp	r3, #9
 8007872:	d95f      	bls.n	8007934 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007874:	2309      	movs	r3, #9
 8007876:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007878:	2300      	movs	r3, #0
 800787a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800787c:	e051      	b.n	8007922 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800787e:	f107 0316 	add.w	r3, r7, #22
 8007882:	4619      	mov	r1, r3
 8007884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007886:	f000 f8e8 	bl	8007a5a <USBH_GetNextDesc>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	785b      	ldrb	r3, [r3, #1]
 8007890:	2b04      	cmp	r3, #4
 8007892:	d146      	bne.n	8007922 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007894:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007898:	221a      	movs	r2, #26
 800789a:	fb02 f303 	mul.w	r3, r2, r3
 800789e:	3308      	adds	r3, #8
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	3302      	adds	r3, #2
 80078a6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 80078a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078aa:	69f8      	ldr	r0, [r7, #28]
 80078ac:	f000 f846 	bl	800793c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80078b0:	2300      	movs	r3, #0
 80078b2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80078ba:	e022      	b.n	8007902 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 80078bc:	f107 0316 	add.w	r3, r7, #22
 80078c0:	4619      	mov	r1, r3
 80078c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078c4:	f000 f8c9 	bl	8007a5a <USBH_GetNextDesc>
 80078c8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	785b      	ldrb	r3, [r3, #1]
 80078ce:	2b05      	cmp	r3, #5
 80078d0:	d117      	bne.n	8007902 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80078d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078d6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80078da:	3201      	adds	r2, #1
 80078dc:	00d2      	lsls	r2, r2, #3
 80078de:	211a      	movs	r1, #26
 80078e0:	fb01 f303 	mul.w	r3, r1, r3
 80078e4:	4413      	add	r3, r2
 80078e6:	3308      	adds	r3, #8
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	4413      	add	r3, r2
 80078ec:	3304      	adds	r3, #4
 80078ee:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 80078f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078f2:	69b8      	ldr	r0, [r7, #24]
 80078f4:	f000 f851 	bl	800799a <USBH_ParseEPDesc>
            ep_ix++;
 80078f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80078fc:	3301      	adds	r3, #1
 80078fe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	791b      	ldrb	r3, [r3, #4]
 8007906:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800790a:	429a      	cmp	r2, r3
 800790c:	d204      	bcs.n	8007918 <USBH_ParseCfgDesc+0x120>
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	885a      	ldrh	r2, [r3, #2]
 8007912:	8afb      	ldrh	r3, [r7, #22]
 8007914:	429a      	cmp	r2, r3
 8007916:	d8d1      	bhi.n	80078bc <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007918:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800791c:	3301      	adds	r3, #1
 800791e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007922:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007926:	2b01      	cmp	r3, #1
 8007928:	d804      	bhi.n	8007934 <USBH_ParseCfgDesc+0x13c>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	885a      	ldrh	r2, [r3, #2]
 800792e:	8afb      	ldrh	r3, [r7, #22]
 8007930:	429a      	cmp	r2, r3
 8007932:	d8a4      	bhi.n	800787e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007934:	bf00      	nop
 8007936:	3728      	adds	r7, #40	; 0x28
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	781a      	ldrb	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	785a      	ldrb	r2, [r3, #1]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	789a      	ldrb	r2, [r3, #2]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	78da      	ldrb	r2, [r3, #3]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	791a      	ldrb	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	795a      	ldrb	r2, [r3, #5]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	799a      	ldrb	r2, [r3, #6]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	79da      	ldrb	r2, [r3, #7]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	7a1a      	ldrb	r2, [r3, #8]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	721a      	strb	r2, [r3, #8]
}
 800798e:	bf00      	nop
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800799a:	b480      	push	{r7}
 800799c:	b083      	sub	sp, #12
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
 80079a2:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	785a      	ldrb	r2, [r3, #1]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	789a      	ldrb	r2, [r3, #2]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	78da      	ldrb	r2, [r3, #3]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	b29a      	uxth	r2, r3
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3305      	adds	r3, #5
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	021b      	lsls	r3, r3, #8
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	4313      	orrs	r3, r2
 80079da:	b29a      	uxth	r2, r3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	799a      	ldrb	r2, [r3, #6]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	719a      	strb	r2, [r3, #6]
}
 80079e8:	bf00      	nop
 80079ea:	370c      	adds	r7, #12
 80079ec:	46bd      	mov	sp, r7
 80079ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f2:	4770      	bx	lr

080079f4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b087      	sub	sp, #28
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	3301      	adds	r3, #1
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b03      	cmp	r3, #3
 8007a0a:	d120      	bne.n	8007a4e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	1e9a      	subs	r2, r3, #2
 8007a12:	88fb      	ldrh	r3, [r7, #6]
 8007a14:	4293      	cmp	r3, r2
 8007a16:	bf28      	it	cs
 8007a18:	4613      	movcs	r3, r2
 8007a1a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	3302      	adds	r3, #2
 8007a20:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007a22:	2300      	movs	r3, #0
 8007a24:	82fb      	strh	r3, [r7, #22]
 8007a26:	e00b      	b.n	8007a40 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007a28:	8afb      	ldrh	r3, [r7, #22]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	781a      	ldrb	r2, [r3, #0]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	3301      	adds	r3, #1
 8007a38:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007a3a:	8afb      	ldrh	r3, [r7, #22]
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	82fb      	strh	r3, [r7, #22]
 8007a40:	8afa      	ldrh	r2, [r7, #22]
 8007a42:	8abb      	ldrh	r3, [r7, #20]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d3ef      	bcc.n	8007a28 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	701a      	strb	r2, [r3, #0]
  }
}
 8007a4e:	bf00      	nop
 8007a50:	371c      	adds	r7, #28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b085      	sub	sp, #20
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	4413      	add	r3, r2
 8007a70:	b29a      	uxth	r2, r3
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4413      	add	r3, r2
 8007a80:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8007a82:	68fb      	ldr	r3, [r7, #12]
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3714      	adds	r7, #20
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	789b      	ldrb	r3, [r3, #2]
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d002      	beq.n	8007ab0 <USBH_CtlReq+0x20>
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d00f      	beq.n	8007ace <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8007aae:	e034      	b.n	8007b1a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68ba      	ldr	r2, [r7, #8]
 8007ab4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	88fa      	ldrh	r2, [r7, #6]
 8007aba:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2202      	movs	r2, #2
 8007ac6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
    break;
 8007acc:	e025      	b.n	8007b1a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8007ace:	68f8      	ldr	r0, [r7, #12]
 8007ad0:	f000 f828 	bl	8007b24 <USBH_HandleControl>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8007ad8:	7dfb      	ldrb	r3, [r7, #23]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d108      	bne.n	8007af0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	75fb      	strb	r3, [r7, #23]
    break;
 8007aee:	e013      	b.n	8007b18 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b03      	cmp	r3, #3
 8007af4:	d108      	bne.n	8007b08 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2201      	movs	r2, #1
 8007afa:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2200      	movs	r2, #0
 8007b00:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007b02:	2303      	movs	r3, #3
 8007b04:	75fb      	strb	r3, [r7, #23]
    break;
 8007b06:	e007      	b.n	8007b18 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d104      	bne.n	8007b18 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2201      	movs	r2, #1
 8007b12:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8007b14:	2302      	movs	r3, #2
 8007b16:	75fb      	strb	r3, [r7, #23]
    break;
 8007b18:	bf00      	nop
  }
  return status;
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b086      	sub	sp, #24
 8007b28:	af02      	add	r7, sp, #8
 8007b2a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b30:	2300      	movs	r3, #0
 8007b32:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	7e1b      	ldrb	r3, [r3, #24]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	2b0a      	cmp	r3, #10
 8007b3c:	f200 814c 	bhi.w	8007dd8 <USBH_HandleControl+0x2b4>
 8007b40:	a201      	add	r2, pc, #4	; (adr r2, 8007b48 <USBH_HandleControl+0x24>)
 8007b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b46:	bf00      	nop
 8007b48:	08007b75 	.word	0x08007b75
 8007b4c:	08007b8f 	.word	0x08007b8f
 8007b50:	08007bf9 	.word	0x08007bf9
 8007b54:	08007c1f 	.word	0x08007c1f
 8007b58:	08007c57 	.word	0x08007c57
 8007b5c:	08007c83 	.word	0x08007c83
 8007b60:	08007cd5 	.word	0x08007cd5
 8007b64:	08007cf7 	.word	0x08007cf7
 8007b68:	08007d33 	.word	0x08007d33
 8007b6c:	08007d5b 	.word	0x08007d5b
 8007b70:	08007d99 	.word	0x08007d99
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f103 0110 	add.w	r1, r3, #16
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	795b      	ldrb	r3, [r3, #5]
 8007b7e:	461a      	mov	r2, r3
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f939 	bl	8007df8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2202      	movs	r2, #2
 8007b8a:	761a      	strb	r2, [r3, #24]
    break;
 8007b8c:	e12f      	b.n	8007dee <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	795b      	ldrb	r3, [r3, #5]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fcb3 	bl	8008500 <USBH_LL_GetURBState>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8007b9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	d11e      	bne.n	8007be2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	7c1b      	ldrb	r3, [r3, #16]
 8007ba8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bac:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8adb      	ldrh	r3, [r3, #22]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8007bb6:	7b7b      	ldrb	r3, [r7, #13]
 8007bb8:	2b80      	cmp	r3, #128	; 0x80
 8007bba:	d103      	bne.n	8007bc4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2203      	movs	r2, #3
 8007bc0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007bc2:	e10b      	b.n	8007ddc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2205      	movs	r2, #5
 8007bc8:	761a      	strb	r2, [r3, #24]
    break;
 8007bca:	e107      	b.n	8007ddc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8007bcc:	7b7b      	ldrb	r3, [r7, #13]
 8007bce:	2b80      	cmp	r3, #128	; 0x80
 8007bd0:	d103      	bne.n	8007bda <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2209      	movs	r2, #9
 8007bd6:	761a      	strb	r2, [r3, #24]
    break;
 8007bd8:	e100      	b.n	8007ddc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2207      	movs	r2, #7
 8007bde:	761a      	strb	r2, [r3, #24]
    break;
 8007be0:	e0fc      	b.n	8007ddc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	d003      	beq.n	8007bf0 <USBH_HandleControl+0xcc>
 8007be8:	7bbb      	ldrb	r3, [r7, #14]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	f040 80f6 	bne.w	8007ddc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	220b      	movs	r2, #11
 8007bf4:	761a      	strb	r2, [r3, #24]
    break;
 8007bf6:	e0f1      	b.n	8007ddc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6899      	ldr	r1, [r3, #8]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	899a      	ldrh	r2, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	791b      	ldrb	r3, [r3, #4]
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 f930 	bl	8007e76 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2204      	movs	r2, #4
 8007c1a:	761a      	strb	r2, [r3, #24]
    break;
 8007c1c:	e0e7      	b.n	8007dee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	791b      	ldrb	r3, [r3, #4]
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fc6b 	bl	8008500 <USBH_LL_GetURBState>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	d102      	bne.n	8007c3a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2209      	movs	r2, #9
 8007c38:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d102      	bne.n	8007c46 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c44:	e0cc      	b.n	8007de0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	2b04      	cmp	r3, #4
 8007c4a:	f040 80c9 	bne.w	8007de0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	220b      	movs	r2, #11
 8007c52:	761a      	strb	r2, [r3, #24]
    break;
 8007c54:	e0c4      	b.n	8007de0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6899      	ldr	r1, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	899a      	ldrh	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	7958      	ldrb	r0, [r3, #5]
 8007c62:	2301      	movs	r3, #1
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	4603      	mov	r3, r0
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f8df 	bl	8007e2c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007c74:	b29a      	uxth	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2206      	movs	r2, #6
 8007c7e:	761a      	strb	r2, [r3, #24]
    break;
 8007c80:	e0b5      	b.n	8007dee <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	795b      	ldrb	r3, [r3, #5]
 8007c86:	4619      	mov	r1, r3
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f000 fc39 	bl	8008500 <USBH_LL_GetURBState>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8007c92:	7bbb      	ldrb	r3, [r7, #14]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d103      	bne.n	8007ca0 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2207      	movs	r2, #7
 8007c9c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007c9e:	e0a1      	b.n	8007de4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b05      	cmp	r3, #5
 8007ca4:	d105      	bne.n	8007cb2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	220c      	movs	r2, #12
 8007caa:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8007cac:	2303      	movs	r3, #3
 8007cae:	73fb      	strb	r3, [r7, #15]
    break;
 8007cb0:	e098      	b.n	8007de4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d103      	bne.n	8007cc0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2205      	movs	r2, #5
 8007cbc:	761a      	strb	r2, [r3, #24]
    break;
 8007cbe:	e091      	b.n	8007de4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b04      	cmp	r3, #4
 8007cc4:	f040 808e 	bne.w	8007de4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	220b      	movs	r2, #11
 8007ccc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8007cce:	2302      	movs	r3, #2
 8007cd0:	73fb      	strb	r3, [r7, #15]
    break;
 8007cd2:	e087      	b.n	8007de4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	791b      	ldrb	r3, [r3, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2100      	movs	r1, #0
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 f8ca 	bl	8007e76 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007ce8:	b29a      	uxth	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	761a      	strb	r2, [r3, #24]

    break;
 8007cf4:	e07b      	b.n	8007dee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	791b      	ldrb	r3, [r3, #4]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fbff 	bl	8008500 <USBH_LL_GetURBState>
 8007d02:	4603      	mov	r3, r0
 8007d04:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d105      	bne.n	8007d18 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	220d      	movs	r2, #13
 8007d10:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007d12:	2300      	movs	r3, #0
 8007d14:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007d16:	e067      	b.n	8007de8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007d18:	7bbb      	ldrb	r3, [r7, #14]
 8007d1a:	2b04      	cmp	r3, #4
 8007d1c:	d103      	bne.n	8007d26 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	220b      	movs	r2, #11
 8007d22:	761a      	strb	r2, [r3, #24]
    break;
 8007d24:	e060      	b.n	8007de8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007d26:	7bbb      	ldrb	r3, [r7, #14]
 8007d28:	2b05      	cmp	r3, #5
 8007d2a:	d15d      	bne.n	8007de8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 8007d2c:	2303      	movs	r3, #3
 8007d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d30:	e05a      	b.n	8007de8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	795a      	ldrb	r2, [r3, #5]
 8007d36:	2301      	movs	r3, #1
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	4613      	mov	r3, r2
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	2100      	movs	r1, #0
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f873 	bl	8007e2c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	220a      	movs	r2, #10
 8007d56:	761a      	strb	r2, [r3, #24]
    break;
 8007d58:	e049      	b.n	8007dee <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 fbcd 	bl	8008500 <USBH_LL_GetURBState>
 8007d66:	4603      	mov	r3, r0
 8007d68:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 8007d6a:	7bbb      	ldrb	r3, [r7, #14]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d105      	bne.n	8007d7c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	220d      	movs	r2, #13
 8007d78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 8007d7a:	e037      	b.n	8007dec <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8007d7c:	7bbb      	ldrb	r3, [r7, #14]
 8007d7e:	2b02      	cmp	r3, #2
 8007d80:	d103      	bne.n	8007d8a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2209      	movs	r2, #9
 8007d86:	761a      	strb	r2, [r3, #24]
    break;
 8007d88:	e030      	b.n	8007dec <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	2b04      	cmp	r3, #4
 8007d8e:	d12d      	bne.n	8007dec <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	220b      	movs	r2, #11
 8007d94:	761a      	strb	r2, [r3, #24]
    break;
 8007d96:	e029      	b.n	8007dec <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	7e5b      	ldrb	r3, [r3, #25]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	765a      	strb	r2, [r3, #25]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	7e5b      	ldrb	r3, [r3, #25]
 8007da8:	2b02      	cmp	r3, #2
 8007daa:	d809      	bhi.n	8007dc0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 faba 	bl	8008326 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2201      	movs	r2, #1
 8007db6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 8007dbe:	e016      	b.n	8007dee <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007dc6:	2106      	movs	r1, #6
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007dd2:	2302      	movs	r3, #2
 8007dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8007dd6:	e00a      	b.n	8007dee <USBH_HandleControl+0x2ca>

  default:
    break;
 8007dd8:	bf00      	nop
 8007dda:	e008      	b.n	8007dee <USBH_HandleControl+0x2ca>
    break;
 8007ddc:	bf00      	nop
 8007dde:	e006      	b.n	8007dee <USBH_HandleControl+0x2ca>
    break;
 8007de0:	bf00      	nop
 8007de2:	e004      	b.n	8007dee <USBH_HandleControl+0x2ca>
    break;
 8007de4:	bf00      	nop
 8007de6:	e002      	b.n	8007dee <USBH_HandleControl+0x2ca>
    break;
 8007de8:	bf00      	nop
 8007dea:	e000      	b.n	8007dee <USBH_HandleControl+0x2ca>
    break;
 8007dec:	bf00      	nop
  }
  return status;
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af04      	add	r7, sp, #16
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	4613      	mov	r3, r2
 8007e04:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e06:	79f9      	ldrb	r1, [r7, #7]
 8007e08:	2300      	movs	r3, #0
 8007e0a:	9303      	str	r3, [sp, #12]
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	9302      	str	r3, [sp, #8]
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	9301      	str	r3, [sp, #4]
 8007e14:	2300      	movs	r3, #0
 8007e16:	9300      	str	r3, [sp, #0]
 8007e18:	2300      	movs	r3, #0
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	68f8      	ldr	r0, [r7, #12]
 8007e1e:	f000 fb3e 	bl	800849e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007e22:	2300      	movs	r3, #0
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b088      	sub	sp, #32
 8007e30:	af04      	add	r7, sp, #16
 8007e32:	60f8      	str	r0, [r7, #12]
 8007e34:	60b9      	str	r1, [r7, #8]
 8007e36:	4611      	mov	r1, r2
 8007e38:	461a      	mov	r2, r3
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	80fb      	strh	r3, [r7, #6]
 8007e3e:	4613      	mov	r3, r2
 8007e40:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e50:	7979      	ldrb	r1, [r7, #5]
 8007e52:	7e3b      	ldrb	r3, [r7, #24]
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	9302      	str	r3, [sp, #8]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	9301      	str	r3, [sp, #4]
 8007e5e:	2301      	movs	r3, #1
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	2300      	movs	r3, #0
 8007e64:	2200      	movs	r2, #0
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f000 fb19 	bl	800849e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b088      	sub	sp, #32
 8007e7a:	af04      	add	r7, sp, #16
 8007e7c:	60f8      	str	r0, [r7, #12]
 8007e7e:	60b9      	str	r1, [r7, #8]
 8007e80:	4611      	mov	r1, r2
 8007e82:	461a      	mov	r2, r3
 8007e84:	460b      	mov	r3, r1
 8007e86:	80fb      	strh	r3, [r7, #6]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007e8c:	7979      	ldrb	r1, [r7, #5]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	9303      	str	r3, [sp, #12]
 8007e92:	88fb      	ldrh	r3, [r7, #6]
 8007e94:	9302      	str	r3, [sp, #8]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	9301      	str	r3, [sp, #4]
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fafb 	bl	800849e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ea8:	2300      	movs	r3, #0

}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b088      	sub	sp, #32
 8007eb6:	af04      	add	r7, sp, #16
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	461a      	mov	r2, r3
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	80fb      	strh	r3, [r7, #6]
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007ed6:	7979      	ldrb	r1, [r7, #5]
 8007ed8:	7e3b      	ldrb	r3, [r7, #24]
 8007eda:	9303      	str	r3, [sp, #12]
 8007edc:	88fb      	ldrh	r3, [r7, #6]
 8007ede:	9302      	str	r3, [sp, #8]
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	9301      	str	r3, [sp, #4]
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	2302      	movs	r3, #2
 8007eea:	2200      	movs	r2, #0
 8007eec:	68f8      	ldr	r0, [r7, #12]
 8007eee:	f000 fad6 	bl	800849e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ef2:	2300      	movs	r3, #0
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b088      	sub	sp, #32
 8007f00:	af04      	add	r7, sp, #16
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	4611      	mov	r1, r2
 8007f08:	461a      	mov	r2, r3
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	80fb      	strh	r3, [r7, #6]
 8007f0e:	4613      	mov	r3, r2
 8007f10:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007f12:	7979      	ldrb	r1, [r7, #5]
 8007f14:	2300      	movs	r3, #0
 8007f16:	9303      	str	r3, [sp, #12]
 8007f18:	88fb      	ldrh	r3, [r7, #6]
 8007f1a:	9302      	str	r3, [sp, #8]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	9301      	str	r3, [sp, #4]
 8007f20:	2301      	movs	r3, #1
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	2302      	movs	r3, #2
 8007f26:	2201      	movs	r2, #1
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 fab8 	bl	800849e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af04      	add	r7, sp, #16
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	4608      	mov	r0, r1
 8007f42:	4611      	mov	r1, r2
 8007f44:	461a      	mov	r2, r3
 8007f46:	4603      	mov	r3, r0
 8007f48:	70fb      	strb	r3, [r7, #3]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70bb      	strb	r3, [r7, #2]
 8007f4e:	4613      	mov	r3, r2
 8007f50:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007f52:	7878      	ldrb	r0, [r7, #1]
 8007f54:	78ba      	ldrb	r2, [r7, #2]
 8007f56:	78f9      	ldrb	r1, [r7, #3]
 8007f58:	8b3b      	ldrh	r3, [r7, #24]
 8007f5a:	9302      	str	r3, [sp, #8]
 8007f5c:	7d3b      	ldrb	r3, [r7, #20]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	7c3b      	ldrb	r3, [r7, #16]
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4603      	mov	r3, r0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fa4b 	bl	8008402 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 8007f6c:	2300      	movs	r3, #0

}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b082      	sub	sp, #8
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007f82:	78fb      	ldrb	r3, [r7, #3]
 8007f84:	4619      	mov	r1, r3
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa6a 	bl	8008460 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f8c:	2300      	movs	r3, #0

}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3708      	adds	r7, #8
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}

08007f96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b084      	sub	sp, #16
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f831 	bl	800800a <USBH_GetFreePipe>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007fac:	89fb      	ldrh	r3, [r7, #14]
 8007fae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d007      	beq.n	8007fc6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007fb6:	78fb      	ldrb	r3, [r7, #3]
 8007fb8:	89fa      	ldrh	r2, [r7, #14]
 8007fba:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	32e0      	adds	r2, #224	; 0xe0
 8007fc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007fc6:	89fb      	ldrh	r3, [r7, #14]
 8007fc8:	b2db      	uxtb	r3, r3
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007fd2:	b480      	push	{r7}
 8007fd4:	b083      	sub	sp, #12
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 8007fde:	78fb      	ldrb	r3, [r7, #3]
 8007fe0:	2b0a      	cmp	r3, #10
 8007fe2:	d80b      	bhi.n	8007ffc <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	32e0      	adds	r2, #224	; 0xe0
 8007fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fee:	78fa      	ldrb	r2, [r7, #3]
 8007ff0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	32e0      	adds	r2, #224	; 0xe0
 8007ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr

0800800a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800800a:	b480      	push	{r7}
 800800c:	b085      	sub	sp, #20
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
 800801a:	e00e      	b.n	800803a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800801c:	7bfa      	ldrb	r2, [r7, #15]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	32e0      	adds	r2, #224	; 0xe0
 8008022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d102      	bne.n	8008034 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	b29b      	uxth	r3, r3
 8008032:	e007      	b.n	8008044 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8008034:	7bfb      	ldrb	r3, [r7, #15]
 8008036:	3301      	adds	r3, #1
 8008038:	73fb      	strb	r3, [r7, #15]
 800803a:	7bfb      	ldrb	r3, [r7, #15]
 800803c:	2b0a      	cmp	r3, #10
 800803e:	d9ed      	bls.n	800801c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8008040:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008044:	4618      	mov	r0, r3
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008054:	2201      	movs	r2, #1
 8008056:	490e      	ldr	r1, [pc, #56]	; (8008090 <MX_USB_HOST_Init+0x40>)
 8008058:	480e      	ldr	r0, [pc, #56]	; (8008094 <MX_USB_HOST_Init+0x44>)
 800805a:	f7fe fdbb 	bl	8006bd4 <USBH_Init>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008064:	f7f9 f94c 	bl	8001300 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008068:	490b      	ldr	r1, [pc, #44]	; (8008098 <MX_USB_HOST_Init+0x48>)
 800806a:	480a      	ldr	r0, [pc, #40]	; (8008094 <MX_USB_HOST_Init+0x44>)
 800806c:	f7fe fe25 	bl	8006cba <USBH_RegisterClass>
 8008070:	4603      	mov	r3, r0
 8008072:	2b00      	cmp	r3, #0
 8008074:	d001      	beq.n	800807a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008076:	f7f9 f943 	bl	8001300 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800807a:	4806      	ldr	r0, [pc, #24]	; (8008094 <MX_USB_HOST_Init+0x44>)
 800807c:	f7fe feaa 	bl	8006dd4 <USBH_Start>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008086:	f7f9 f93b 	bl	8001300 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800808a:	bf00      	nop
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	080080b1 	.word	0x080080b1
 8008094:	200001f8 	.word	0x200001f8
 8008098:	2000000c 	.word	0x2000000c

0800809c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80080a0:	4802      	ldr	r0, [pc, #8]	; (80080ac <MX_USB_HOST_Process+0x10>)
 80080a2:	f7fe fea7 	bl	8006df4 <USBH_Process>
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	200001f8 	.word	0x200001f8

080080b0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b083      	sub	sp, #12
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80080bc:	78fb      	ldrb	r3, [r7, #3]
 80080be:	3b01      	subs	r3, #1
 80080c0:	2b04      	cmp	r3, #4
 80080c2:	d819      	bhi.n	80080f8 <USBH_UserProcess+0x48>
 80080c4:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBH_UserProcess+0x1c>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080f9 	.word	0x080080f9
 80080d0:	080080e9 	.word	0x080080e9
 80080d4:	080080f9 	.word	0x080080f9
 80080d8:	080080f1 	.word	0x080080f1
 80080dc:	080080e1 	.word	0x080080e1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80080e0:	4b09      	ldr	r3, [pc, #36]	; (8008108 <USBH_UserProcess+0x58>)
 80080e2:	2203      	movs	r2, #3
 80080e4:	701a      	strb	r2, [r3, #0]
  break;
 80080e6:	e008      	b.n	80080fa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080e8:	4b07      	ldr	r3, [pc, #28]	; (8008108 <USBH_UserProcess+0x58>)
 80080ea:	2202      	movs	r2, #2
 80080ec:	701a      	strb	r2, [r3, #0]
  break;
 80080ee:	e004      	b.n	80080fa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080f0:	4b05      	ldr	r3, [pc, #20]	; (8008108 <USBH_UserProcess+0x58>)
 80080f2:	2201      	movs	r2, #1
 80080f4:	701a      	strb	r2, [r3, #0]
  break;
 80080f6:	e000      	b.n	80080fa <USBH_UserProcess+0x4a>

  default:
  break;
 80080f8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080fa:	bf00      	nop
 80080fc:	370c      	adds	r7, #12
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	200000b4 	.word	0x200000b4

0800810c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	; 0x28
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	2200      	movs	r2, #0
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	605a      	str	r2, [r3, #4]
 800811e:	609a      	str	r2, [r3, #8]
 8008120:	60da      	str	r2, [r3, #12]
 8008122:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800812c:	d147      	bne.n	80081be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	4b25      	ldr	r3, [pc, #148]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 8008134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008136:	4a24      	ldr	r2, [pc, #144]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 8008138:	f043 0301 	orr.w	r3, r3, #1
 800813c:	6313      	str	r3, [r2, #48]	; 0x30
 800813e:	4b22      	ldr	r3, [pc, #136]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 8008140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008142:	f003 0301 	and.w	r3, r3, #1
 8008146:	613b      	str	r3, [r7, #16]
 8008148:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800814a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800814e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008150:	2300      	movs	r3, #0
 8008152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008154:	2300      	movs	r3, #0
 8008156:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008158:	f107 0314 	add.w	r3, r7, #20
 800815c:	4619      	mov	r1, r3
 800815e:	481b      	ldr	r0, [pc, #108]	; (80081cc <HAL_HCD_MspInit+0xc0>)
 8008160:	f7f9 fc88 	bl	8001a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008164:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800816a:	2302      	movs	r3, #2
 800816c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816e:	2300      	movs	r3, #0
 8008170:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008176:	230a      	movs	r3, #10
 8008178:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800817a:	f107 0314 	add.w	r3, r7, #20
 800817e:	4619      	mov	r1, r3
 8008180:	4812      	ldr	r0, [pc, #72]	; (80081cc <HAL_HCD_MspInit+0xc0>)
 8008182:	f7f9 fc77 	bl	8001a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008186:	4b10      	ldr	r3, [pc, #64]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	4a0f      	ldr	r2, [pc, #60]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 800818c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008190:	6353      	str	r3, [r2, #52]	; 0x34
 8008192:	2300      	movs	r3, #0
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 8008198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800819a:	4a0b      	ldr	r2, [pc, #44]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 800819c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081a0:	6453      	str	r3, [r2, #68]	; 0x44
 80081a2:	4b09      	ldr	r3, [pc, #36]	; (80081c8 <HAL_HCD_MspInit+0xbc>)
 80081a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081aa:	60fb      	str	r3, [r7, #12]
 80081ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081ae:	2200      	movs	r2, #0
 80081b0:	2100      	movs	r1, #0
 80081b2:	2043      	movs	r0, #67	; 0x43
 80081b4:	f7f9 fc27 	bl	8001a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081b8:	2043      	movs	r0, #67	; 0x43
 80081ba:	f7f9 fc40 	bl	8001a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081be:	bf00      	nop
 80081c0:	3728      	adds	r7, #40	; 0x28
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40023800 	.word	0x40023800
 80081cc:	40020000 	.word	0x40020000

080081d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff f8b9 	bl	8007356 <USBH_LL_IncTimer>
}
 80081e4:	bf00      	nop
 80081e6:	3708      	adds	r7, #8
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b082      	sub	sp, #8
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff f8fe 	bl	80073fc <USBH_LL_Connect>
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff f916 	bl	8007448 <USBH_LL_Disconnect>
}
 800821c:	bf00      	nop
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
 8008230:	4613      	mov	r3, r2
 8008232:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff f8ab 	bl	80073aa <USBH_LL_PortEnabled>
} 
 8008254:	bf00      	nop
 8008256:	3708      	adds	r7, #8
 8008258:	46bd      	mov	sp, r7
 800825a:	bd80      	pop	{r7, pc}

0800825c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff f8ab 	bl	80073c6 <USBH_LL_PortDisabled>
} 
 8008270:	bf00      	nop
 8008272:	3708      	adds	r7, #8
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}

08008278 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b082      	sub	sp, #8
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d12a      	bne.n	80082e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800828a:	4a18      	ldr	r2, [pc, #96]	; (80082ec <USBH_LL_Init+0x74>)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a15      	ldr	r2, [pc, #84]	; (80082ec <USBH_LL_Init+0x74>)
 8008296:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800829a:	4b14      	ldr	r3, [pc, #80]	; (80082ec <USBH_LL_Init+0x74>)
 800829c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80082a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80082a2:	4b12      	ldr	r3, [pc, #72]	; (80082ec <USBH_LL_Init+0x74>)
 80082a4:	2208      	movs	r2, #8
 80082a6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80082a8:	4b10      	ldr	r3, [pc, #64]	; (80082ec <USBH_LL_Init+0x74>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <USBH_LL_Init+0x74>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80082b4:	4b0d      	ldr	r3, [pc, #52]	; (80082ec <USBH_LL_Init+0x74>)
 80082b6:	2202      	movs	r2, #2
 80082b8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <USBH_LL_Init+0x74>)
 80082bc:	2200      	movs	r2, #0
 80082be:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80082c0:	480a      	ldr	r0, [pc, #40]	; (80082ec <USBH_LL_Init+0x74>)
 80082c2:	f7f9 fda2 	bl	8001e0a <HAL_HCD_Init>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80082cc:	f7f9 f818 	bl	8001300 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80082d0:	4806      	ldr	r0, [pc, #24]	; (80082ec <USBH_LL_Init+0x74>)
 80082d2:	f7fa f99d 	bl	8002610 <HAL_HCD_GetCurrentFrame>
 80082d6:	4603      	mov	r3, r0
 80082d8:	4619      	mov	r1, r3
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f7ff f82c 	bl	8007338 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3708      	adds	r7, #8
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
 80082ea:	bf00      	nop
 80082ec:	200005c4 	.word	0x200005c4

080082f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082fc:	2300      	movs	r3, #0
 80082fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008306:	4618      	mov	r0, r3
 8008308:	f7fa f90a 	bl	8002520 <HAL_HCD_Start>
 800830c:	4603      	mov	r3, r0
 800830e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4618      	mov	r0, r3
 8008314:	f000 f95c 	bl	80085d0 <USBH_Get_USB_Status>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800831c:	7bbb      	ldrb	r3, [r7, #14]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800832e:	2300      	movs	r3, #0
 8008330:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800833c:	4618      	mov	r0, r3
 800833e:	f7fa f912 	bl	8002566 <HAL_HCD_Stop>
 8008342:	4603      	mov	r3, r0
 8008344:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	4618      	mov	r0, r3
 800834a:	f000 f941 	bl	80085d0 <USBH_Get_USB_Status>
 800834e:	4603      	mov	r3, r0
 8008350:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008352:	7bbb      	ldrb	r3, [r7, #14]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008364:	2301      	movs	r3, #1
 8008366:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800836e:	4618      	mov	r0, r3
 8008370:	f7fa f95c 	bl	800262c <HAL_HCD_GetCurrentSpeed>
 8008374:	4603      	mov	r3, r0
 8008376:	2b01      	cmp	r3, #1
 8008378:	d007      	beq.n	800838a <USBH_LL_GetSpeed+0x2e>
 800837a:	2b01      	cmp	r3, #1
 800837c:	d302      	bcc.n	8008384 <USBH_LL_GetSpeed+0x28>
 800837e:	2b02      	cmp	r3, #2
 8008380:	d006      	beq.n	8008390 <USBH_LL_GetSpeed+0x34>
 8008382:	e008      	b.n	8008396 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008384:	2300      	movs	r3, #0
 8008386:	73fb      	strb	r3, [r7, #15]
    break;
 8008388:	e008      	b.n	800839c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800838a:	2301      	movs	r3, #1
 800838c:	73fb      	strb	r3, [r7, #15]
    break;
 800838e:	e005      	b.n	800839c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008390:	2302      	movs	r3, #2
 8008392:	73fb      	strb	r3, [r7, #15]
    break;
 8008394:	e002      	b.n	800839c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8008396:	2301      	movs	r3, #1
 8008398:	73fb      	strb	r3, [r7, #15]
    break;
 800839a:	bf00      	nop
  }
  return  speed;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083b2:	2300      	movs	r3, #0
 80083b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083bc:	4618      	mov	r0, r3
 80083be:	f7fa f8ef 	bl	80025a0 <HAL_HCD_ResetPort>
 80083c2:	4603      	mov	r3, r0
 80083c4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f000 f901 	bl	80085d0 <USBH_Get_USB_Status>
 80083ce:	4603      	mov	r3, r0
 80083d0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80083d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	460b      	mov	r3, r1
 80083e6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80083ee:	78fa      	ldrb	r2, [r7, #3]
 80083f0:	4611      	mov	r1, r2
 80083f2:	4618      	mov	r0, r3
 80083f4:	f7fa f8f7 	bl	80025e6 <HAL_HCD_HC_GetXferCount>
 80083f8:	4603      	mov	r3, r0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008402:	b590      	push	{r4, r7, lr}
 8008404:	b089      	sub	sp, #36	; 0x24
 8008406:	af04      	add	r7, sp, #16
 8008408:	6078      	str	r0, [r7, #4]
 800840a:	4608      	mov	r0, r1
 800840c:	4611      	mov	r1, r2
 800840e:	461a      	mov	r2, r3
 8008410:	4603      	mov	r3, r0
 8008412:	70fb      	strb	r3, [r7, #3]
 8008414:	460b      	mov	r3, r1
 8008416:	70bb      	strb	r3, [r7, #2]
 8008418:	4613      	mov	r3, r2
 800841a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800841c:	2300      	movs	r3, #0
 800841e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008420:	2300      	movs	r3, #0
 8008422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800842a:	787c      	ldrb	r4, [r7, #1]
 800842c:	78ba      	ldrb	r2, [r7, #2]
 800842e:	78f9      	ldrb	r1, [r7, #3]
 8008430:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008432:	9302      	str	r3, [sp, #8]
 8008434:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008438:	9301      	str	r3, [sp, #4]
 800843a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	4623      	mov	r3, r4
 8008442:	f7f9 fd44 	bl	8001ece <HAL_HCD_HC_Init>
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800844a:	7bfb      	ldrb	r3, [r7, #15]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 f8bf 	bl	80085d0 <USBH_Get_USB_Status>
 8008452:	4603      	mov	r3, r0
 8008454:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008456:	7bbb      	ldrb	r3, [r7, #14]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	bd90      	pop	{r4, r7, pc}

08008460 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800846c:	2300      	movs	r3, #0
 800846e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008470:	2300      	movs	r3, #0
 8008472:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800847a:	78fa      	ldrb	r2, [r7, #3]
 800847c:	4611      	mov	r1, r2
 800847e:	4618      	mov	r0, r3
 8008480:	f7f9 fdbd 	bl	8001ffe <HAL_HCD_HC_Halt>
 8008484:	4603      	mov	r3, r0
 8008486:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008488:	7bfb      	ldrb	r3, [r7, #15]
 800848a:	4618      	mov	r0, r3
 800848c:	f000 f8a0 	bl	80085d0 <USBH_Get_USB_Status>
 8008490:	4603      	mov	r3, r0
 8008492:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008494:	7bbb      	ldrb	r3, [r7, #14]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800849e:	b590      	push	{r4, r7, lr}
 80084a0:	b089      	sub	sp, #36	; 0x24
 80084a2:	af04      	add	r7, sp, #16
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	461a      	mov	r2, r3
 80084ac:	4603      	mov	r3, r0
 80084ae:	70fb      	strb	r3, [r7, #3]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70bb      	strb	r3, [r7, #2]
 80084b4:	4613      	mov	r3, r2
 80084b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084b8:	2300      	movs	r3, #0
 80084ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80084c6:	787c      	ldrb	r4, [r7, #1]
 80084c8:	78ba      	ldrb	r2, [r7, #2]
 80084ca:	78f9      	ldrb	r1, [r7, #3]
 80084cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084d0:	9303      	str	r3, [sp, #12]
 80084d2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80084d4:	9302      	str	r3, [sp, #8]
 80084d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d8:	9301      	str	r3, [sp, #4]
 80084da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	4623      	mov	r3, r4
 80084e2:	f7f9 fdaf 	bl	8002044 <HAL_HCD_HC_SubmitRequest>
 80084e6:	4603      	mov	r3, r0
 80084e8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 f86f 	bl	80085d0 <USBH_Get_USB_Status>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80084f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3714      	adds	r7, #20
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd90      	pop	{r4, r7, pc}

08008500 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008512:	78fa      	ldrb	r2, [r7, #3]
 8008514:	4611      	mov	r1, r2
 8008516:	4618      	mov	r0, r3
 8008518:	f7fa f850 	bl	80025bc <HAL_HCD_HC_GetURBState>
 800851c:	4603      	mov	r3, r0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3708      	adds	r7, #8
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}

08008526 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b082      	sub	sp, #8
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
 800852e:	460b      	mov	r3, r1
 8008530:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008538:	2b01      	cmp	r3, #1
 800853a:	d103      	bne.n	8008544 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800853c:	78fb      	ldrb	r3, [r7, #3]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f872 	bl	8008628 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008544:	20c8      	movs	r0, #200	; 0xc8
 8008546:	f7f9 f961 	bl	800180c <HAL_Delay>
  return USBH_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
 8008560:	4613      	mov	r3, r2
 8008562:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800856a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800856c:	78fa      	ldrb	r2, [r7, #3]
 800856e:	68f9      	ldr	r1, [r7, #12]
 8008570:	4613      	mov	r3, r2
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4413      	add	r3, r2
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	440b      	add	r3, r1
 800857a:	333b      	adds	r3, #59	; 0x3b
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00a      	beq.n	8008598 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	68f9      	ldr	r1, [r7, #12]
 8008586:	4613      	mov	r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	4413      	add	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	440b      	add	r3, r1
 8008590:	3350      	adds	r3, #80	; 0x50
 8008592:	78ba      	ldrb	r2, [r7, #2]
 8008594:	701a      	strb	r2, [r3, #0]
 8008596:	e009      	b.n	80085ac <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008598:	78fa      	ldrb	r2, [r7, #3]
 800859a:	68f9      	ldr	r1, [r7, #12]
 800859c:	4613      	mov	r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	4413      	add	r3, r2
 80085a2:	00db      	lsls	r3, r3, #3
 80085a4:	440b      	add	r3, r1
 80085a6:	3351      	adds	r3, #81	; 0x51
 80085a8:	78ba      	ldrb	r2, [r7, #2]
 80085aa:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80085ac:	2300      	movs	r3, #0
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3714      	adds	r7, #20
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b082      	sub	sp, #8
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f7f9 f922 	bl	800180c <HAL_Delay>
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	4603      	mov	r3, r0
 80085d8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80085de:	79fb      	ldrb	r3, [r7, #7]
 80085e0:	2b03      	cmp	r3, #3
 80085e2:	d817      	bhi.n	8008614 <USBH_Get_USB_Status+0x44>
 80085e4:	a201      	add	r2, pc, #4	; (adr r2, 80085ec <USBH_Get_USB_Status+0x1c>)
 80085e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ea:	bf00      	nop
 80085ec:	080085fd 	.word	0x080085fd
 80085f0:	08008603 	.word	0x08008603
 80085f4:	08008609 	.word	0x08008609
 80085f8:	0800860f 	.word	0x0800860f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085fc:	2300      	movs	r3, #0
 80085fe:	73fb      	strb	r3, [r7, #15]
    break;
 8008600:	e00b      	b.n	800861a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008602:	2302      	movs	r3, #2
 8008604:	73fb      	strb	r3, [r7, #15]
    break;
 8008606:	e008      	b.n	800861a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008608:	2301      	movs	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
    break;
 800860c:	e005      	b.n	800861a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800860e:	2302      	movs	r3, #2
 8008610:	73fb      	strb	r3, [r7, #15]
    break;
 8008612:	e002      	b.n	800861a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008614:	2302      	movs	r3, #2
 8008616:	73fb      	strb	r3, [r7, #15]
    break;
 8008618:	bf00      	nop
  }
  return usb_status;
 800861a:	7bfb      	ldrb	r3, [r7, #15]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008632:	79fb      	ldrb	r3, [r7, #7]
 8008634:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008636:	79fb      	ldrb	r3, [r7, #7]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d102      	bne.n	8008642 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800863c:	2301      	movs	r3, #1
 800863e:	73fb      	strb	r3, [r7, #15]
 8008640:	e001      	b.n	8008646 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008646:	7bfb      	ldrb	r3, [r7, #15]
 8008648:	461a      	mov	r2, r3
 800864a:	2101      	movs	r1, #1
 800864c:	4803      	ldr	r0, [pc, #12]	; (800865c <MX_DriverVbusFS+0x34>)
 800864e:	f7f9 fbc3 	bl	8001dd8 <HAL_GPIO_WritePin>
}
 8008652:	bf00      	nop
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	40020800 	.word	0x40020800

08008660 <__errno>:
 8008660:	4b01      	ldr	r3, [pc, #4]	; (8008668 <__errno+0x8>)
 8008662:	6818      	ldr	r0, [r3, #0]
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	2000002c 	.word	0x2000002c

0800866c <__libc_init_array>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0d      	ldr	r6, [pc, #52]	; (80086a4 <__libc_init_array+0x38>)
 8008670:	4c0d      	ldr	r4, [pc, #52]	; (80086a8 <__libc_init_array+0x3c>)
 8008672:	1ba4      	subs	r4, r4, r6
 8008674:	10a4      	asrs	r4, r4, #2
 8008676:	2500      	movs	r5, #0
 8008678:	42a5      	cmp	r5, r4
 800867a:	d109      	bne.n	8008690 <__libc_init_array+0x24>
 800867c:	4e0b      	ldr	r6, [pc, #44]	; (80086ac <__libc_init_array+0x40>)
 800867e:	4c0c      	ldr	r4, [pc, #48]	; (80086b0 <__libc_init_array+0x44>)
 8008680:	f000 f8ea 	bl	8008858 <_init>
 8008684:	1ba4      	subs	r4, r4, r6
 8008686:	10a4      	asrs	r4, r4, #2
 8008688:	2500      	movs	r5, #0
 800868a:	42a5      	cmp	r5, r4
 800868c:	d105      	bne.n	800869a <__libc_init_array+0x2e>
 800868e:	bd70      	pop	{r4, r5, r6, pc}
 8008690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008694:	4798      	blx	r3
 8008696:	3501      	adds	r5, #1
 8008698:	e7ee      	b.n	8008678 <__libc_init_array+0xc>
 800869a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800869e:	4798      	blx	r3
 80086a0:	3501      	adds	r5, #1
 80086a2:	e7f2      	b.n	800868a <__libc_init_array+0x1e>
 80086a4:	08008894 	.word	0x08008894
 80086a8:	08008894 	.word	0x08008894
 80086ac:	08008894 	.word	0x08008894
 80086b0:	08008898 	.word	0x08008898

080086b4 <malloc>:
 80086b4:	4b02      	ldr	r3, [pc, #8]	; (80086c0 <malloc+0xc>)
 80086b6:	4601      	mov	r1, r0
 80086b8:	6818      	ldr	r0, [r3, #0]
 80086ba:	f000 b861 	b.w	8008780 <_malloc_r>
 80086be:	bf00      	nop
 80086c0:	2000002c 	.word	0x2000002c

080086c4 <free>:
 80086c4:	4b02      	ldr	r3, [pc, #8]	; (80086d0 <free+0xc>)
 80086c6:	4601      	mov	r1, r0
 80086c8:	6818      	ldr	r0, [r3, #0]
 80086ca:	f000 b80b 	b.w	80086e4 <_free_r>
 80086ce:	bf00      	nop
 80086d0:	2000002c 	.word	0x2000002c

080086d4 <memset>:
 80086d4:	4402      	add	r2, r0
 80086d6:	4603      	mov	r3, r0
 80086d8:	4293      	cmp	r3, r2
 80086da:	d100      	bne.n	80086de <memset+0xa>
 80086dc:	4770      	bx	lr
 80086de:	f803 1b01 	strb.w	r1, [r3], #1
 80086e2:	e7f9      	b.n	80086d8 <memset+0x4>

080086e4 <_free_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4605      	mov	r5, r0
 80086e8:	2900      	cmp	r1, #0
 80086ea:	d045      	beq.n	8008778 <_free_r+0x94>
 80086ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086f0:	1f0c      	subs	r4, r1, #4
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	bfb8      	it	lt
 80086f6:	18e4      	addlt	r4, r4, r3
 80086f8:	f000 f8ac 	bl	8008854 <__malloc_lock>
 80086fc:	4a1f      	ldr	r2, [pc, #124]	; (800877c <_free_r+0x98>)
 80086fe:	6813      	ldr	r3, [r2, #0]
 8008700:	4610      	mov	r0, r2
 8008702:	b933      	cbnz	r3, 8008712 <_free_r+0x2e>
 8008704:	6063      	str	r3, [r4, #4]
 8008706:	6014      	str	r4, [r2, #0]
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800870e:	f000 b8a2 	b.w	8008856 <__malloc_unlock>
 8008712:	42a3      	cmp	r3, r4
 8008714:	d90c      	bls.n	8008730 <_free_r+0x4c>
 8008716:	6821      	ldr	r1, [r4, #0]
 8008718:	1862      	adds	r2, r4, r1
 800871a:	4293      	cmp	r3, r2
 800871c:	bf04      	itt	eq
 800871e:	681a      	ldreq	r2, [r3, #0]
 8008720:	685b      	ldreq	r3, [r3, #4]
 8008722:	6063      	str	r3, [r4, #4]
 8008724:	bf04      	itt	eq
 8008726:	1852      	addeq	r2, r2, r1
 8008728:	6022      	streq	r2, [r4, #0]
 800872a:	6004      	str	r4, [r0, #0]
 800872c:	e7ec      	b.n	8008708 <_free_r+0x24>
 800872e:	4613      	mov	r3, r2
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	b10a      	cbz	r2, 8008738 <_free_r+0x54>
 8008734:	42a2      	cmp	r2, r4
 8008736:	d9fa      	bls.n	800872e <_free_r+0x4a>
 8008738:	6819      	ldr	r1, [r3, #0]
 800873a:	1858      	adds	r0, r3, r1
 800873c:	42a0      	cmp	r0, r4
 800873e:	d10b      	bne.n	8008758 <_free_r+0x74>
 8008740:	6820      	ldr	r0, [r4, #0]
 8008742:	4401      	add	r1, r0
 8008744:	1858      	adds	r0, r3, r1
 8008746:	4282      	cmp	r2, r0
 8008748:	6019      	str	r1, [r3, #0]
 800874a:	d1dd      	bne.n	8008708 <_free_r+0x24>
 800874c:	6810      	ldr	r0, [r2, #0]
 800874e:	6852      	ldr	r2, [r2, #4]
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	4401      	add	r1, r0
 8008754:	6019      	str	r1, [r3, #0]
 8008756:	e7d7      	b.n	8008708 <_free_r+0x24>
 8008758:	d902      	bls.n	8008760 <_free_r+0x7c>
 800875a:	230c      	movs	r3, #12
 800875c:	602b      	str	r3, [r5, #0]
 800875e:	e7d3      	b.n	8008708 <_free_r+0x24>
 8008760:	6820      	ldr	r0, [r4, #0]
 8008762:	1821      	adds	r1, r4, r0
 8008764:	428a      	cmp	r2, r1
 8008766:	bf04      	itt	eq
 8008768:	6811      	ldreq	r1, [r2, #0]
 800876a:	6852      	ldreq	r2, [r2, #4]
 800876c:	6062      	str	r2, [r4, #4]
 800876e:	bf04      	itt	eq
 8008770:	1809      	addeq	r1, r1, r0
 8008772:	6021      	streq	r1, [r4, #0]
 8008774:	605c      	str	r4, [r3, #4]
 8008776:	e7c7      	b.n	8008708 <_free_r+0x24>
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	bf00      	nop
 800877c:	200000b8 	.word	0x200000b8

08008780 <_malloc_r>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	1ccd      	adds	r5, r1, #3
 8008784:	f025 0503 	bic.w	r5, r5, #3
 8008788:	3508      	adds	r5, #8
 800878a:	2d0c      	cmp	r5, #12
 800878c:	bf38      	it	cc
 800878e:	250c      	movcc	r5, #12
 8008790:	2d00      	cmp	r5, #0
 8008792:	4606      	mov	r6, r0
 8008794:	db01      	blt.n	800879a <_malloc_r+0x1a>
 8008796:	42a9      	cmp	r1, r5
 8008798:	d903      	bls.n	80087a2 <_malloc_r+0x22>
 800879a:	230c      	movs	r3, #12
 800879c:	6033      	str	r3, [r6, #0]
 800879e:	2000      	movs	r0, #0
 80087a0:	bd70      	pop	{r4, r5, r6, pc}
 80087a2:	f000 f857 	bl	8008854 <__malloc_lock>
 80087a6:	4a21      	ldr	r2, [pc, #132]	; (800882c <_malloc_r+0xac>)
 80087a8:	6814      	ldr	r4, [r2, #0]
 80087aa:	4621      	mov	r1, r4
 80087ac:	b991      	cbnz	r1, 80087d4 <_malloc_r+0x54>
 80087ae:	4c20      	ldr	r4, [pc, #128]	; (8008830 <_malloc_r+0xb0>)
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	b91b      	cbnz	r3, 80087bc <_malloc_r+0x3c>
 80087b4:	4630      	mov	r0, r6
 80087b6:	f000 f83d 	bl	8008834 <_sbrk_r>
 80087ba:	6020      	str	r0, [r4, #0]
 80087bc:	4629      	mov	r1, r5
 80087be:	4630      	mov	r0, r6
 80087c0:	f000 f838 	bl	8008834 <_sbrk_r>
 80087c4:	1c43      	adds	r3, r0, #1
 80087c6:	d124      	bne.n	8008812 <_malloc_r+0x92>
 80087c8:	230c      	movs	r3, #12
 80087ca:	6033      	str	r3, [r6, #0]
 80087cc:	4630      	mov	r0, r6
 80087ce:	f000 f842 	bl	8008856 <__malloc_unlock>
 80087d2:	e7e4      	b.n	800879e <_malloc_r+0x1e>
 80087d4:	680b      	ldr	r3, [r1, #0]
 80087d6:	1b5b      	subs	r3, r3, r5
 80087d8:	d418      	bmi.n	800880c <_malloc_r+0x8c>
 80087da:	2b0b      	cmp	r3, #11
 80087dc:	d90f      	bls.n	80087fe <_malloc_r+0x7e>
 80087de:	600b      	str	r3, [r1, #0]
 80087e0:	50cd      	str	r5, [r1, r3]
 80087e2:	18cc      	adds	r4, r1, r3
 80087e4:	4630      	mov	r0, r6
 80087e6:	f000 f836 	bl	8008856 <__malloc_unlock>
 80087ea:	f104 000b 	add.w	r0, r4, #11
 80087ee:	1d23      	adds	r3, r4, #4
 80087f0:	f020 0007 	bic.w	r0, r0, #7
 80087f4:	1ac3      	subs	r3, r0, r3
 80087f6:	d0d3      	beq.n	80087a0 <_malloc_r+0x20>
 80087f8:	425a      	negs	r2, r3
 80087fa:	50e2      	str	r2, [r4, r3]
 80087fc:	e7d0      	b.n	80087a0 <_malloc_r+0x20>
 80087fe:	428c      	cmp	r4, r1
 8008800:	684b      	ldr	r3, [r1, #4]
 8008802:	bf16      	itet	ne
 8008804:	6063      	strne	r3, [r4, #4]
 8008806:	6013      	streq	r3, [r2, #0]
 8008808:	460c      	movne	r4, r1
 800880a:	e7eb      	b.n	80087e4 <_malloc_r+0x64>
 800880c:	460c      	mov	r4, r1
 800880e:	6849      	ldr	r1, [r1, #4]
 8008810:	e7cc      	b.n	80087ac <_malloc_r+0x2c>
 8008812:	1cc4      	adds	r4, r0, #3
 8008814:	f024 0403 	bic.w	r4, r4, #3
 8008818:	42a0      	cmp	r0, r4
 800881a:	d005      	beq.n	8008828 <_malloc_r+0xa8>
 800881c:	1a21      	subs	r1, r4, r0
 800881e:	4630      	mov	r0, r6
 8008820:	f000 f808 	bl	8008834 <_sbrk_r>
 8008824:	3001      	adds	r0, #1
 8008826:	d0cf      	beq.n	80087c8 <_malloc_r+0x48>
 8008828:	6025      	str	r5, [r4, #0]
 800882a:	e7db      	b.n	80087e4 <_malloc_r+0x64>
 800882c:	200000b8 	.word	0x200000b8
 8008830:	200000bc 	.word	0x200000bc

08008834 <_sbrk_r>:
 8008834:	b538      	push	{r3, r4, r5, lr}
 8008836:	4c06      	ldr	r4, [pc, #24]	; (8008850 <_sbrk_r+0x1c>)
 8008838:	2300      	movs	r3, #0
 800883a:	4605      	mov	r5, r0
 800883c:	4608      	mov	r0, r1
 800883e:	6023      	str	r3, [r4, #0]
 8008840:	f7f8 ff06 	bl	8001650 <_sbrk>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_sbrk_r+0x1a>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	b103      	cbz	r3, 800884e <_sbrk_r+0x1a>
 800884c:	602b      	str	r3, [r5, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20000888 	.word	0x20000888

08008854 <__malloc_lock>:
 8008854:	4770      	bx	lr

08008856 <__malloc_unlock>:
 8008856:	4770      	bx	lr

08008858 <_init>:
 8008858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800885a:	bf00      	nop
 800885c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800885e:	bc08      	pop	{r3}
 8008860:	469e      	mov	lr, r3
 8008862:	4770      	bx	lr

08008864 <_fini>:
 8008864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008866:	bf00      	nop
 8008868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800886a:	bc08      	pop	{r3}
 800886c:	469e      	mov	lr, r3
 800886e:	4770      	bx	lr
